/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.medcrypt.heimdall.web.common.DateRange', null, global);
goog.exportSymbol('proto.medcrypt.heimdall.web.common.FileMetadata', null, global);
goog.exportSymbol('proto.medcrypt.heimdall.web.common.Page', null, global);
goog.exportSymbol('proto.medcrypt.heimdall.web.common.RequestMetadata', null, global);
goog.exportSymbol('proto.medcrypt.heimdall.web.common.ResponseMetadata', null, global);
goog.exportSymbol('proto.medcrypt.heimdall.web.common.ResponseMetadataStatus', null, global);
goog.exportSymbol('proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.Type', null, global);
goog.exportSymbol('proto.medcrypt.heimdall.web.common.SbomEntryOrder', null, global);
goog.exportSymbol('proto.medcrypt.heimdall.web.common.SbomEntryOrder.Column', null, global);
goog.exportSymbol('proto.medcrypt.heimdall.web.common.UUID', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.heimdall.web.common.UUID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.heimdall.web.common.UUID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.heimdall.web.common.UUID.displayName = 'proto.medcrypt.heimdall.web.common.UUID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.heimdall.web.common.UUID.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.heimdall.web.common.UUID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.heimdall.web.common.UUID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.UUID.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: msg.getUuid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.heimdall.web.common.UUID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.heimdall.web.common.UUID;
  return proto.medcrypt.heimdall.web.common.UUID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.heimdall.web.common.UUID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.heimdall.web.common.UUID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.heimdall.web.common.UUID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.heimdall.web.common.UUID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.heimdall.web.common.UUID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.UUID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes uuid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.medcrypt.heimdall.web.common.UUID.prototype.getUuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes uuid = 1;
 * This is a type-conversion wrapper around `getUuid()`
 * @return {string}
 */
proto.medcrypt.heimdall.web.common.UUID.prototype.getUuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUuid()));
};


/**
 * optional bytes uuid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUuid()`
 * @return {!Uint8Array}
 */
proto.medcrypt.heimdall.web.common.UUID.prototype.getUuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUuid()));
};


/** @param {!(string|Uint8Array)} value */
proto.medcrypt.heimdall.web.common.UUID.prototype.setUuid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.heimdall.web.common.RequestMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.heimdall.web.common.RequestMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.heimdall.web.common.RequestMetadata.displayName = 'proto.medcrypt.heimdall.web.common.RequestMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.heimdall.web.common.RequestMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.heimdall.web.common.RequestMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.heimdall.web.common.RequestMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.RequestMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestUuid: (f = msg.getRequestUuid()) && proto.medcrypt.heimdall.web.common.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.heimdall.web.common.RequestMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.heimdall.web.common.RequestMetadata;
  return proto.medcrypt.heimdall.web.common.RequestMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.heimdall.web.common.RequestMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.heimdall.web.common.RequestMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.heimdall.web.common.UUID;
      reader.readMessage(value,proto.medcrypt.heimdall.web.common.UUID.deserializeBinaryFromReader);
      msg.setRequestUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.heimdall.web.common.RequestMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.heimdall.web.common.RequestMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.heimdall.web.common.RequestMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.RequestMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.heimdall.web.common.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID request_uuid = 1;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.heimdall.web.common.RequestMetadata.prototype.getRequestUuid = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.heimdall.web.common.UUID, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.heimdall.web.common.RequestMetadata.prototype.setRequestUuid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.heimdall.web.common.RequestMetadata.prototype.clearRequestUuid = function() {
  this.setRequestUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.heimdall.web.common.RequestMetadata.prototype.hasRequestUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.heimdall.web.common.ResponseMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.heimdall.web.common.ResponseMetadata.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.heimdall.web.common.ResponseMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.heimdall.web.common.ResponseMetadata.displayName = 'proto.medcrypt.heimdall.web.common.ResponseMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.heimdall.web.common.ResponseMetadata.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.heimdall.web.common.ResponseMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.heimdall.web.common.ResponseMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.heimdall.web.common.ResponseMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.ResponseMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    statusMessageList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.heimdall.web.common.ResponseMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.heimdall.web.common.ResponseMetadata;
  return proto.medcrypt.heimdall.web.common.ResponseMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.heimdall.web.common.ResponseMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.heimdall.web.common.ResponseMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.Type} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addStatusMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.heimdall.web.common.ResponseMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.heimdall.web.common.ResponseMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.heimdall.web.common.ResponseMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.ResponseMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStatusMessageList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional ResponseMetadataStatus.Type status = 1;
 * @return {!proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.Type}
 */
proto.medcrypt.heimdall.web.common.ResponseMetadata.prototype.getStatus = function() {
  return /** @type {!proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.Type} value */
proto.medcrypt.heimdall.web.common.ResponseMetadata.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated string status_message = 2;
 * @return {!Array.<string>}
 */
proto.medcrypt.heimdall.web.common.ResponseMetadata.prototype.getStatusMessageList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.medcrypt.heimdall.web.common.ResponseMetadata.prototype.setStatusMessageList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.medcrypt.heimdall.web.common.ResponseMetadata.prototype.addStatusMessage = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.medcrypt.heimdall.web.common.ResponseMetadata.prototype.clearStatusMessageList = function() {
  this.setStatusMessageList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.heimdall.web.common.ResponseMetadataStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.heimdall.web.common.ResponseMetadataStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.displayName = 'proto.medcrypt.heimdall.web.common.ResponseMetadataStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.heimdall.web.common.ResponseMetadataStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.heimdall.web.common.ResponseMetadataStatus}
 */
proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.heimdall.web.common.ResponseMetadataStatus;
  return proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.heimdall.web.common.ResponseMetadataStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.heimdall.web.common.ResponseMetadataStatus}
 */
proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.heimdall.web.common.ResponseMetadataStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.medcrypt.heimdall.web.common.ResponseMetadataStatus.Type = {
  OK: 0,
  BAD_REQUEST: 1,
  FORBIDDEN: 2,
  NOT_FOUND: 3,
  INTERNAL_SERVER_ERROR: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.heimdall.web.common.FileMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.heimdall.web.common.FileMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.heimdall.web.common.FileMetadata.displayName = 'proto.medcrypt.heimdall.web.common.FileMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.heimdall.web.common.FileMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.heimdall.web.common.FileMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.heimdall.web.common.FileMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.FileMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.medcrypt.heimdall.web.common.UUID.toObject(includeInstance, f),
    originalName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.heimdall.web.common.FileMetadata}
 */
proto.medcrypt.heimdall.web.common.FileMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.heimdall.web.common.FileMetadata;
  return proto.medcrypt.heimdall.web.common.FileMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.heimdall.web.common.FileMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.heimdall.web.common.FileMetadata}
 */
proto.medcrypt.heimdall.web.common.FileMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.heimdall.web.common.UUID;
      reader.readMessage(value,proto.medcrypt.heimdall.web.common.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.heimdall.web.common.FileMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.heimdall.web.common.FileMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.heimdall.web.common.FileMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.FileMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.heimdall.web.common.UUID.serializeBinaryToWriter
    );
  }
  f = message.getOriginalName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional UUID id = 1;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.heimdall.web.common.FileMetadata.prototype.getId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.heimdall.web.common.UUID, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.heimdall.web.common.FileMetadata.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.heimdall.web.common.FileMetadata.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.heimdall.web.common.FileMetadata.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string original_name = 2;
 * @return {string}
 */
proto.medcrypt.heimdall.web.common.FileMetadata.prototype.getOriginalName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.medcrypt.heimdall.web.common.FileMetadata.prototype.setOriginalName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 created_at = 3;
 * @return {number}
 */
proto.medcrypt.heimdall.web.common.FileMetadata.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.medcrypt.heimdall.web.common.FileMetadata.prototype.setCreatedAt = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.heimdall.web.common.Page = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.heimdall.web.common.Page, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.heimdall.web.common.Page.displayName = 'proto.medcrypt.heimdall.web.common.Page';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.heimdall.web.common.Page.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.heimdall.web.common.Page.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.heimdall.web.common.Page} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.Page.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    items: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.heimdall.web.common.Page}
 */
proto.medcrypt.heimdall.web.common.Page.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.heimdall.web.common.Page;
  return proto.medcrypt.heimdall.web.common.Page.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.heimdall.web.common.Page} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.heimdall.web.common.Page}
 */
proto.medcrypt.heimdall.web.common.Page.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.heimdall.web.common.Page.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.heimdall.web.common.Page.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.heimdall.web.common.Page} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.Page.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getItems();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.medcrypt.heimdall.web.common.Page.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.medcrypt.heimdall.web.common.Page.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 items = 2;
 * @return {number}
 */
proto.medcrypt.heimdall.web.common.Page.prototype.getItems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.medcrypt.heimdall.web.common.Page.prototype.setItems = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.heimdall.web.common.DateRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.heimdall.web.common.DateRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.heimdall.web.common.DateRange.displayName = 'proto.medcrypt.heimdall.web.common.DateRange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.heimdall.web.common.DateRange.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.heimdall.web.common.DateRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.heimdall.web.common.DateRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.DateRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.heimdall.web.common.DateRange}
 */
proto.medcrypt.heimdall.web.common.DateRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.heimdall.web.common.DateRange;
  return proto.medcrypt.heimdall.web.common.DateRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.heimdall.web.common.DateRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.heimdall.web.common.DateRange}
 */
proto.medcrypt.heimdall.web.common.DateRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.heimdall.web.common.DateRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.heimdall.web.common.DateRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.heimdall.web.common.DateRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.DateRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEndTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 start_timestamp = 1;
 * @return {number}
 */
proto.medcrypt.heimdall.web.common.DateRange.prototype.getStartTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.medcrypt.heimdall.web.common.DateRange.prototype.setStartTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 end_timestamp = 2;
 * @return {number}
 */
proto.medcrypt.heimdall.web.common.DateRange.prototype.getEndTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.medcrypt.heimdall.web.common.DateRange.prototype.setEndTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.heimdall.web.common.SbomEntryOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.heimdall.web.common.SbomEntryOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.heimdall.web.common.SbomEntryOrder.displayName = 'proto.medcrypt.heimdall.web.common.SbomEntryOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.heimdall.web.common.SbomEntryOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.heimdall.web.common.SbomEntryOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.heimdall.web.common.SbomEntryOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.SbomEntryOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    column: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isDescending: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.heimdall.web.common.SbomEntryOrder}
 */
proto.medcrypt.heimdall.web.common.SbomEntryOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.heimdall.web.common.SbomEntryOrder;
  return proto.medcrypt.heimdall.web.common.SbomEntryOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.heimdall.web.common.SbomEntryOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.heimdall.web.common.SbomEntryOrder}
 */
proto.medcrypt.heimdall.web.common.SbomEntryOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.medcrypt.heimdall.web.common.SbomEntryOrder.Column} */ (reader.readEnum());
      msg.setColumn(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDescending(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.heimdall.web.common.SbomEntryOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.heimdall.web.common.SbomEntryOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.heimdall.web.common.SbomEntryOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.heimdall.web.common.SbomEntryOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumn();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIsDescending();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.medcrypt.heimdall.web.common.SbomEntryOrder.Column = {
  PRODUCT_NAME: 0,
  PRODUCT_VERSION_STRING: 1,
  VENDOR_NAME: 2,
  SBOM_ENTRY_STATE: 3,
  SBOM_ENTRY_REVIEW_STATUS: 4,
  SBOM_ENTRY_MATCH_TYPE: 5
};

/**
 * optional Column column = 1;
 * @return {!proto.medcrypt.heimdall.web.common.SbomEntryOrder.Column}
 */
proto.medcrypt.heimdall.web.common.SbomEntryOrder.prototype.getColumn = function() {
  return /** @type {!proto.medcrypt.heimdall.web.common.SbomEntryOrder.Column} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.medcrypt.heimdall.web.common.SbomEntryOrder.Column} value */
proto.medcrypt.heimdall.web.common.SbomEntryOrder.prototype.setColumn = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool is_descending = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.heimdall.web.common.SbomEntryOrder.prototype.getIsDescending = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.medcrypt.heimdall.web.common.SbomEntryOrder.prototype.setIsDescending = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


goog.object.extend(exports, proto.medcrypt.heimdall.web.common);
