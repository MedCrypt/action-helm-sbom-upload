/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.5.1
 * source: v1/common/heim_remediations.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../heim_common";
import * as dependency_2 from "./heim_enums";
import * as pb_1 from "google-protobuf";
export enum CycloneDxRemediationState {
    CDXRS_NOT_DEFINED = 0,
    CDXRS_RESOLVED = 1,
    CDXRS_RESOLVED_WITH_PEDIGREE = 2,
    CDXRS_EXPLOITABLE = 3,
    CDXRS_IN_TRIAGE = 4,
    CDXRS_FALSE_POSITIVE = 5,
    CDXRS_NOT_AFFECTED = 6
}
export enum CycloneDxRemediationJustification {
    CDXRJ_NOT_DEFINED = 0,
    CDXRJ_CODE_NOT_PRESENT = 1,
    CDXRJ_CODE_NOT_REACHABLE = 2,
    CDXRJ_REQUIRES_CONFIGURATION = 3,
    CDXRJ_REQUIRES_DEPENDENCY = 4,
    CDXRJ_REQUIRES_ENVIRONMENT = 5,
    CDXRJ_PROTECTED_BY_COMPILER = 6,
    CDXRJ_PROTECTED_AT_RUNTIME = 7,
    CDXRJ_PROTECTED_AT_PERIMETER = 8,
    CDXRJ_PROTECTED_BY_MITIGATING_CONTROL = 9
}
export enum CycloneDxRemediationResponse {
    CDXRR_NOT_DEFINED = 0,
    CDXRR_CAN_NOT_FIX = 1,
    CDXRR_WILL_NOT_FIX = 2,
    CDXRR_UPDATE = 3,
    CDXRR_ROLLBACK = 4,
    CDXRR_WORKAROUND_AVAILABLE = 5
}
export enum CycloneDxVexStatus {
    CDXVS_UNKNOWN = 0,
    CDXVS_UNAFFECTED = 1,
    CDXVS_AFFECTED = 2
}
export class CycloneDxVexInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        status?: CycloneDxVexStatus;
        evidence?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("evidence" in data && data.evidence != undefined) {
                this.evidence = data.evidence;
            }
        }
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 1, CycloneDxVexStatus.CDXVS_UNKNOWN) as CycloneDxVexStatus;
    }
    set status(value: CycloneDxVexStatus) {
        pb_1.Message.setField(this, 1, value);
    }
    get evidence() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set evidence(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        status?: CycloneDxVexStatus;
        evidence?: string;
    }): CycloneDxVexInfo {
        const message = new CycloneDxVexInfo({});
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.evidence != null) {
            message.evidence = data.evidence;
        }
        return message;
    }
    toObject() {
        const data: {
            status?: CycloneDxVexStatus;
            evidence?: string;
        } = {};
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.evidence != null) {
            data.evidence = this.evidence;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status != CycloneDxVexStatus.CDXVS_UNKNOWN)
            writer.writeEnum(1, this.status);
        if (this.evidence.length)
            writer.writeString(2, this.evidence);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CycloneDxVexInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CycloneDxVexInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readEnum();
                    break;
                case 2:
                    message.evidence = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CycloneDxVexInfo {
        return CycloneDxVexInfo.deserialize(bytes);
    }
}
export class RemediationEntry extends pb_1.Message {
    #one_of_decls: number[][] = [[6]];
    constructor(data?: any[] | ({
        remediationEntryId?: dependency_1.UUID;
        createdDate?: number;
        createdBy?: string;
        cdxVexInfo?: CycloneDxVexInfo;
    } & (({
        cycloneDxData?: CycloneDxRemediationData;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("remediationEntryId" in data && data.remediationEntryId != undefined) {
                this.remediationEntryId = data.remediationEntryId;
            }
            if ("createdDate" in data && data.createdDate != undefined) {
                this.createdDate = data.createdDate;
            }
            if ("createdBy" in data && data.createdBy != undefined) {
                this.createdBy = data.createdBy;
            }
            if ("cdxVexInfo" in data && data.cdxVexInfo != undefined) {
                this.cdxVexInfo = data.cdxVexInfo;
            }
            if ("cycloneDxData" in data && data.cycloneDxData != undefined) {
                this.cycloneDxData = data.cycloneDxData;
            }
        }
    }
    get remediationEntryId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 1) as dependency_1.UUID;
    }
    set remediationEntryId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasRemediationEntryId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get createdDate() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set createdDate(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get createdBy() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set createdBy(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get cdxVexInfo() {
        return pb_1.Message.getWrapperField(this, CycloneDxVexInfo, 5) as CycloneDxVexInfo;
    }
    set cdxVexInfo(value: CycloneDxVexInfo) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasCdxVexInfo() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get cycloneDxData() {
        return pb_1.Message.getWrapperField(this, CycloneDxRemediationData, 6) as CycloneDxRemediationData;
    }
    set cycloneDxData(value: CycloneDxRemediationData) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get hasCycloneDxData() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get remediationData() {
        const cases: {
            [index: number]: "none" | "cycloneDxData";
        } = {
            0: "none",
            6: "cycloneDxData"
        };
        return cases[pb_1.Message.computeOneofCase(this, [6])];
    }
    static fromObject(data: {
        remediationEntryId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        createdDate?: number;
        createdBy?: string;
        cdxVexInfo?: ReturnType<typeof CycloneDxVexInfo.prototype.toObject>;
        cycloneDxData?: ReturnType<typeof CycloneDxRemediationData.prototype.toObject>;
    }): RemediationEntry {
        const message = new RemediationEntry({});
        if (data.remediationEntryId != null) {
            message.remediationEntryId = dependency_1.UUID.fromObject(data.remediationEntryId);
        }
        if (data.createdDate != null) {
            message.createdDate = data.createdDate;
        }
        if (data.createdBy != null) {
            message.createdBy = data.createdBy;
        }
        if (data.cdxVexInfo != null) {
            message.cdxVexInfo = CycloneDxVexInfo.fromObject(data.cdxVexInfo);
        }
        if (data.cycloneDxData != null) {
            message.cycloneDxData = CycloneDxRemediationData.fromObject(data.cycloneDxData);
        }
        return message;
    }
    toObject() {
        const data: {
            remediationEntryId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            createdDate?: number;
            createdBy?: string;
            cdxVexInfo?: ReturnType<typeof CycloneDxVexInfo.prototype.toObject>;
            cycloneDxData?: ReturnType<typeof CycloneDxRemediationData.prototype.toObject>;
        } = {};
        if (this.remediationEntryId != null) {
            data.remediationEntryId = this.remediationEntryId.toObject();
        }
        if (this.createdDate != null) {
            data.createdDate = this.createdDate;
        }
        if (this.createdBy != null) {
            data.createdBy = this.createdBy;
        }
        if (this.cdxVexInfo != null) {
            data.cdxVexInfo = this.cdxVexInfo.toObject();
        }
        if (this.cycloneDxData != null) {
            data.cycloneDxData = this.cycloneDxData.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRemediationEntryId)
            writer.writeMessage(1, this.remediationEntryId, () => this.remediationEntryId.serialize(writer));
        if (this.createdDate != 0)
            writer.writeInt64(2, this.createdDate);
        if (this.createdBy.length)
            writer.writeString(3, this.createdBy);
        if (this.hasCdxVexInfo)
            writer.writeMessage(5, this.cdxVexInfo, () => this.cdxVexInfo.serialize(writer));
        if (this.hasCycloneDxData)
            writer.writeMessage(6, this.cycloneDxData, () => this.cycloneDxData.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemediationEntry {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemediationEntry();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.remediationEntryId, () => message.remediationEntryId = dependency_1.UUID.deserialize(reader));
                    break;
                case 2:
                    message.createdDate = reader.readInt64();
                    break;
                case 3:
                    message.createdBy = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.cdxVexInfo, () => message.cdxVexInfo = CycloneDxVexInfo.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.cycloneDxData, () => message.cycloneDxData = CycloneDxRemediationData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RemediationEntry {
        return RemediationEntry.deserialize(bytes);
    }
}
export class ListRemediationEntries extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: ListRemediationEntriesRequest;
        response?: never;
    } | {
        request?: never;
        response?: ListRemediationEntriesResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, ListRemediationEntriesRequest, 1) as ListRemediationEntriesRequest;
    }
    set request(value: ListRemediationEntriesRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, ListRemediationEntriesResponse, 2) as ListRemediationEntriesResponse;
    }
    set response(value: ListRemediationEntriesResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof ListRemediationEntriesRequest.prototype.toObject>;
        response?: ReturnType<typeof ListRemediationEntriesResponse.prototype.toObject>;
    }): ListRemediationEntries {
        const message = new ListRemediationEntries({});
        if (data.request != null) {
            message.request = ListRemediationEntriesRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = ListRemediationEntriesResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof ListRemediationEntriesRequest.prototype.toObject>;
            response?: ReturnType<typeof ListRemediationEntriesResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRemediationEntries {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRemediationEntries();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = ListRemediationEntriesRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = ListRemediationEntriesResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListRemediationEntries {
        return ListRemediationEntries.deserialize(bytes);
    }
}
export class ListRemediationEntriesRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
        dependencyId?: dependency_1.UUID;
        vulnerabilityAnnalId?: dependency_1.UUID;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("dependencyId" in data && data.dependencyId != undefined) {
                this.dependencyId = data.dependencyId;
            }
            if ("vulnerabilityAnnalId" in data && data.vulnerabilityAnnalId != undefined) {
                this.vulnerabilityAnnalId = data.vulnerabilityAnnalId;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get dependencyId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set dependencyId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasDependencyId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get vulnerabilityAnnalId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 3) as dependency_1.UUID;
    }
    set vulnerabilityAnnalId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasVulnerabilityAnnalId() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        dependencyId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        vulnerabilityAnnalId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
    }): ListRemediationEntriesRequest {
        const message = new ListRemediationEntriesRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.dependencyId != null) {
            message.dependencyId = dependency_1.UUID.fromObject(data.dependencyId);
        }
        if (data.vulnerabilityAnnalId != null) {
            message.vulnerabilityAnnalId = dependency_1.UUID.fromObject(data.vulnerabilityAnnalId);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            dependencyId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            vulnerabilityAnnalId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.dependencyId != null) {
            data.dependencyId = this.dependencyId.toObject();
        }
        if (this.vulnerabilityAnnalId != null) {
            data.vulnerabilityAnnalId = this.vulnerabilityAnnalId.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasDependencyId)
            writer.writeMessage(2, this.dependencyId, () => this.dependencyId.serialize(writer));
        if (this.hasVulnerabilityAnnalId)
            writer.writeMessage(3, this.vulnerabilityAnnalId, () => this.vulnerabilityAnnalId.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRemediationEntriesRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRemediationEntriesRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.dependencyId, () => message.dependencyId = dependency_1.UUID.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.vulnerabilityAnnalId, () => message.vulnerabilityAnnalId = dependency_1.UUID.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListRemediationEntriesRequest {
        return ListRemediationEntriesRequest.deserialize(bytes);
    }
}
export class ListRemediationEntriesResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        remediationEntries?: RemediationEntry[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("remediationEntries" in data && data.remediationEntries != undefined) {
                this.remediationEntries = data.remediationEntries;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get remediationEntries() {
        return pb_1.Message.getRepeatedWrapperField(this, RemediationEntry, 2) as RemediationEntry[];
    }
    set remediationEntries(value: RemediationEntry[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        remediationEntries?: ReturnType<typeof RemediationEntry.prototype.toObject>[];
    }): ListRemediationEntriesResponse {
        const message = new ListRemediationEntriesResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.remediationEntries != null) {
            message.remediationEntries = data.remediationEntries.map(item => RemediationEntry.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            remediationEntries?: ReturnType<typeof RemediationEntry.prototype.toObject>[];
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.remediationEntries != null) {
            data.remediationEntries = this.remediationEntries.map((item: RemediationEntry) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.remediationEntries.length)
            writer.writeRepeatedMessage(2, this.remediationEntries, (item: RemediationEntry) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRemediationEntriesResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRemediationEntriesResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.remediationEntries, () => pb_1.Message.addToRepeatedWrapperField(message, 2, RemediationEntry.deserialize(reader), RemediationEntry));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListRemediationEntriesResponse {
        return ListRemediationEntriesResponse.deserialize(bytes);
    }
}
export class CycloneDxRemediationData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        remediationState?: CycloneDxRemediationState;
        remediationJustification?: CycloneDxRemediationJustification;
        remediationResponse?: CycloneDxRemediationResponse[];
        detail?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("remediationState" in data && data.remediationState != undefined) {
                this.remediationState = data.remediationState;
            }
            if ("remediationJustification" in data && data.remediationJustification != undefined) {
                this.remediationJustification = data.remediationJustification;
            }
            if ("remediationResponse" in data && data.remediationResponse != undefined) {
                this.remediationResponse = data.remediationResponse;
            }
            if ("detail" in data && data.detail != undefined) {
                this.detail = data.detail;
            }
        }
    }
    get remediationState() {
        return pb_1.Message.getFieldWithDefault(this, 1, CycloneDxRemediationState.CDXRS_NOT_DEFINED) as CycloneDxRemediationState;
    }
    set remediationState(value: CycloneDxRemediationState) {
        pb_1.Message.setField(this, 1, value);
    }
    get remediationJustification() {
        return pb_1.Message.getFieldWithDefault(this, 2, CycloneDxRemediationJustification.CDXRJ_NOT_DEFINED) as CycloneDxRemediationJustification;
    }
    set remediationJustification(value: CycloneDxRemediationJustification) {
        pb_1.Message.setField(this, 2, value);
    }
    get remediationResponse() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as CycloneDxRemediationResponse[];
    }
    set remediationResponse(value: CycloneDxRemediationResponse[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get detail() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set detail(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        remediationState?: CycloneDxRemediationState;
        remediationJustification?: CycloneDxRemediationJustification;
        remediationResponse?: CycloneDxRemediationResponse[];
        detail?: string;
    }): CycloneDxRemediationData {
        const message = new CycloneDxRemediationData({});
        if (data.remediationState != null) {
            message.remediationState = data.remediationState;
        }
        if (data.remediationJustification != null) {
            message.remediationJustification = data.remediationJustification;
        }
        if (data.remediationResponse != null) {
            message.remediationResponse = data.remediationResponse;
        }
        if (data.detail != null) {
            message.detail = data.detail;
        }
        return message;
    }
    toObject() {
        const data: {
            remediationState?: CycloneDxRemediationState;
            remediationJustification?: CycloneDxRemediationJustification;
            remediationResponse?: CycloneDxRemediationResponse[];
            detail?: string;
        } = {};
        if (this.remediationState != null) {
            data.remediationState = this.remediationState;
        }
        if (this.remediationJustification != null) {
            data.remediationJustification = this.remediationJustification;
        }
        if (this.remediationResponse != null) {
            data.remediationResponse = this.remediationResponse;
        }
        if (this.detail != null) {
            data.detail = this.detail;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.remediationState != CycloneDxRemediationState.CDXRS_NOT_DEFINED)
            writer.writeEnum(1, this.remediationState);
        if (this.remediationJustification != CycloneDxRemediationJustification.CDXRJ_NOT_DEFINED)
            writer.writeEnum(2, this.remediationJustification);
        if (this.remediationResponse.length)
            writer.writePackedEnum(3, this.remediationResponse);
        if (this.detail.length)
            writer.writeString(4, this.detail);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CycloneDxRemediationData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CycloneDxRemediationData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.remediationState = reader.readEnum();
                    break;
                case 2:
                    message.remediationJustification = reader.readEnum();
                    break;
                case 3:
                    message.remediationResponse = reader.readPackedEnum();
                    break;
                case 4:
                    message.detail = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CycloneDxRemediationData {
        return CycloneDxRemediationData.deserialize(bytes);
    }
}
/** @deprecated*/
export class CreateRemediationEntry extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: CreateRemediationEntryRequest;
        response?: never;
    } | {
        request?: never;
        response?: CreateRemediationEntryResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, CreateRemediationEntryRequest, 1) as CreateRemediationEntryRequest;
    }
    set request(value: CreateRemediationEntryRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, CreateRemediationEntryResponse, 2) as CreateRemediationEntryResponse;
    }
    set response(value: CreateRemediationEntryResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof CreateRemediationEntryRequest.prototype.toObject>;
        response?: ReturnType<typeof CreateRemediationEntryResponse.prototype.toObject>;
    }): CreateRemediationEntry {
        const message = new CreateRemediationEntry({});
        if (data.request != null) {
            message.request = CreateRemediationEntryRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = CreateRemediationEntryResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof CreateRemediationEntryRequest.prototype.toObject>;
            response?: ReturnType<typeof CreateRemediationEntryResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRemediationEntry {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRemediationEntry();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = CreateRemediationEntryRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = CreateRemediationEntryResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateRemediationEntry {
        return CreateRemediationEntry.deserialize(bytes);
    }
}
export class CreateRemediationEntryRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[5]];
    constructor(data?: any[] | ({
        metadata?: dependency_1.RequestMetadata;
        dependencyId?: dependency_1.UUID;
        vulnerabilityAnnalId?: dependency_1.UUID;
        cycloneDxVexInfo?: CycloneDxVexInfo;
    } & (({
        cycloneDxData?: CycloneDxRemediationData;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("dependencyId" in data && data.dependencyId != undefined) {
                this.dependencyId = data.dependencyId;
            }
            if ("vulnerabilityAnnalId" in data && data.vulnerabilityAnnalId != undefined) {
                this.vulnerabilityAnnalId = data.vulnerabilityAnnalId;
            }
            if ("cycloneDxVexInfo" in data && data.cycloneDxVexInfo != undefined) {
                this.cycloneDxVexInfo = data.cycloneDxVexInfo;
            }
            if ("cycloneDxData" in data && data.cycloneDxData != undefined) {
                this.cycloneDxData = data.cycloneDxData;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get dependencyId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set dependencyId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasDependencyId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get vulnerabilityAnnalId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 3) as dependency_1.UUID;
    }
    set vulnerabilityAnnalId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasVulnerabilityAnnalId() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get cycloneDxVexInfo() {
        return pb_1.Message.getWrapperField(this, CycloneDxVexInfo, 4) as CycloneDxVexInfo;
    }
    set cycloneDxVexInfo(value: CycloneDxVexInfo) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasCycloneDxVexInfo() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get cycloneDxData() {
        return pb_1.Message.getWrapperField(this, CycloneDxRemediationData, 5) as CycloneDxRemediationData;
    }
    set cycloneDxData(value: CycloneDxRemediationData) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get hasCycloneDxData() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "cycloneDxData";
        } = {
            0: "none",
            5: "cycloneDxData"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        dependencyId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        vulnerabilityAnnalId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        cycloneDxVexInfo?: ReturnType<typeof CycloneDxVexInfo.prototype.toObject>;
        cycloneDxData?: ReturnType<typeof CycloneDxRemediationData.prototype.toObject>;
    }): CreateRemediationEntryRequest {
        const message = new CreateRemediationEntryRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.dependencyId != null) {
            message.dependencyId = dependency_1.UUID.fromObject(data.dependencyId);
        }
        if (data.vulnerabilityAnnalId != null) {
            message.vulnerabilityAnnalId = dependency_1.UUID.fromObject(data.vulnerabilityAnnalId);
        }
        if (data.cycloneDxVexInfo != null) {
            message.cycloneDxVexInfo = CycloneDxVexInfo.fromObject(data.cycloneDxVexInfo);
        }
        if (data.cycloneDxData != null) {
            message.cycloneDxData = CycloneDxRemediationData.fromObject(data.cycloneDxData);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            dependencyId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            vulnerabilityAnnalId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            cycloneDxVexInfo?: ReturnType<typeof CycloneDxVexInfo.prototype.toObject>;
            cycloneDxData?: ReturnType<typeof CycloneDxRemediationData.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.dependencyId != null) {
            data.dependencyId = this.dependencyId.toObject();
        }
        if (this.vulnerabilityAnnalId != null) {
            data.vulnerabilityAnnalId = this.vulnerabilityAnnalId.toObject();
        }
        if (this.cycloneDxVexInfo != null) {
            data.cycloneDxVexInfo = this.cycloneDxVexInfo.toObject();
        }
        if (this.cycloneDxData != null) {
            data.cycloneDxData = this.cycloneDxData.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasDependencyId)
            writer.writeMessage(2, this.dependencyId, () => this.dependencyId.serialize(writer));
        if (this.hasVulnerabilityAnnalId)
            writer.writeMessage(3, this.vulnerabilityAnnalId, () => this.vulnerabilityAnnalId.serialize(writer));
        if (this.hasCycloneDxVexInfo)
            writer.writeMessage(4, this.cycloneDxVexInfo, () => this.cycloneDxVexInfo.serialize(writer));
        if (this.hasCycloneDxData)
            writer.writeMessage(5, this.cycloneDxData, () => this.cycloneDxData.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRemediationEntryRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRemediationEntryRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.dependencyId, () => message.dependencyId = dependency_1.UUID.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.vulnerabilityAnnalId, () => message.vulnerabilityAnnalId = dependency_1.UUID.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.cycloneDxVexInfo, () => message.cycloneDxVexInfo = CycloneDxVexInfo.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.cycloneDxData, () => message.cycloneDxData = CycloneDxRemediationData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateRemediationEntryRequest {
        return CreateRemediationEntryRequest.deserialize(bytes);
    }
}
export class CreateRemediationEntryResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
    }): CreateRemediationEntryResponse {
        const message = new CreateRemediationEntryResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRemediationEntryResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRemediationEntryResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateRemediationEntryResponse {
        return CreateRemediationEntryResponse.deserialize(bytes);
    }
}
export class GetLatestRemediationEntry extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: GetLatestRemediationEntryRequest;
        response?: never;
    } | {
        request?: never;
        response?: GetLatestRemediationEntryResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, GetLatestRemediationEntryRequest, 1) as GetLatestRemediationEntryRequest;
    }
    set request(value: GetLatestRemediationEntryRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, GetLatestRemediationEntryResponse, 2) as GetLatestRemediationEntryResponse;
    }
    set response(value: GetLatestRemediationEntryResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof GetLatestRemediationEntryRequest.prototype.toObject>;
        response?: ReturnType<typeof GetLatestRemediationEntryResponse.prototype.toObject>;
    }): GetLatestRemediationEntry {
        const message = new GetLatestRemediationEntry({});
        if (data.request != null) {
            message.request = GetLatestRemediationEntryRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = GetLatestRemediationEntryResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof GetLatestRemediationEntryRequest.prototype.toObject>;
            response?: ReturnType<typeof GetLatestRemediationEntryResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestRemediationEntry {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestRemediationEntry();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = GetLatestRemediationEntryRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = GetLatestRemediationEntryResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetLatestRemediationEntry {
        return GetLatestRemediationEntry.deserialize(bytes);
    }
}
export class GetLatestRemediationEntryRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
        dependencyId?: dependency_1.UUID;
        vulnerabilityAnnalId?: dependency_1.UUID;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("dependencyId" in data && data.dependencyId != undefined) {
                this.dependencyId = data.dependencyId;
            }
            if ("vulnerabilityAnnalId" in data && data.vulnerabilityAnnalId != undefined) {
                this.vulnerabilityAnnalId = data.vulnerabilityAnnalId;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get dependencyId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set dependencyId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasDependencyId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get vulnerabilityAnnalId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 3) as dependency_1.UUID;
    }
    set vulnerabilityAnnalId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasVulnerabilityAnnalId() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        dependencyId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        vulnerabilityAnnalId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
    }): GetLatestRemediationEntryRequest {
        const message = new GetLatestRemediationEntryRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.dependencyId != null) {
            message.dependencyId = dependency_1.UUID.fromObject(data.dependencyId);
        }
        if (data.vulnerabilityAnnalId != null) {
            message.vulnerabilityAnnalId = dependency_1.UUID.fromObject(data.vulnerabilityAnnalId);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            dependencyId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            vulnerabilityAnnalId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.dependencyId != null) {
            data.dependencyId = this.dependencyId.toObject();
        }
        if (this.vulnerabilityAnnalId != null) {
            data.vulnerabilityAnnalId = this.vulnerabilityAnnalId.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasDependencyId)
            writer.writeMessage(2, this.dependencyId, () => this.dependencyId.serialize(writer));
        if (this.hasVulnerabilityAnnalId)
            writer.writeMessage(3, this.vulnerabilityAnnalId, () => this.vulnerabilityAnnalId.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestRemediationEntryRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestRemediationEntryRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.dependencyId, () => message.dependencyId = dependency_1.UUID.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.vulnerabilityAnnalId, () => message.vulnerabilityAnnalId = dependency_1.UUID.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetLatestRemediationEntryRequest {
        return GetLatestRemediationEntryRequest.deserialize(bytes);
    }
}
export class GetLatestRemediationEntryResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        remediationEntry?: RemediationEntry;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("remediationEntry" in data && data.remediationEntry != undefined) {
                this.remediationEntry = data.remediationEntry;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get remediationEntry() {
        return pb_1.Message.getWrapperField(this, RemediationEntry, 2) as RemediationEntry;
    }
    set remediationEntry(value: RemediationEntry) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasRemediationEntry() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        remediationEntry?: ReturnType<typeof RemediationEntry.prototype.toObject>;
    }): GetLatestRemediationEntryResponse {
        const message = new GetLatestRemediationEntryResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.remediationEntry != null) {
            message.remediationEntry = RemediationEntry.fromObject(data.remediationEntry);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            remediationEntry?: ReturnType<typeof RemediationEntry.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.remediationEntry != null) {
            data.remediationEntry = this.remediationEntry.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasRemediationEntry)
            writer.writeMessage(2, this.remediationEntry, () => this.remediationEntry.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestRemediationEntryResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestRemediationEntryResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.remediationEntry, () => message.remediationEntry = RemediationEntry.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetLatestRemediationEntryResponse {
        return GetLatestRemediationEntryResponse.deserialize(bytes);
    }
}
export class RemediationTarget extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        dependencyId?: dependency_1.UUID;
        vulnerabilityAnnalId?: dependency_1.UUID;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("dependencyId" in data && data.dependencyId != undefined) {
                this.dependencyId = data.dependencyId;
            }
            if ("vulnerabilityAnnalId" in data && data.vulnerabilityAnnalId != undefined) {
                this.vulnerabilityAnnalId = data.vulnerabilityAnnalId;
            }
        }
    }
    get dependencyId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 1) as dependency_1.UUID;
    }
    set dependencyId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasDependencyId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get vulnerabilityAnnalId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set vulnerabilityAnnalId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasVulnerabilityAnnalId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        dependencyId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        vulnerabilityAnnalId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
    }): RemediationTarget {
        const message = new RemediationTarget({});
        if (data.dependencyId != null) {
            message.dependencyId = dependency_1.UUID.fromObject(data.dependencyId);
        }
        if (data.vulnerabilityAnnalId != null) {
            message.vulnerabilityAnnalId = dependency_1.UUID.fromObject(data.vulnerabilityAnnalId);
        }
        return message;
    }
    toObject() {
        const data: {
            dependencyId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            vulnerabilityAnnalId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        } = {};
        if (this.dependencyId != null) {
            data.dependencyId = this.dependencyId.toObject();
        }
        if (this.vulnerabilityAnnalId != null) {
            data.vulnerabilityAnnalId = this.vulnerabilityAnnalId.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasDependencyId)
            writer.writeMessage(1, this.dependencyId, () => this.dependencyId.serialize(writer));
        if (this.hasVulnerabilityAnnalId)
            writer.writeMessage(2, this.vulnerabilityAnnalId, () => this.vulnerabilityAnnalId.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemediationTarget {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemediationTarget();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.dependencyId, () => message.dependencyId = dependency_1.UUID.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.vulnerabilityAnnalId, () => message.vulnerabilityAnnalId = dependency_1.UUID.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RemediationTarget {
        return RemediationTarget.deserialize(bytes);
    }
}
export class CreateRemediationEntries extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: CreateRemediationEntriesRequest;
        response?: never;
    } | {
        request?: never;
        response?: CreateRemediationEntriesResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, CreateRemediationEntriesRequest, 1) as CreateRemediationEntriesRequest;
    }
    set request(value: CreateRemediationEntriesRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, CreateRemediationEntriesResponse, 2) as CreateRemediationEntriesResponse;
    }
    set response(value: CreateRemediationEntriesResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof CreateRemediationEntriesRequest.prototype.toObject>;
        response?: ReturnType<typeof CreateRemediationEntriesResponse.prototype.toObject>;
    }): CreateRemediationEntries {
        const message = new CreateRemediationEntries({});
        if (data.request != null) {
            message.request = CreateRemediationEntriesRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = CreateRemediationEntriesResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof CreateRemediationEntriesRequest.prototype.toObject>;
            response?: ReturnType<typeof CreateRemediationEntriesResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRemediationEntries {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRemediationEntries();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = CreateRemediationEntriesRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = CreateRemediationEntriesResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateRemediationEntries {
        return CreateRemediationEntries.deserialize(bytes);
    }
}
export class CreateRemediationEntriesRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[4]];
    constructor(data?: any[] | ({
        metadata?: dependency_1.RequestMetadata;
        remediationTarget?: RemediationTarget[];
        cycloneDxVexInfo?: CycloneDxVexInfo;
    } & (({
        cycloneDxData?: CycloneDxRemediationData;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("remediationTarget" in data && data.remediationTarget != undefined) {
                this.remediationTarget = data.remediationTarget;
            }
            if ("cycloneDxVexInfo" in data && data.cycloneDxVexInfo != undefined) {
                this.cycloneDxVexInfo = data.cycloneDxVexInfo;
            }
            if ("cycloneDxData" in data && data.cycloneDxData != undefined) {
                this.cycloneDxData = data.cycloneDxData;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get remediationTarget() {
        return pb_1.Message.getRepeatedWrapperField(this, RemediationTarget, 2) as RemediationTarget[];
    }
    set remediationTarget(value: RemediationTarget[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get cycloneDxVexInfo() {
        return pb_1.Message.getWrapperField(this, CycloneDxVexInfo, 3) as CycloneDxVexInfo;
    }
    set cycloneDxVexInfo(value: CycloneDxVexInfo) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasCycloneDxVexInfo() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get cycloneDxData() {
        return pb_1.Message.getWrapperField(this, CycloneDxRemediationData, 4) as CycloneDxRemediationData;
    }
    set cycloneDxData(value: CycloneDxRemediationData) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasCycloneDxData() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "cycloneDxData";
        } = {
            0: "none",
            4: "cycloneDxData"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        remediationTarget?: ReturnType<typeof RemediationTarget.prototype.toObject>[];
        cycloneDxVexInfo?: ReturnType<typeof CycloneDxVexInfo.prototype.toObject>;
        cycloneDxData?: ReturnType<typeof CycloneDxRemediationData.prototype.toObject>;
    }): CreateRemediationEntriesRequest {
        const message = new CreateRemediationEntriesRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.remediationTarget != null) {
            message.remediationTarget = data.remediationTarget.map(item => RemediationTarget.fromObject(item));
        }
        if (data.cycloneDxVexInfo != null) {
            message.cycloneDxVexInfo = CycloneDxVexInfo.fromObject(data.cycloneDxVexInfo);
        }
        if (data.cycloneDxData != null) {
            message.cycloneDxData = CycloneDxRemediationData.fromObject(data.cycloneDxData);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            remediationTarget?: ReturnType<typeof RemediationTarget.prototype.toObject>[];
            cycloneDxVexInfo?: ReturnType<typeof CycloneDxVexInfo.prototype.toObject>;
            cycloneDxData?: ReturnType<typeof CycloneDxRemediationData.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.remediationTarget != null) {
            data.remediationTarget = this.remediationTarget.map((item: RemediationTarget) => item.toObject());
        }
        if (this.cycloneDxVexInfo != null) {
            data.cycloneDxVexInfo = this.cycloneDxVexInfo.toObject();
        }
        if (this.cycloneDxData != null) {
            data.cycloneDxData = this.cycloneDxData.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.remediationTarget.length)
            writer.writeRepeatedMessage(2, this.remediationTarget, (item: RemediationTarget) => item.serialize(writer));
        if (this.hasCycloneDxVexInfo)
            writer.writeMessage(3, this.cycloneDxVexInfo, () => this.cycloneDxVexInfo.serialize(writer));
        if (this.hasCycloneDxData)
            writer.writeMessage(4, this.cycloneDxData, () => this.cycloneDxData.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRemediationEntriesRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRemediationEntriesRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.remediationTarget, () => pb_1.Message.addToRepeatedWrapperField(message, 2, RemediationTarget.deserialize(reader), RemediationTarget));
                    break;
                case 3:
                    reader.readMessage(message.cycloneDxVexInfo, () => message.cycloneDxVexInfo = CycloneDxVexInfo.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.cycloneDxData, () => message.cycloneDxData = CycloneDxRemediationData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateRemediationEntriesRequest {
        return CreateRemediationEntriesRequest.deserialize(bytes);
    }
}
export class CreateRemediationEntriesResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        remediationCreatedInfo?: RemediationCreatedInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("remediationCreatedInfo" in data && data.remediationCreatedInfo != undefined) {
                this.remediationCreatedInfo = data.remediationCreatedInfo;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get remediationCreatedInfo() {
        return pb_1.Message.getRepeatedWrapperField(this, RemediationCreatedInfo, 2) as RemediationCreatedInfo[];
    }
    set remediationCreatedInfo(value: RemediationCreatedInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        remediationCreatedInfo?: ReturnType<typeof RemediationCreatedInfo.prototype.toObject>[];
    }): CreateRemediationEntriesResponse {
        const message = new CreateRemediationEntriesResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.remediationCreatedInfo != null) {
            message.remediationCreatedInfo = data.remediationCreatedInfo.map(item => RemediationCreatedInfo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            remediationCreatedInfo?: ReturnType<typeof RemediationCreatedInfo.prototype.toObject>[];
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.remediationCreatedInfo != null) {
            data.remediationCreatedInfo = this.remediationCreatedInfo.map((item: RemediationCreatedInfo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.remediationCreatedInfo.length)
            writer.writeRepeatedMessage(2, this.remediationCreatedInfo, (item: RemediationCreatedInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRemediationEntriesResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRemediationEntriesResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.remediationCreatedInfo, () => pb_1.Message.addToRepeatedWrapperField(message, 2, RemediationCreatedInfo.deserialize(reader), RemediationCreatedInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateRemediationEntriesResponse {
        return CreateRemediationEntriesResponse.deserialize(bytes);
    }
}
export class RemediationCreatedInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        remediationTarget?: RemediationTarget;
        remediationId?: dependency_1.UUID;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("remediationTarget" in data && data.remediationTarget != undefined) {
                this.remediationTarget = data.remediationTarget;
            }
            if ("remediationId" in data && data.remediationId != undefined) {
                this.remediationId = data.remediationId;
            }
        }
    }
    get remediationTarget() {
        return pb_1.Message.getWrapperField(this, RemediationTarget, 1) as RemediationTarget;
    }
    set remediationTarget(value: RemediationTarget) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasRemediationTarget() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get remediationId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set remediationId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasRemediationId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        remediationTarget?: ReturnType<typeof RemediationTarget.prototype.toObject>;
        remediationId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
    }): RemediationCreatedInfo {
        const message = new RemediationCreatedInfo({});
        if (data.remediationTarget != null) {
            message.remediationTarget = RemediationTarget.fromObject(data.remediationTarget);
        }
        if (data.remediationId != null) {
            message.remediationId = dependency_1.UUID.fromObject(data.remediationId);
        }
        return message;
    }
    toObject() {
        const data: {
            remediationTarget?: ReturnType<typeof RemediationTarget.prototype.toObject>;
            remediationId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        } = {};
        if (this.remediationTarget != null) {
            data.remediationTarget = this.remediationTarget.toObject();
        }
        if (this.remediationId != null) {
            data.remediationId = this.remediationId.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRemediationTarget)
            writer.writeMessage(1, this.remediationTarget, () => this.remediationTarget.serialize(writer));
        if (this.hasRemediationId)
            writer.writeMessage(2, this.remediationId, () => this.remediationId.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemediationCreatedInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemediationCreatedInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.remediationTarget, () => message.remediationTarget = RemediationTarget.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.remediationId, () => message.remediationId = dependency_1.UUID.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RemediationCreatedInfo {
        return RemediationCreatedInfo.deserialize(bytes);
    }
}
export class ListRemediationEntriesForProductVersion extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: ListRemediationEntriesForProductVersionRequest;
        response?: never;
    } | {
        request?: never;
        response?: ListRemediationEntriesForProductVersionResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, ListRemediationEntriesForProductVersionRequest, 1) as ListRemediationEntriesForProductVersionRequest;
    }
    set request(value: ListRemediationEntriesForProductVersionRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, ListRemediationEntriesForProductVersionResponse, 2) as ListRemediationEntriesForProductVersionResponse;
    }
    set response(value: ListRemediationEntriesForProductVersionResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof ListRemediationEntriesForProductVersionRequest.prototype.toObject>;
        response?: ReturnType<typeof ListRemediationEntriesForProductVersionResponse.prototype.toObject>;
    }): ListRemediationEntriesForProductVersion {
        const message = new ListRemediationEntriesForProductVersion({});
        if (data.request != null) {
            message.request = ListRemediationEntriesForProductVersionRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = ListRemediationEntriesForProductVersionResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof ListRemediationEntriesForProductVersionRequest.prototype.toObject>;
            response?: ReturnType<typeof ListRemediationEntriesForProductVersionResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRemediationEntriesForProductVersion {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRemediationEntriesForProductVersion();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = ListRemediationEntriesForProductVersionRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = ListRemediationEntriesForProductVersionResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListRemediationEntriesForProductVersion {
        return ListRemediationEntriesForProductVersion.deserialize(bytes);
    }
}
export class ListRemediationEntriesForProductVersionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
        productVersionIdFrom?: dependency_1.UUID;
        productVersionIdTo?: dependency_1.UUID;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("productVersionIdFrom" in data && data.productVersionIdFrom != undefined) {
                this.productVersionIdFrom = data.productVersionIdFrom;
            }
            if ("productVersionIdTo" in data && data.productVersionIdTo != undefined) {
                this.productVersionIdTo = data.productVersionIdTo;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get productVersionIdFrom() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set productVersionIdFrom(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasProductVersionIdFrom() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get productVersionIdTo() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 3) as dependency_1.UUID;
    }
    set productVersionIdTo(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasProductVersionIdTo() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        productVersionIdFrom?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        productVersionIdTo?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
    }): ListRemediationEntriesForProductVersionRequest {
        const message = new ListRemediationEntriesForProductVersionRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.productVersionIdFrom != null) {
            message.productVersionIdFrom = dependency_1.UUID.fromObject(data.productVersionIdFrom);
        }
        if (data.productVersionIdTo != null) {
            message.productVersionIdTo = dependency_1.UUID.fromObject(data.productVersionIdTo);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            productVersionIdFrom?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            productVersionIdTo?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.productVersionIdFrom != null) {
            data.productVersionIdFrom = this.productVersionIdFrom.toObject();
        }
        if (this.productVersionIdTo != null) {
            data.productVersionIdTo = this.productVersionIdTo.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasProductVersionIdFrom)
            writer.writeMessage(2, this.productVersionIdFrom, () => this.productVersionIdFrom.serialize(writer));
        if (this.hasProductVersionIdTo)
            writer.writeMessage(3, this.productVersionIdTo, () => this.productVersionIdTo.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRemediationEntriesForProductVersionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRemediationEntriesForProductVersionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.productVersionIdFrom, () => message.productVersionIdFrom = dependency_1.UUID.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.productVersionIdTo, () => message.productVersionIdTo = dependency_1.UUID.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListRemediationEntriesForProductVersionRequest {
        return ListRemediationEntriesForProductVersionRequest.deserialize(bytes);
    }
}
export class ListRemediationEntriesForProductVersionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        remediationEntries?: LatestRemediationEntry[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("remediationEntries" in data && data.remediationEntries != undefined) {
                this.remediationEntries = data.remediationEntries;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get remediationEntries() {
        return pb_1.Message.getRepeatedWrapperField(this, LatestRemediationEntry, 2) as LatestRemediationEntry[];
    }
    set remediationEntries(value: LatestRemediationEntry[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        remediationEntries?: ReturnType<typeof LatestRemediationEntry.prototype.toObject>[];
    }): ListRemediationEntriesForProductVersionResponse {
        const message = new ListRemediationEntriesForProductVersionResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.remediationEntries != null) {
            message.remediationEntries = data.remediationEntries.map(item => LatestRemediationEntry.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            remediationEntries?: ReturnType<typeof LatestRemediationEntry.prototype.toObject>[];
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.remediationEntries != null) {
            data.remediationEntries = this.remediationEntries.map((item: LatestRemediationEntry) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.remediationEntries.length)
            writer.writeRepeatedMessage(2, this.remediationEntries, (item: LatestRemediationEntry) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRemediationEntriesForProductVersionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRemediationEntriesForProductVersionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.remediationEntries, () => pb_1.Message.addToRepeatedWrapperField(message, 2, LatestRemediationEntry.deserialize(reader), LatestRemediationEntry));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListRemediationEntriesForProductVersionResponse {
        return ListRemediationEntriesForProductVersionResponse.deserialize(bytes);
    }
}
export class LatestRemediationEntry extends pb_1.Message {
    #one_of_decls: number[][] = [[7]];
    constructor(data?: any[] | ({
        latestRemediationEntryId?: dependency_1.UUID;
        dependencyIdTo?: dependency_1.UUID;
        vulnerabilityAnnalIdTo?: dependency_1.UUID;
        cveUuid?: dependency_1.UUID;
        cveIdentifier?: string;
        cdxVexInfo?: CycloneDxVexInfo;
        createdDate?: number;
        createdBy?: string;
        depName?: string;
        depSupplier?: string;
        depVersionFrom?: string;
        depVersionTo?: string;
    } & (({
        cycloneDxData?: CycloneDxRemediationData;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("latestRemediationEntryId" in data && data.latestRemediationEntryId != undefined) {
                this.latestRemediationEntryId = data.latestRemediationEntryId;
            }
            if ("dependencyIdTo" in data && data.dependencyIdTo != undefined) {
                this.dependencyIdTo = data.dependencyIdTo;
            }
            if ("vulnerabilityAnnalIdTo" in data && data.vulnerabilityAnnalIdTo != undefined) {
                this.vulnerabilityAnnalIdTo = data.vulnerabilityAnnalIdTo;
            }
            if ("cveUuid" in data && data.cveUuid != undefined) {
                this.cveUuid = data.cveUuid;
            }
            if ("cveIdentifier" in data && data.cveIdentifier != undefined) {
                this.cveIdentifier = data.cveIdentifier;
            }
            if ("cdxVexInfo" in data && data.cdxVexInfo != undefined) {
                this.cdxVexInfo = data.cdxVexInfo;
            }
            if ("cycloneDxData" in data && data.cycloneDxData != undefined) {
                this.cycloneDxData = data.cycloneDxData;
            }
            if ("createdDate" in data && data.createdDate != undefined) {
                this.createdDate = data.createdDate;
            }
            if ("createdBy" in data && data.createdBy != undefined) {
                this.createdBy = data.createdBy;
            }
            if ("depName" in data && data.depName != undefined) {
                this.depName = data.depName;
            }
            if ("depSupplier" in data && data.depSupplier != undefined) {
                this.depSupplier = data.depSupplier;
            }
            if ("depVersionFrom" in data && data.depVersionFrom != undefined) {
                this.depVersionFrom = data.depVersionFrom;
            }
            if ("depVersionTo" in data && data.depVersionTo != undefined) {
                this.depVersionTo = data.depVersionTo;
            }
        }
    }
    get latestRemediationEntryId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 1) as dependency_1.UUID;
    }
    set latestRemediationEntryId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasLatestRemediationEntryId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get dependencyIdTo() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set dependencyIdTo(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasDependencyIdTo() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get vulnerabilityAnnalIdTo() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 3) as dependency_1.UUID;
    }
    set vulnerabilityAnnalIdTo(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasVulnerabilityAnnalIdTo() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get cveUuid() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 4) as dependency_1.UUID;
    }
    set cveUuid(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasCveUuid() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get cveIdentifier() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set cveIdentifier(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get cdxVexInfo() {
        return pb_1.Message.getWrapperField(this, CycloneDxVexInfo, 6) as CycloneDxVexInfo;
    }
    set cdxVexInfo(value: CycloneDxVexInfo) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasCdxVexInfo() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get cycloneDxData() {
        return pb_1.Message.getWrapperField(this, CycloneDxRemediationData, 7) as CycloneDxRemediationData;
    }
    set cycloneDxData(value: CycloneDxRemediationData) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
    }
    get hasCycloneDxData() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get createdDate() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set createdDate(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get createdBy() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set createdBy(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get depName() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set depName(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get depSupplier() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set depSupplier(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get depVersionFrom() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set depVersionFrom(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get depVersionTo() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set depVersionTo(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get remediationData() {
        const cases: {
            [index: number]: "none" | "cycloneDxData";
        } = {
            0: "none",
            7: "cycloneDxData"
        };
        return cases[pb_1.Message.computeOneofCase(this, [7])];
    }
    static fromObject(data: {
        latestRemediationEntryId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        dependencyIdTo?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        vulnerabilityAnnalIdTo?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        cveUuid?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        cveIdentifier?: string;
        cdxVexInfo?: ReturnType<typeof CycloneDxVexInfo.prototype.toObject>;
        cycloneDxData?: ReturnType<typeof CycloneDxRemediationData.prototype.toObject>;
        createdDate?: number;
        createdBy?: string;
        depName?: string;
        depSupplier?: string;
        depVersionFrom?: string;
        depVersionTo?: string;
    }): LatestRemediationEntry {
        const message = new LatestRemediationEntry({});
        if (data.latestRemediationEntryId != null) {
            message.latestRemediationEntryId = dependency_1.UUID.fromObject(data.latestRemediationEntryId);
        }
        if (data.dependencyIdTo != null) {
            message.dependencyIdTo = dependency_1.UUID.fromObject(data.dependencyIdTo);
        }
        if (data.vulnerabilityAnnalIdTo != null) {
            message.vulnerabilityAnnalIdTo = dependency_1.UUID.fromObject(data.vulnerabilityAnnalIdTo);
        }
        if (data.cveUuid != null) {
            message.cveUuid = dependency_1.UUID.fromObject(data.cveUuid);
        }
        if (data.cveIdentifier != null) {
            message.cveIdentifier = data.cveIdentifier;
        }
        if (data.cdxVexInfo != null) {
            message.cdxVexInfo = CycloneDxVexInfo.fromObject(data.cdxVexInfo);
        }
        if (data.cycloneDxData != null) {
            message.cycloneDxData = CycloneDxRemediationData.fromObject(data.cycloneDxData);
        }
        if (data.createdDate != null) {
            message.createdDate = data.createdDate;
        }
        if (data.createdBy != null) {
            message.createdBy = data.createdBy;
        }
        if (data.depName != null) {
            message.depName = data.depName;
        }
        if (data.depSupplier != null) {
            message.depSupplier = data.depSupplier;
        }
        if (data.depVersionFrom != null) {
            message.depVersionFrom = data.depVersionFrom;
        }
        if (data.depVersionTo != null) {
            message.depVersionTo = data.depVersionTo;
        }
        return message;
    }
    toObject() {
        const data: {
            latestRemediationEntryId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            dependencyIdTo?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            vulnerabilityAnnalIdTo?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            cveUuid?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            cveIdentifier?: string;
            cdxVexInfo?: ReturnType<typeof CycloneDxVexInfo.prototype.toObject>;
            cycloneDxData?: ReturnType<typeof CycloneDxRemediationData.prototype.toObject>;
            createdDate?: number;
            createdBy?: string;
            depName?: string;
            depSupplier?: string;
            depVersionFrom?: string;
            depVersionTo?: string;
        } = {};
        if (this.latestRemediationEntryId != null) {
            data.latestRemediationEntryId = this.latestRemediationEntryId.toObject();
        }
        if (this.dependencyIdTo != null) {
            data.dependencyIdTo = this.dependencyIdTo.toObject();
        }
        if (this.vulnerabilityAnnalIdTo != null) {
            data.vulnerabilityAnnalIdTo = this.vulnerabilityAnnalIdTo.toObject();
        }
        if (this.cveUuid != null) {
            data.cveUuid = this.cveUuid.toObject();
        }
        if (this.cveIdentifier != null) {
            data.cveIdentifier = this.cveIdentifier;
        }
        if (this.cdxVexInfo != null) {
            data.cdxVexInfo = this.cdxVexInfo.toObject();
        }
        if (this.cycloneDxData != null) {
            data.cycloneDxData = this.cycloneDxData.toObject();
        }
        if (this.createdDate != null) {
            data.createdDate = this.createdDate;
        }
        if (this.createdBy != null) {
            data.createdBy = this.createdBy;
        }
        if (this.depName != null) {
            data.depName = this.depName;
        }
        if (this.depSupplier != null) {
            data.depSupplier = this.depSupplier;
        }
        if (this.depVersionFrom != null) {
            data.depVersionFrom = this.depVersionFrom;
        }
        if (this.depVersionTo != null) {
            data.depVersionTo = this.depVersionTo;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasLatestRemediationEntryId)
            writer.writeMessage(1, this.latestRemediationEntryId, () => this.latestRemediationEntryId.serialize(writer));
        if (this.hasDependencyIdTo)
            writer.writeMessage(2, this.dependencyIdTo, () => this.dependencyIdTo.serialize(writer));
        if (this.hasVulnerabilityAnnalIdTo)
            writer.writeMessage(3, this.vulnerabilityAnnalIdTo, () => this.vulnerabilityAnnalIdTo.serialize(writer));
        if (this.hasCveUuid)
            writer.writeMessage(4, this.cveUuid, () => this.cveUuid.serialize(writer));
        if (this.cveIdentifier.length)
            writer.writeString(5, this.cveIdentifier);
        if (this.hasCdxVexInfo)
            writer.writeMessage(6, this.cdxVexInfo, () => this.cdxVexInfo.serialize(writer));
        if (this.hasCycloneDxData)
            writer.writeMessage(7, this.cycloneDxData, () => this.cycloneDxData.serialize(writer));
        if (this.createdDate != 0)
            writer.writeInt64(8, this.createdDate);
        if (this.createdBy.length)
            writer.writeString(9, this.createdBy);
        if (this.depName.length)
            writer.writeString(10, this.depName);
        if (this.depSupplier.length)
            writer.writeString(11, this.depSupplier);
        if (this.depVersionFrom.length)
            writer.writeString(12, this.depVersionFrom);
        if (this.depVersionTo.length)
            writer.writeString(13, this.depVersionTo);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LatestRemediationEntry {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LatestRemediationEntry();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.latestRemediationEntryId, () => message.latestRemediationEntryId = dependency_1.UUID.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.dependencyIdTo, () => message.dependencyIdTo = dependency_1.UUID.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.vulnerabilityAnnalIdTo, () => message.vulnerabilityAnnalIdTo = dependency_1.UUID.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.cveUuid, () => message.cveUuid = dependency_1.UUID.deserialize(reader));
                    break;
                case 5:
                    message.cveIdentifier = reader.readString();
                    break;
                case 6:
                    reader.readMessage(message.cdxVexInfo, () => message.cdxVexInfo = CycloneDxVexInfo.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.cycloneDxData, () => message.cycloneDxData = CycloneDxRemediationData.deserialize(reader));
                    break;
                case 8:
                    message.createdDate = reader.readInt64();
                    break;
                case 9:
                    message.createdBy = reader.readString();
                    break;
                case 10:
                    message.depName = reader.readString();
                    break;
                case 11:
                    message.depSupplier = reader.readString();
                    break;
                case 12:
                    message.depVersionFrom = reader.readString();
                    break;
                case 13:
                    message.depVersionTo = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LatestRemediationEntry {
        return LatestRemediationEntry.deserialize(bytes);
    }
}
export class CopyRemediationEntries extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: CopyRemediationEntriesRequest;
        response?: never;
    } | {
        request?: never;
        response?: CopyRemediationEntriesResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, CopyRemediationEntriesRequest, 1) as CopyRemediationEntriesRequest;
    }
    set request(value: CopyRemediationEntriesRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, CopyRemediationEntriesResponse, 2) as CopyRemediationEntriesResponse;
    }
    set response(value: CopyRemediationEntriesResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof CopyRemediationEntriesRequest.prototype.toObject>;
        response?: ReturnType<typeof CopyRemediationEntriesResponse.prototype.toObject>;
    }): CopyRemediationEntries {
        const message = new CopyRemediationEntries({});
        if (data.request != null) {
            message.request = CopyRemediationEntriesRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = CopyRemediationEntriesResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof CopyRemediationEntriesRequest.prototype.toObject>;
            response?: ReturnType<typeof CopyRemediationEntriesResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CopyRemediationEntries {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CopyRemediationEntries();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = CopyRemediationEntriesRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = CopyRemediationEntriesResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CopyRemediationEntries {
        return CopyRemediationEntries.deserialize(bytes);
    }
}
export class CopyRemediationEntriesRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
        copyRemediationEntry?: CopyRemediationEntry[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("copyRemediationEntry" in data && data.copyRemediationEntry != undefined) {
                this.copyRemediationEntry = data.copyRemediationEntry;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get copyRemediationEntry() {
        return pb_1.Message.getRepeatedWrapperField(this, CopyRemediationEntry, 2) as CopyRemediationEntry[];
    }
    set copyRemediationEntry(value: CopyRemediationEntry[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        copyRemediationEntry?: ReturnType<typeof CopyRemediationEntry.prototype.toObject>[];
    }): CopyRemediationEntriesRequest {
        const message = new CopyRemediationEntriesRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.copyRemediationEntry != null) {
            message.copyRemediationEntry = data.copyRemediationEntry.map(item => CopyRemediationEntry.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            copyRemediationEntry?: ReturnType<typeof CopyRemediationEntry.prototype.toObject>[];
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.copyRemediationEntry != null) {
            data.copyRemediationEntry = this.copyRemediationEntry.map((item: CopyRemediationEntry) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.copyRemediationEntry.length)
            writer.writeRepeatedMessage(2, this.copyRemediationEntry, (item: CopyRemediationEntry) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CopyRemediationEntriesRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CopyRemediationEntriesRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.copyRemediationEntry, () => pb_1.Message.addToRepeatedWrapperField(message, 2, CopyRemediationEntry.deserialize(reader), CopyRemediationEntry));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CopyRemediationEntriesRequest {
        return CopyRemediationEntriesRequest.deserialize(bytes);
    }
}
export class CopyRemediationEntriesResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        remediationCreatedInfo?: RemediationCreatedInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("remediationCreatedInfo" in data && data.remediationCreatedInfo != undefined) {
                this.remediationCreatedInfo = data.remediationCreatedInfo;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get remediationCreatedInfo() {
        return pb_1.Message.getRepeatedWrapperField(this, RemediationCreatedInfo, 2) as RemediationCreatedInfo[];
    }
    set remediationCreatedInfo(value: RemediationCreatedInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        remediationCreatedInfo?: ReturnType<typeof RemediationCreatedInfo.prototype.toObject>[];
    }): CopyRemediationEntriesResponse {
        const message = new CopyRemediationEntriesResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.remediationCreatedInfo != null) {
            message.remediationCreatedInfo = data.remediationCreatedInfo.map(item => RemediationCreatedInfo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            remediationCreatedInfo?: ReturnType<typeof RemediationCreatedInfo.prototype.toObject>[];
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.remediationCreatedInfo != null) {
            data.remediationCreatedInfo = this.remediationCreatedInfo.map((item: RemediationCreatedInfo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.remediationCreatedInfo.length)
            writer.writeRepeatedMessage(2, this.remediationCreatedInfo, (item: RemediationCreatedInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CopyRemediationEntriesResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CopyRemediationEntriesResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.remediationCreatedInfo, () => pb_1.Message.addToRepeatedWrapperField(message, 2, RemediationCreatedInfo.deserialize(reader), RemediationCreatedInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CopyRemediationEntriesResponse {
        return CopyRemediationEntriesResponse.deserialize(bytes);
    }
}
export class CopyRemediationEntry extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        remediationTarget?: RemediationTarget;
        remediationEntryId?: dependency_1.UUID;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("remediationTarget" in data && data.remediationTarget != undefined) {
                this.remediationTarget = data.remediationTarget;
            }
            if ("remediationEntryId" in data && data.remediationEntryId != undefined) {
                this.remediationEntryId = data.remediationEntryId;
            }
        }
    }
    get remediationTarget() {
        return pb_1.Message.getWrapperField(this, RemediationTarget, 1) as RemediationTarget;
    }
    set remediationTarget(value: RemediationTarget) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasRemediationTarget() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get remediationEntryId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set remediationEntryId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasRemediationEntryId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        remediationTarget?: ReturnType<typeof RemediationTarget.prototype.toObject>;
        remediationEntryId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
    }): CopyRemediationEntry {
        const message = new CopyRemediationEntry({});
        if (data.remediationTarget != null) {
            message.remediationTarget = RemediationTarget.fromObject(data.remediationTarget);
        }
        if (data.remediationEntryId != null) {
            message.remediationEntryId = dependency_1.UUID.fromObject(data.remediationEntryId);
        }
        return message;
    }
    toObject() {
        const data: {
            remediationTarget?: ReturnType<typeof RemediationTarget.prototype.toObject>;
            remediationEntryId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        } = {};
        if (this.remediationTarget != null) {
            data.remediationTarget = this.remediationTarget.toObject();
        }
        if (this.remediationEntryId != null) {
            data.remediationEntryId = this.remediationEntryId.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRemediationTarget)
            writer.writeMessage(1, this.remediationTarget, () => this.remediationTarget.serialize(writer));
        if (this.hasRemediationEntryId)
            writer.writeMessage(2, this.remediationEntryId, () => this.remediationEntryId.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CopyRemediationEntry {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CopyRemediationEntry();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.remediationTarget, () => message.remediationTarget = RemediationTarget.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.remediationEntryId, () => message.remediationEntryId = dependency_1.UUID.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CopyRemediationEntry {
        return CopyRemediationEntry.deserialize(bytes);
    }
}
