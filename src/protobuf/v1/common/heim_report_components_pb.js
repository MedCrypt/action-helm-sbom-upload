/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var heim_common_pb = require('../../heim_common_pb.js');
var v1_common_heim_enums_pb = require('../../v1/common/heim_enums_pb.js');
goog.exportSymbol('proto.medcrypt.helm.web.reports.GetReportFileRequest', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.reports.GetReportRequestStateRequest', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.reports.GetReportRequestStateResponse', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.reports.RequestReportDataFda', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.reports.RequestReportRequest', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.reports.RequestReportResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.reports.RequestReportDataFda = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.reports.RequestReportDataFda, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.reports.RequestReportDataFda.displayName = 'proto.medcrypt.helm.web.reports.RequestReportDataFda';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.reports.RequestReportDataFda.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.reports.RequestReportDataFda.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.reports.RequestReportDataFda} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.RequestReportDataFda.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizationProductVersionId: (f = msg.getOrganizationProductVersionId()) && heim_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.reports.RequestReportDataFda}
 */
proto.medcrypt.helm.web.reports.RequestReportDataFda.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.reports.RequestReportDataFda;
  return proto.medcrypt.helm.web.reports.RequestReportDataFda.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.reports.RequestReportDataFda} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.reports.RequestReportDataFda}
 */
proto.medcrypt.helm.web.reports.RequestReportDataFda.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setOrganizationProductVersionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.reports.RequestReportDataFda.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.reports.RequestReportDataFda.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.reports.RequestReportDataFda} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.RequestReportDataFda.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganizationProductVersionId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.UUID organization_product_version_id = 1;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.reports.RequestReportDataFda.prototype.getOrganizationProductVersionId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.reports.RequestReportDataFda.prototype.setOrganizationProductVersionId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.reports.RequestReportDataFda.prototype.clearOrganizationProductVersionId = function() {
  this.setOrganizationProductVersionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.reports.RequestReportDataFda.prototype.hasOrganizationProductVersionId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.displayName = 'proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizationProductVersionId: (f = msg.getOrganizationProductVersionId()) && heim_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex}
 */
proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex;
  return proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex}
 */
proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setOrganizationProductVersionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganizationProductVersionId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.UUID organization_product_version_id = 1;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.prototype.getOrganizationProductVersionId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.prototype.setOrganizationProductVersionId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.prototype.clearOrganizationProductVersionId = function() {
  this.setOrganizationProductVersionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.prototype.hasOrganizationProductVersionId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.reports.RequestReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.web.reports.RequestReportRequest.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.web.reports.RequestReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.reports.RequestReportRequest.displayName = 'proto.medcrypt.helm.web.reports.RequestReportRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.ReportdataCase = {
  REPORTDATA_NOT_SET: 0,
  REPORT_REQUEST_DATA_FDA: 2,
  REPORT_REQUEST_DATA_CYCLONE_DX_VEX: 3
};

/**
 * @return {proto.medcrypt.helm.web.reports.RequestReportRequest.ReportdataCase}
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.getReportdataCase = function() {
  return /** @type {proto.medcrypt.helm.web.reports.RequestReportRequest.ReportdataCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.web.reports.RequestReportRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.reports.RequestReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.reports.RequestReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    reportRequestDataFda: (f = msg.getReportRequestDataFda()) && proto.medcrypt.helm.web.reports.RequestReportDataFda.toObject(includeInstance, f),
    reportRequestDataCycloneDxVex: (f = msg.getReportRequestDataCycloneDxVex()) && proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.reports.RequestReportRequest}
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.reports.RequestReportRequest;
  return proto.medcrypt.helm.web.reports.RequestReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.reports.RequestReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.reports.RequestReportRequest}
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.reports.RequestReportDataFda;
      reader.readMessage(value,proto.medcrypt.helm.web.reports.RequestReportDataFda.deserializeBinaryFromReader);
      msg.setReportRequestDataFda(value);
      break;
    case 3:
      var value = new proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex;
      reader.readMessage(value,proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.deserializeBinaryFromReader);
      msg.setReportRequestDataCycloneDxVex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.reports.RequestReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.reports.RequestReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getReportRequestDataFda();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.web.reports.RequestReportDataFda.serializeBinaryToWriter
    );
  }
  f = message.getReportRequestDataCycloneDxVex();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RequestReportDataFda report_request_data_fda = 2;
 * @return {?proto.medcrypt.helm.web.reports.RequestReportDataFda}
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.getReportRequestDataFda = function() {
  return /** @type{?proto.medcrypt.helm.web.reports.RequestReportDataFda} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.reports.RequestReportDataFda, 2));
};


/** @param {?proto.medcrypt.helm.web.reports.RequestReportDataFda|undefined} value */
proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.setReportRequestDataFda = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.web.reports.RequestReportRequest.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.clearReportRequestDataFda = function() {
  this.setReportRequestDataFda(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.hasReportRequestDataFda = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestReportDataCycloneDxVex report_request_data_cyclone_dx_vex = 3;
 * @return {?proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex}
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.getReportRequestDataCycloneDxVex = function() {
  return /** @type{?proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex, 3));
};


/** @param {?proto.medcrypt.helm.web.reports.RequestReportDataCycloneDxVex|undefined} value */
proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.setReportRequestDataCycloneDxVex = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.medcrypt.helm.web.reports.RequestReportRequest.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.clearReportRequestDataCycloneDxVex = function() {
  this.setReportRequestDataCycloneDxVex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.reports.RequestReportRequest.prototype.hasReportRequestDataCycloneDxVex = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.reports.RequestReportResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.reports.RequestReportResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.reports.RequestReportResponse.displayName = 'proto.medcrypt.helm.web.reports.RequestReportResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.reports.RequestReportResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.reports.RequestReportResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.reports.RequestReportResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.RequestReportResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    reportRequestId: (f = msg.getReportRequestId()) && heim_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.reports.RequestReportResponse}
 */
proto.medcrypt.helm.web.reports.RequestReportResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.reports.RequestReportResponse;
  return proto.medcrypt.helm.web.reports.RequestReportResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.reports.RequestReportResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.reports.RequestReportResponse}
 */
proto.medcrypt.helm.web.reports.RequestReportResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setReportRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.reports.RequestReportResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.reports.RequestReportResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.reports.RequestReportResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.RequestReportResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getReportRequestId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.web.reports.RequestReportResponse.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.web.reports.RequestReportResponse.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.reports.RequestReportResponse.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.reports.RequestReportResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID report_request_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.reports.RequestReportResponse.prototype.getReportRequestId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.reports.RequestReportResponse.prototype.setReportRequestId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.web.reports.RequestReportResponse.prototype.clearReportRequestId = function() {
  this.setReportRequestId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.reports.RequestReportResponse.prototype.hasReportRequestId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.reports.GetReportRequestStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.displayName = 'proto.medcrypt.helm.web.reports.GetReportRequestStateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.reports.GetReportRequestStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    reportRequestId: (f = msg.getReportRequestId()) && heim_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.reports.GetReportRequestStateRequest}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.reports.GetReportRequestStateRequest;
  return proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.reports.GetReportRequestStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.reports.GetReportRequestStateRequest}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setReportRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.reports.GetReportRequestStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getReportRequestId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID report_request_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.prototype.getReportRequestId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.prototype.setReportRequestId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.prototype.clearReportRequestId = function() {
  this.setReportRequestId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateRequest.prototype.hasReportRequestId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.reports.GetReportRequestStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.displayName = 'proto.medcrypt.helm.web.reports.GetReportRequestStateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.reports.GetReportRequestStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    reportRequestState: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userMessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.reports.GetReportRequestStateResponse}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.reports.GetReportRequestStateResponse;
  return proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.reports.GetReportRequestStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.reports.GetReportRequestStateResponse}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {!proto.medcrypt.helm.web.enums.ReportRequestState} */ (reader.readEnum());
      msg.setReportRequestState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.reports.GetReportRequestStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getReportRequestState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getUserMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.helm.web.enums.ReportRequestState report_request_state = 2;
 * @return {!proto.medcrypt.helm.web.enums.ReportRequestState}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.prototype.getReportRequestState = function() {
  return /** @type {!proto.medcrypt.helm.web.enums.ReportRequestState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.medcrypt.helm.web.enums.ReportRequestState} value */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.prototype.setReportRequestState = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string user_message = 3;
 * @return {string}
 */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.prototype.getUserMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.medcrypt.helm.web.reports.GetReportRequestStateResponse.prototype.setUserMessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.reports.GetReportFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.reports.GetReportFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.reports.GetReportFileRequest.displayName = 'proto.medcrypt.helm.web.reports.GetReportFileRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.reports.GetReportFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.reports.GetReportFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.reports.GetReportFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.GetReportFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    reportRequestId: (f = msg.getReportRequestId()) && heim_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.reports.GetReportFileRequest}
 */
proto.medcrypt.helm.web.reports.GetReportFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.reports.GetReportFileRequest;
  return proto.medcrypt.helm.web.reports.GetReportFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.reports.GetReportFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.reports.GetReportFileRequest}
 */
proto.medcrypt.helm.web.reports.GetReportFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setReportRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.reports.GetReportFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.reports.GetReportFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.reports.GetReportFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.reports.GetReportFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getReportRequestId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.web.reports.GetReportFileRequest.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.web.reports.GetReportFileRequest.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.reports.GetReportFileRequest.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.reports.GetReportFileRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID report_request_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.reports.GetReportFileRequest.prototype.getReportRequestId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.reports.GetReportFileRequest.prototype.setReportRequestId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.web.reports.GetReportFileRequest.prototype.clearReportRequestId = function() {
  this.setReportRequestId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.reports.GetReportFileRequest.prototype.hasReportRequestId = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.medcrypt.helm.web.reports);
