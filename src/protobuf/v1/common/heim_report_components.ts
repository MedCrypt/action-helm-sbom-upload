/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.5.1
 * source: v1/common/heim_report_components.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../heim_common";
import * as dependency_2 from "./../../heim_vuln";
import * as dependency_3 from "./heim_enums";
import * as pb_1 from "google-protobuf";
export class RequestReportDataFda extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        /** @deprecated*/
        organizationProductVersionId?: dependency_1.UUID;
        includeSbomEntryReviewNotes?: boolean;
        includeCdxRemediation?: boolean;
        includeVexRemediation?: boolean;
        organizationProductVersionIds?: dependency_1.UUID[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("organizationProductVersionId" in data && data.organizationProductVersionId != undefined) {
                this.organizationProductVersionId = data.organizationProductVersionId;
            }
            if ("includeSbomEntryReviewNotes" in data && data.includeSbomEntryReviewNotes != undefined) {
                this.includeSbomEntryReviewNotes = data.includeSbomEntryReviewNotes;
            }
            if ("includeCdxRemediation" in data && data.includeCdxRemediation != undefined) {
                this.includeCdxRemediation = data.includeCdxRemediation;
            }
            if ("includeVexRemediation" in data && data.includeVexRemediation != undefined) {
                this.includeVexRemediation = data.includeVexRemediation;
            }
            if ("organizationProductVersionIds" in data && data.organizationProductVersionIds != undefined) {
                this.organizationProductVersionIds = data.organizationProductVersionIds;
            }
        }
    }
    /** @deprecated*/
    get organizationProductVersionId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 1) as dependency_1.UUID;
    }
    /** @deprecated*/
    set organizationProductVersionId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    /** @deprecated*/
    get hasOrganizationProductVersionId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get includeSbomEntryReviewNotes() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set includeSbomEntryReviewNotes(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get includeCdxRemediation() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set includeCdxRemediation(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get includeVexRemediation() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set includeVexRemediation(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get organizationProductVersionIds() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.UUID, 5) as dependency_1.UUID[];
    }
    set organizationProductVersionIds(value: dependency_1.UUID[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    static fromObject(data: {
        organizationProductVersionId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        includeSbomEntryReviewNotes?: boolean;
        includeCdxRemediation?: boolean;
        includeVexRemediation?: boolean;
        organizationProductVersionIds?: ReturnType<typeof dependency_1.UUID.prototype.toObject>[];
    }): RequestReportDataFda {
        const message = new RequestReportDataFda({});
        if (data.organizationProductVersionId != null) {
            message.organizationProductVersionId = dependency_1.UUID.fromObject(data.organizationProductVersionId);
        }
        if (data.includeSbomEntryReviewNotes != null) {
            message.includeSbomEntryReviewNotes = data.includeSbomEntryReviewNotes;
        }
        if (data.includeCdxRemediation != null) {
            message.includeCdxRemediation = data.includeCdxRemediation;
        }
        if (data.includeVexRemediation != null) {
            message.includeVexRemediation = data.includeVexRemediation;
        }
        if (data.organizationProductVersionIds != null) {
            message.organizationProductVersionIds = data.organizationProductVersionIds.map(item => dependency_1.UUID.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            organizationProductVersionId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            includeSbomEntryReviewNotes?: boolean;
            includeCdxRemediation?: boolean;
            includeVexRemediation?: boolean;
            organizationProductVersionIds?: ReturnType<typeof dependency_1.UUID.prototype.toObject>[];
        } = {};
        if (this.organizationProductVersionId != null) {
            data.organizationProductVersionId = this.organizationProductVersionId.toObject();
        }
        if (this.includeSbomEntryReviewNotes != null) {
            data.includeSbomEntryReviewNotes = this.includeSbomEntryReviewNotes;
        }
        if (this.includeCdxRemediation != null) {
            data.includeCdxRemediation = this.includeCdxRemediation;
        }
        if (this.includeVexRemediation != null) {
            data.includeVexRemediation = this.includeVexRemediation;
        }
        if (this.organizationProductVersionIds != null) {
            data.organizationProductVersionIds = this.organizationProductVersionIds.map((item: dependency_1.UUID) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasOrganizationProductVersionId)
            writer.writeMessage(1, this.organizationProductVersionId, () => this.organizationProductVersionId.serialize(writer));
        if (this.includeSbomEntryReviewNotes != false)
            writer.writeBool(2, this.includeSbomEntryReviewNotes);
        if (this.includeCdxRemediation != false)
            writer.writeBool(3, this.includeCdxRemediation);
        if (this.includeVexRemediation != false)
            writer.writeBool(4, this.includeVexRemediation);
        if (this.organizationProductVersionIds.length)
            writer.writeRepeatedMessage(5, this.organizationProductVersionIds, (item: dependency_1.UUID) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestReportDataFda {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestReportDataFda();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.organizationProductVersionId, () => message.organizationProductVersionId = dependency_1.UUID.deserialize(reader));
                    break;
                case 2:
                    message.includeSbomEntryReviewNotes = reader.readBool();
                    break;
                case 3:
                    message.includeCdxRemediation = reader.readBool();
                    break;
                case 4:
                    message.includeVexRemediation = reader.readBool();
                    break;
                case 5:
                    reader.readMessage(message.organizationProductVersionIds, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.UUID.deserialize(reader), dependency_1.UUID));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RequestReportDataFda {
        return RequestReportDataFda.deserialize(bytes);
    }
}
export class RequestReportDataCycloneDxVex extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        /** @deprecated*/
        organizationProductVersionId?: dependency_1.UUID;
        organizationProductVersionIds?: dependency_1.UUID[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("organizationProductVersionId" in data && data.organizationProductVersionId != undefined) {
                this.organizationProductVersionId = data.organizationProductVersionId;
            }
            if ("organizationProductVersionIds" in data && data.organizationProductVersionIds != undefined) {
                this.organizationProductVersionIds = data.organizationProductVersionIds;
            }
        }
    }
    /** @deprecated*/
    get organizationProductVersionId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 1) as dependency_1.UUID;
    }
    /** @deprecated*/
    set organizationProductVersionId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    /** @deprecated*/
    get hasOrganizationProductVersionId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get organizationProductVersionIds() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID[];
    }
    set organizationProductVersionIds(value: dependency_1.UUID[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        organizationProductVersionId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        organizationProductVersionIds?: ReturnType<typeof dependency_1.UUID.prototype.toObject>[];
    }): RequestReportDataCycloneDxVex {
        const message = new RequestReportDataCycloneDxVex({});
        if (data.organizationProductVersionId != null) {
            message.organizationProductVersionId = dependency_1.UUID.fromObject(data.organizationProductVersionId);
        }
        if (data.organizationProductVersionIds != null) {
            message.organizationProductVersionIds = data.organizationProductVersionIds.map(item => dependency_1.UUID.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            organizationProductVersionId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            organizationProductVersionIds?: ReturnType<typeof dependency_1.UUID.prototype.toObject>[];
        } = {};
        if (this.organizationProductVersionId != null) {
            data.organizationProductVersionId = this.organizationProductVersionId.toObject();
        }
        if (this.organizationProductVersionIds != null) {
            data.organizationProductVersionIds = this.organizationProductVersionIds.map((item: dependency_1.UUID) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasOrganizationProductVersionId)
            writer.writeMessage(1, this.organizationProductVersionId, () => this.organizationProductVersionId.serialize(writer));
        if (this.organizationProductVersionIds.length)
            writer.writeRepeatedMessage(2, this.organizationProductVersionIds, (item: dependency_1.UUID) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestReportDataCycloneDxVex {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestReportDataCycloneDxVex();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.organizationProductVersionId, () => message.organizationProductVersionId = dependency_1.UUID.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.organizationProductVersionIds, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.UUID.deserialize(reader), dependency_1.UUID));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RequestReportDataCycloneDxVex {
        return RequestReportDataCycloneDxVex.deserialize(bytes);
    }
}
export class RequestReportDataVulnCsv extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        organizationProductVersionIds?: dependency_1.UUID[];
        page?: dependency_1.Page;
        filter?: dependency_2.VulnerabilityFilter;
        order?: dependency_2.VulnerabilityOrder[];
        includeSummaries?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("organizationProductVersionIds" in data && data.organizationProductVersionIds != undefined) {
                this.organizationProductVersionIds = data.organizationProductVersionIds;
            }
            if ("page" in data && data.page != undefined) {
                this.page = data.page;
            }
            if ("filter" in data && data.filter != undefined) {
                this.filter = data.filter;
            }
            if ("order" in data && data.order != undefined) {
                this.order = data.order;
            }
            if ("includeSummaries" in data && data.includeSummaries != undefined) {
                this.includeSummaries = data.includeSummaries;
            }
        }
    }
    get organizationProductVersionIds() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.UUID, 1) as dependency_1.UUID[];
    }
    set organizationProductVersionIds(value: dependency_1.UUID[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get page() {
        return pb_1.Message.getWrapperField(this, dependency_1.Page, 2) as dependency_1.Page;
    }
    set page(value: dependency_1.Page) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasPage() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get filter() {
        return pb_1.Message.getWrapperField(this, dependency_2.VulnerabilityFilter, 3) as dependency_2.VulnerabilityFilter;
    }
    set filter(value: dependency_2.VulnerabilityFilter) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasFilter() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get order() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.VulnerabilityOrder, 4) as dependency_2.VulnerabilityOrder[];
    }
    set order(value: dependency_2.VulnerabilityOrder[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get includeSummaries() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set includeSummaries(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        organizationProductVersionIds?: ReturnType<typeof dependency_1.UUID.prototype.toObject>[];
        page?: ReturnType<typeof dependency_1.Page.prototype.toObject>;
        filter?: ReturnType<typeof dependency_2.VulnerabilityFilter.prototype.toObject>;
        order?: ReturnType<typeof dependency_2.VulnerabilityOrder.prototype.toObject>[];
        includeSummaries?: boolean;
    }): RequestReportDataVulnCsv {
        const message = new RequestReportDataVulnCsv({});
        if (data.organizationProductVersionIds != null) {
            message.organizationProductVersionIds = data.organizationProductVersionIds.map(item => dependency_1.UUID.fromObject(item));
        }
        if (data.page != null) {
            message.page = dependency_1.Page.fromObject(data.page);
        }
        if (data.filter != null) {
            message.filter = dependency_2.VulnerabilityFilter.fromObject(data.filter);
        }
        if (data.order != null) {
            message.order = data.order.map(item => dependency_2.VulnerabilityOrder.fromObject(item));
        }
        if (data.includeSummaries != null) {
            message.includeSummaries = data.includeSummaries;
        }
        return message;
    }
    toObject() {
        const data: {
            organizationProductVersionIds?: ReturnType<typeof dependency_1.UUID.prototype.toObject>[];
            page?: ReturnType<typeof dependency_1.Page.prototype.toObject>;
            filter?: ReturnType<typeof dependency_2.VulnerabilityFilter.prototype.toObject>;
            order?: ReturnType<typeof dependency_2.VulnerabilityOrder.prototype.toObject>[];
            includeSummaries?: boolean;
        } = {};
        if (this.organizationProductVersionIds != null) {
            data.organizationProductVersionIds = this.organizationProductVersionIds.map((item: dependency_1.UUID) => item.toObject());
        }
        if (this.page != null) {
            data.page = this.page.toObject();
        }
        if (this.filter != null) {
            data.filter = this.filter.toObject();
        }
        if (this.order != null) {
            data.order = this.order.map((item: dependency_2.VulnerabilityOrder) => item.toObject());
        }
        if (this.includeSummaries != null) {
            data.includeSummaries = this.includeSummaries;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.organizationProductVersionIds.length)
            writer.writeRepeatedMessage(1, this.organizationProductVersionIds, (item: dependency_1.UUID) => item.serialize(writer));
        if (this.hasPage)
            writer.writeMessage(2, this.page, () => this.page.serialize(writer));
        if (this.hasFilter)
            writer.writeMessage(3, this.filter, () => this.filter.serialize(writer));
        if (this.order.length)
            writer.writeRepeatedMessage(4, this.order, (item: dependency_2.VulnerabilityOrder) => item.serialize(writer));
        if (this.includeSummaries != false)
            writer.writeBool(5, this.includeSummaries);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestReportDataVulnCsv {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestReportDataVulnCsv();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.organizationProductVersionIds, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.UUID.deserialize(reader), dependency_1.UUID));
                    break;
                case 2:
                    reader.readMessage(message.page, () => message.page = dependency_1.Page.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.filter, () => message.filter = dependency_2.VulnerabilityFilter.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.order, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.VulnerabilityOrder.deserialize(reader), dependency_2.VulnerabilityOrder));
                    break;
                case 5:
                    message.includeSummaries = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RequestReportDataVulnCsv {
        return RequestReportDataVulnCsv.deserialize(bytes);
    }
}
export class RequestReportRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[2, 3, 4]];
    constructor(data?: any[] | ({
        metadata?: dependency_1.RequestMetadata;
    } & (({
        reportRequestDataFda?: RequestReportDataFda;
        reportRequestDataCycloneDxVex?: never;
        reportRequestDataVulnCsv?: never;
    } | {
        reportRequestDataFda?: never;
        reportRequestDataCycloneDxVex?: RequestReportDataCycloneDxVex;
        reportRequestDataVulnCsv?: never;
    } | {
        reportRequestDataFda?: never;
        reportRequestDataCycloneDxVex?: never;
        reportRequestDataVulnCsv?: RequestReportDataVulnCsv;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("reportRequestDataFda" in data && data.reportRequestDataFda != undefined) {
                this.reportRequestDataFda = data.reportRequestDataFda;
            }
            if ("reportRequestDataCycloneDxVex" in data && data.reportRequestDataCycloneDxVex != undefined) {
                this.reportRequestDataCycloneDxVex = data.reportRequestDataCycloneDxVex;
            }
            if ("reportRequestDataVulnCsv" in data && data.reportRequestDataVulnCsv != undefined) {
                this.reportRequestDataVulnCsv = data.reportRequestDataVulnCsv;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get reportRequestDataFda() {
        return pb_1.Message.getWrapperField(this, RequestReportDataFda, 2) as RequestReportDataFda;
    }
    set reportRequestDataFda(value: RequestReportDataFda) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasReportRequestDataFda() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get reportRequestDataCycloneDxVex() {
        return pb_1.Message.getWrapperField(this, RequestReportDataCycloneDxVex, 3) as RequestReportDataCycloneDxVex;
    }
    set reportRequestDataCycloneDxVex(value: RequestReportDataCycloneDxVex) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get hasReportRequestDataCycloneDxVex() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get reportRequestDataVulnCsv() {
        return pb_1.Message.getWrapperField(this, RequestReportDataVulnCsv, 4) as RequestReportDataVulnCsv;
    }
    set reportRequestDataVulnCsv(value: RequestReportDataVulnCsv) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasReportRequestDataVulnCsv() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get reportData() {
        const cases: {
            [index: number]: "none" | "reportRequestDataFda" | "reportRequestDataCycloneDxVex" | "reportRequestDataVulnCsv";
        } = {
            0: "none",
            2: "reportRequestDataFda",
            3: "reportRequestDataCycloneDxVex",
            4: "reportRequestDataVulnCsv"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4])];
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        reportRequestDataFda?: ReturnType<typeof RequestReportDataFda.prototype.toObject>;
        reportRequestDataCycloneDxVex?: ReturnType<typeof RequestReportDataCycloneDxVex.prototype.toObject>;
        reportRequestDataVulnCsv?: ReturnType<typeof RequestReportDataVulnCsv.prototype.toObject>;
    }): RequestReportRequest {
        const message = new RequestReportRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.reportRequestDataFda != null) {
            message.reportRequestDataFda = RequestReportDataFda.fromObject(data.reportRequestDataFda);
        }
        if (data.reportRequestDataCycloneDxVex != null) {
            message.reportRequestDataCycloneDxVex = RequestReportDataCycloneDxVex.fromObject(data.reportRequestDataCycloneDxVex);
        }
        if (data.reportRequestDataVulnCsv != null) {
            message.reportRequestDataVulnCsv = RequestReportDataVulnCsv.fromObject(data.reportRequestDataVulnCsv);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            reportRequestDataFda?: ReturnType<typeof RequestReportDataFda.prototype.toObject>;
            reportRequestDataCycloneDxVex?: ReturnType<typeof RequestReportDataCycloneDxVex.prototype.toObject>;
            reportRequestDataVulnCsv?: ReturnType<typeof RequestReportDataVulnCsv.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.reportRequestDataFda != null) {
            data.reportRequestDataFda = this.reportRequestDataFda.toObject();
        }
        if (this.reportRequestDataCycloneDxVex != null) {
            data.reportRequestDataCycloneDxVex = this.reportRequestDataCycloneDxVex.toObject();
        }
        if (this.reportRequestDataVulnCsv != null) {
            data.reportRequestDataVulnCsv = this.reportRequestDataVulnCsv.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasReportRequestDataFda)
            writer.writeMessage(2, this.reportRequestDataFda, () => this.reportRequestDataFda.serialize(writer));
        if (this.hasReportRequestDataCycloneDxVex)
            writer.writeMessage(3, this.reportRequestDataCycloneDxVex, () => this.reportRequestDataCycloneDxVex.serialize(writer));
        if (this.hasReportRequestDataVulnCsv)
            writer.writeMessage(4, this.reportRequestDataVulnCsv, () => this.reportRequestDataVulnCsv.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestReportRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestReportRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.reportRequestDataFda, () => message.reportRequestDataFda = RequestReportDataFda.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.reportRequestDataCycloneDxVex, () => message.reportRequestDataCycloneDxVex = RequestReportDataCycloneDxVex.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.reportRequestDataVulnCsv, () => message.reportRequestDataVulnCsv = RequestReportDataVulnCsv.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RequestReportRequest {
        return RequestReportRequest.deserialize(bytes);
    }
}
export class RequestReportResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        reportRequestId?: dependency_1.UUID;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("reportRequestId" in data && data.reportRequestId != undefined) {
                this.reportRequestId = data.reportRequestId;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get reportRequestId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set reportRequestId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasReportRequestId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        reportRequestId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
    }): RequestReportResponse {
        const message = new RequestReportResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.reportRequestId != null) {
            message.reportRequestId = dependency_1.UUID.fromObject(data.reportRequestId);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            reportRequestId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.reportRequestId != null) {
            data.reportRequestId = this.reportRequestId.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasReportRequestId)
            writer.writeMessage(2, this.reportRequestId, () => this.reportRequestId.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestReportResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestReportResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.reportRequestId, () => message.reportRequestId = dependency_1.UUID.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RequestReportResponse {
        return RequestReportResponse.deserialize(bytes);
    }
}
export class GetReportRequestStateRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
        reportRequestId?: dependency_1.UUID;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("reportRequestId" in data && data.reportRequestId != undefined) {
                this.reportRequestId = data.reportRequestId;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get reportRequestId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set reportRequestId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasReportRequestId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        reportRequestId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
    }): GetReportRequestStateRequest {
        const message = new GetReportRequestStateRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.reportRequestId != null) {
            message.reportRequestId = dependency_1.UUID.fromObject(data.reportRequestId);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            reportRequestId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.reportRequestId != null) {
            data.reportRequestId = this.reportRequestId.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasReportRequestId)
            writer.writeMessage(2, this.reportRequestId, () => this.reportRequestId.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetReportRequestStateRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetReportRequestStateRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.reportRequestId, () => message.reportRequestId = dependency_1.UUID.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetReportRequestStateRequest {
        return GetReportRequestStateRequest.deserialize(bytes);
    }
}
export class GetReportRequestStateResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        reportRequestState?: dependency_3.ReportRequestState;
        userMessage?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("reportRequestState" in data && data.reportRequestState != undefined) {
                this.reportRequestState = data.reportRequestState;
            }
            if ("userMessage" in data && data.userMessage != undefined) {
                this.userMessage = data.userMessage;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get reportRequestState() {
        return pb_1.Message.getFieldWithDefault(this, 2, dependency_3.ReportRequestState.RRS_NOT_DEFINED) as dependency_3.ReportRequestState;
    }
    set reportRequestState(value: dependency_3.ReportRequestState) {
        pb_1.Message.setField(this, 2, value);
    }
    get userMessage() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set userMessage(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        reportRequestState?: dependency_3.ReportRequestState;
        userMessage?: string;
    }): GetReportRequestStateResponse {
        const message = new GetReportRequestStateResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.reportRequestState != null) {
            message.reportRequestState = data.reportRequestState;
        }
        if (data.userMessage != null) {
            message.userMessage = data.userMessage;
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            reportRequestState?: dependency_3.ReportRequestState;
            userMessage?: string;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.reportRequestState != null) {
            data.reportRequestState = this.reportRequestState;
        }
        if (this.userMessage != null) {
            data.userMessage = this.userMessage;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.reportRequestState != dependency_3.ReportRequestState.RRS_NOT_DEFINED)
            writer.writeEnum(2, this.reportRequestState);
        if (this.userMessage.length)
            writer.writeString(3, this.userMessage);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetReportRequestStateResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetReportRequestStateResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    message.reportRequestState = reader.readEnum();
                    break;
                case 3:
                    message.userMessage = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetReportRequestStateResponse {
        return GetReportRequestStateResponse.deserialize(bytes);
    }
}
export class GetReportFileRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
        reportRequestId?: dependency_1.UUID;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("reportRequestId" in data && data.reportRequestId != undefined) {
                this.reportRequestId = data.reportRequestId;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get reportRequestId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set reportRequestId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasReportRequestId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        reportRequestId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
    }): GetReportFileRequest {
        const message = new GetReportFileRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.reportRequestId != null) {
            message.reportRequestId = dependency_1.UUID.fromObject(data.reportRequestId);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            reportRequestId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.reportRequestId != null) {
            data.reportRequestId = this.reportRequestId.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasReportRequestId)
            writer.writeMessage(2, this.reportRequestId, () => this.reportRequestId.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetReportFileRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetReportFileRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.reportRequestId, () => message.reportRequestId = dependency_1.UUID.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetReportFileRequest {
        return GetReportFileRequest.deserialize(bytes);
    }
}
