/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var heim_common_pb = require('../../heim_common_pb.js');
var v1_common_heim_enums_pb = require('../../v1/common/heim_enums_pb.js');
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CopyRemediationEntries', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CopyRemediationEntry', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CreateRemediationEntries', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CreateRemediationEntry', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CycloneDxRemediationData', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CycloneDxRemediationJustification', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CycloneDxRemediationResponse', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CycloneDxRemediationState', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CycloneDxVexInfo', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.CycloneDxVexStatus', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.LatestRemediationEntry', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.ListRemediationEntries', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.RemediationCreatedInfo', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.RemediationEntry', null, global);
goog.exportSymbol('proto.medcrypt.helm.web.remediations.RemediationTarget', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.CycloneDxVexInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.CycloneDxVexInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.displayName = 'proto.medcrypt.helm.web.remediations.CycloneDxVexInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.CycloneDxVexInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    evidence: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.CycloneDxVexInfo}
 */
proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.CycloneDxVexInfo;
  return proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.CycloneDxVexInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.CycloneDxVexInfo}
 */
proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.medcrypt.helm.web.remediations.CycloneDxVexStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.CycloneDxVexInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEvidence();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional CycloneDxVexStatus status = 1;
 * @return {!proto.medcrypt.helm.web.remediations.CycloneDxVexStatus}
 */
proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.prototype.getStatus = function() {
  return /** @type {!proto.medcrypt.helm.web.remediations.CycloneDxVexStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.medcrypt.helm.web.remediations.CycloneDxVexStatus} value */
proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string evidence = 2;
 * @return {string}
 */
proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.prototype.getEvidence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.prototype.setEvidence = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.RemediationEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.web.remediations.RemediationEntry.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.web.remediations.RemediationEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.RemediationEntry.displayName = 'proto.medcrypt.helm.web.remediations.RemediationEntry';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.oneofGroups_ = [[6]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.RemediationdataCase = {
  REMEDIATIONDATA_NOT_SET: 0,
  CYCLONE_DX_DATA: 6
};

/**
 * @return {proto.medcrypt.helm.web.remediations.RemediationEntry.RemediationdataCase}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.getRemediationdataCase = function() {
  return /** @type {proto.medcrypt.helm.web.remediations.RemediationEntry.RemediationdataCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.web.remediations.RemediationEntry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.RemediationEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.RemediationEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    remediationEntryId: (f = msg.getRemediationEntryId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    createdDate: jspb.Message.getFieldWithDefault(msg, 2, 0),
    createdBy: jspb.Message.getFieldWithDefault(msg, 3, ""),
    cdxVexInfo: (f = msg.getCdxVexInfo()) && proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.toObject(includeInstance, f),
    cycloneDxData: (f = msg.getCycloneDxData()) && proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.RemediationEntry}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.RemediationEntry;
  return proto.medcrypt.helm.web.remediations.RemediationEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.RemediationEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.RemediationEntry}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setRemediationEntryId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedDate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedBy(value);
      break;
    case 5:
      var value = new proto.medcrypt.helm.web.remediations.CycloneDxVexInfo;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.deserializeBinaryFromReader);
      msg.setCdxVexInfo(value);
      break;
    case 6:
      var value = new proto.medcrypt.helm.web.remediations.CycloneDxRemediationData;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.deserializeBinaryFromReader);
      msg.setCycloneDxData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.RemediationEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.RemediationEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemediationEntryId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getCreatedDate();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCreatedBy();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCdxVexInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.serializeBinaryToWriter
    );
  }
  f = message.getCycloneDxData();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.UUID remediation_entry_id = 1;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.getRemediationEntryId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.setRemediationEntryId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.clearRemediationEntryId = function() {
  this.setRemediationEntryId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.hasRemediationEntryId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 created_date = 2;
 * @return {number}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.getCreatedDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.setCreatedDate = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string created_by = 3;
 * @return {string}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.getCreatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.setCreatedBy = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional CycloneDxVexInfo cdx_vex_info = 5;
 * @return {?proto.medcrypt.helm.web.remediations.CycloneDxVexInfo}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.getCdxVexInfo = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CycloneDxVexInfo} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CycloneDxVexInfo, 5));
};


/** @param {?proto.medcrypt.helm.web.remediations.CycloneDxVexInfo|undefined} value */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.setCdxVexInfo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.clearCdxVexInfo = function() {
  this.setCdxVexInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.hasCdxVexInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CycloneDxRemediationData cyclone_dx_data = 6;
 * @return {?proto.medcrypt.helm.web.remediations.CycloneDxRemediationData}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.getCycloneDxData = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CycloneDxRemediationData} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CycloneDxRemediationData, 6));
};


/** @param {?proto.medcrypt.helm.web.remediations.CycloneDxRemediationData|undefined} value */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.setCycloneDxData = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.medcrypt.helm.web.remediations.RemediationEntry.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.clearCycloneDxData = function() {
  this.setCycloneDxData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.RemediationEntry.prototype.hasCycloneDxData = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.web.remediations.ListRemediationEntries.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.web.remediations.ListRemediationEntries, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.ListRemediationEntries.displayName = 'proto.medcrypt.helm.web.remediations.ListRemediationEntries';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.web.remediations.ListRemediationEntries.PayloadCase}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.web.remediations.ListRemediationEntries.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.web.remediations.ListRemediationEntries.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.ListRemediationEntries.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntries} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.ListRemediationEntries}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.ListRemediationEntries;
  return proto.medcrypt.helm.web.remediations.ListRemediationEntries.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntries} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.ListRemediationEntries}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.ListRemediationEntries.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntries} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.displayName = 'proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    dependencyId: (f = msg.getDependencyId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    vulnerabilityAnnalId: (f = msg.getVulnerabilityAnnalId()) && heim_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request;
  return proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setDependencyId(value);
      break;
    case 3:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVulnerabilityAnnalId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getDependencyId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVulnerabilityAnnalId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID dependency_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.getDependencyId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.setDependencyId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.clearDependencyId = function() {
  this.setDependencyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.hasDependencyId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID vulnerability_annal_id = 3;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.getVulnerabilityAnnalId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 3));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.setVulnerabilityAnnalId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.clearVulnerabilityAnnalId = function() {
  this.setVulnerabilityAnnalId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request.prototype.hasVulnerabilityAnnalId = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.displayName = 'proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    remediationEntriesList: jspb.Message.toObjectList(msg.getRemediationEntriesList(),
    proto.medcrypt.helm.web.remediations.RemediationEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response;
  return proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.remediations.RemediationEntry;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.RemediationEntry.deserializeBinaryFromReader);
      msg.addRemediationEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getRemediationEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.medcrypt.helm.web.remediations.RemediationEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated RemediationEntry remediation_entries = 2;
 * @return {!Array.<!proto.medcrypt.helm.web.remediations.RemediationEntry>}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.prototype.getRemediationEntriesList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.web.remediations.RemediationEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.web.remediations.RemediationEntry, 2));
};


/** @param {!Array.<!proto.medcrypt.helm.web.remediations.RemediationEntry>} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.prototype.setRemediationEntriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.medcrypt.helm.web.remediations.RemediationEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.web.remediations.RemediationEntry}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.prototype.addRemediationEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.medcrypt.helm.web.remediations.RemediationEntry, opt_index);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response.prototype.clearRemediationEntriesList = function() {
  this.setRemediationEntriesList([]);
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request, 1));
};


/** @param {?proto.medcrypt.helm.web.remediations.ListRemediationEntries.Request|undefined} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.web.remediations.ListRemediationEntries.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntries.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response, 2));
};


/** @param {?proto.medcrypt.helm.web.remediations.ListRemediationEntries.Response|undefined} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.web.remediations.ListRemediationEntries.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntries.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntries.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.CycloneDxRemediationData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.displayName = 'proto.medcrypt.helm.web.remediations.CycloneDxRemediationData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.toObject = function(includeInstance, msg) {
  var f, obj = {
    remediationState: jspb.Message.getFieldWithDefault(msg, 1, 0),
    remediationJustification: jspb.Message.getFieldWithDefault(msg, 2, 0),
    remediationResponseList: jspb.Message.getRepeatedField(msg, 3),
    detail: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationData}
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.CycloneDxRemediationData;
  return proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationData}
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationState} */ (reader.readEnum());
      msg.setRemediationState(value);
      break;
    case 2:
      var value = /** @type {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationJustification} */ (reader.readEnum());
      msg.setRemediationJustification(value);
      break;
    case 3:
      var value = /** @type {!Array.<!proto.medcrypt.helm.web.remediations.CycloneDxRemediationResponse>} */ (reader.readPackedEnum());
      msg.setRemediationResponseList(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemediationState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRemediationJustification();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRemediationResponseList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getDetail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional CycloneDxRemediationState remediation_state = 1;
 * @return {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationState}
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.prototype.getRemediationState = function() {
  return /** @type {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationState} value */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.prototype.setRemediationState = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CycloneDxRemediationJustification remediation_justification = 2;
 * @return {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationJustification}
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.prototype.getRemediationJustification = function() {
  return /** @type {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationJustification} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationJustification} value */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.prototype.setRemediationJustification = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated CycloneDxRemediationResponse remediation_response = 3;
 * @return {!Array.<!proto.medcrypt.helm.web.remediations.CycloneDxRemediationResponse>}
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.prototype.getRemediationResponseList = function() {
  return /** @type {!Array.<!proto.medcrypt.helm.web.remediations.CycloneDxRemediationResponse>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<!proto.medcrypt.helm.web.remediations.CycloneDxRemediationResponse>} value */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.prototype.setRemediationResponseList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.medcrypt.helm.web.remediations.CycloneDxRemediationResponse} value
 * @param {number=} opt_index
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.prototype.addRemediationResponse = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.prototype.clearRemediationResponseList = function() {
  this.setRemediationResponseList([]);
};


/**
 * optional string detail = 4;
 * @return {string}
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.prototype.getDetail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.prototype.setDetail = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.web.remediations.CreateRemediationEntry.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.web.remediations.CreateRemediationEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.CreateRemediationEntry.displayName = 'proto.medcrypt.helm.web.remediations.CreateRemediationEntry';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.web.remediations.CreateRemediationEntry.PayloadCase}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.web.remediations.CreateRemediationEntry.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.web.remediations.CreateRemediationEntry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.CreateRemediationEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.CreateRemediationEntry;
  return proto.medcrypt.helm.web.remediations.CreateRemediationEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.CreateRemediationEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.displayName = 'proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.oneofGroups_ = [[5]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CYCLONE_DX_DATA: 5
};

/**
 * @return {proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.PayloadCase}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    dependencyId: (f = msg.getDependencyId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    vulnerabilityAnnalId: (f = msg.getVulnerabilityAnnalId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    cycloneDxVexInfo: (f = msg.getCycloneDxVexInfo()) && proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.toObject(includeInstance, f),
    cycloneDxData: (f = msg.getCycloneDxData()) && proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request;
  return proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setDependencyId(value);
      break;
    case 3:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVulnerabilityAnnalId(value);
      break;
    case 4:
      var value = new proto.medcrypt.helm.web.remediations.CycloneDxVexInfo;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.deserializeBinaryFromReader);
      msg.setCycloneDxVexInfo(value);
      break;
    case 5:
      var value = new proto.medcrypt.helm.web.remediations.CycloneDxRemediationData;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.deserializeBinaryFromReader);
      msg.setCycloneDxData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getDependencyId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVulnerabilityAnnalId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getCycloneDxVexInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.serializeBinaryToWriter
    );
  }
  f = message.getCycloneDxData();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID dependency_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.getDependencyId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.setDependencyId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.clearDependencyId = function() {
  this.setDependencyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.hasDependencyId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID vulnerability_annal_id = 3;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.getVulnerabilityAnnalId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 3));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.setVulnerabilityAnnalId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.clearVulnerabilityAnnalId = function() {
  this.setVulnerabilityAnnalId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.hasVulnerabilityAnnalId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CycloneDxVexInfo cyclone_dx_vex_info = 4;
 * @return {?proto.medcrypt.helm.web.remediations.CycloneDxVexInfo}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.getCycloneDxVexInfo = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CycloneDxVexInfo} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CycloneDxVexInfo, 4));
};


/** @param {?proto.medcrypt.helm.web.remediations.CycloneDxVexInfo|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.setCycloneDxVexInfo = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.clearCycloneDxVexInfo = function() {
  this.setCycloneDxVexInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.hasCycloneDxVexInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CycloneDxRemediationData cyclone_dx_data = 5;
 * @return {?proto.medcrypt.helm.web.remediations.CycloneDxRemediationData}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.getCycloneDxData = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CycloneDxRemediationData} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CycloneDxRemediationData, 5));
};


/** @param {?proto.medcrypt.helm.web.remediations.CycloneDxRemediationData|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.setCycloneDxData = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.clearCycloneDxData = function() {
  this.setCycloneDxData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request.prototype.hasCycloneDxData = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.displayName = 'proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response;
  return proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request, 1));
};


/** @param {?proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Request|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.web.remediations.CreateRemediationEntry.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntry.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response, 2));
};


/** @param {?proto.medcrypt.helm.web.remediations.CreateRemediationEntry.Response|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.web.remediations.CreateRemediationEntry.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntry.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntry.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.displayName = 'proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.PayloadCase}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry;
  return proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.displayName = 'proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    dependencyId: (f = msg.getDependencyId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    vulnerabilityAnnalId: (f = msg.getVulnerabilityAnnalId()) && heim_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request;
  return proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setDependencyId(value);
      break;
    case 3:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVulnerabilityAnnalId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getDependencyId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVulnerabilityAnnalId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID dependency_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.getDependencyId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.setDependencyId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.clearDependencyId = function() {
  this.setDependencyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.hasDependencyId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID vulnerability_annal_id = 3;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.getVulnerabilityAnnalId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 3));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.setVulnerabilityAnnalId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.clearVulnerabilityAnnalId = function() {
  this.setVulnerabilityAnnalId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request.prototype.hasVulnerabilityAnnalId = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.displayName = 'proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    remediationEntry: (f = msg.getRemediationEntry()) && proto.medcrypt.helm.web.remediations.RemediationEntry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response;
  return proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.remediations.RemediationEntry;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.RemediationEntry.deserializeBinaryFromReader);
      msg.setRemediationEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getRemediationEntry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.web.remediations.RemediationEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RemediationEntry remediation_entry = 2;
 * @return {?proto.medcrypt.helm.web.remediations.RemediationEntry}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.prototype.getRemediationEntry = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.RemediationEntry} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.RemediationEntry, 2));
};


/** @param {?proto.medcrypt.helm.web.remediations.RemediationEntry|undefined} value */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.prototype.setRemediationEntry = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.prototype.clearRemediationEntry = function() {
  this.setRemediationEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response.prototype.hasRemediationEntry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request, 1));
};


/** @param {?proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Request|undefined} value */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response, 2));
};


/** @param {?proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.Response|undefined} value */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.GetLatestRemediationEntry.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.RemediationTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.RemediationTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.RemediationTarget.displayName = 'proto.medcrypt.helm.web.remediations.RemediationTarget';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.RemediationTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.RemediationTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.RemediationTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.RemediationTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    dependencyId: (f = msg.getDependencyId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    vulnerabilityAnnalId: (f = msg.getVulnerabilityAnnalId()) && heim_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.RemediationTarget}
 */
proto.medcrypt.helm.web.remediations.RemediationTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.RemediationTarget;
  return proto.medcrypt.helm.web.remediations.RemediationTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.RemediationTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.RemediationTarget}
 */
proto.medcrypt.helm.web.remediations.RemediationTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setDependencyId(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVulnerabilityAnnalId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.RemediationTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.RemediationTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.RemediationTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.RemediationTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDependencyId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVulnerabilityAnnalId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.UUID dependency_id = 1;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.RemediationTarget.prototype.getDependencyId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.RemediationTarget.prototype.setDependencyId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.RemediationTarget.prototype.clearDependencyId = function() {
  this.setDependencyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.RemediationTarget.prototype.hasDependencyId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID vulnerability_annal_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.RemediationTarget.prototype.getVulnerabilityAnnalId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.RemediationTarget.prototype.setVulnerabilityAnnalId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.web.remediations.RemediationTarget.prototype.clearVulnerabilityAnnalId = function() {
  this.setVulnerabilityAnnalId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.RemediationTarget.prototype.hasVulnerabilityAnnalId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.web.remediations.CreateRemediationEntries.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.web.remediations.CreateRemediationEntries, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.CreateRemediationEntries.displayName = 'proto.medcrypt.helm.web.remediations.CreateRemediationEntries';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.web.remediations.CreateRemediationEntries.PayloadCase}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.web.remediations.CreateRemediationEntries.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.web.remediations.CreateRemediationEntries.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.CreateRemediationEntries.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.CreateRemediationEntries;
  return proto.medcrypt.helm.web.remediations.CreateRemediationEntries.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.CreateRemediationEntries.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.repeatedFields_, proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.displayName = 'proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.repeatedFields_ = [2];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.oneofGroups_ = [[4]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CYCLONE_DX_DATA: 4
};

/**
 * @return {proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.PayloadCase}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    remediationTargetList: jspb.Message.toObjectList(msg.getRemediationTargetList(),
    proto.medcrypt.helm.web.remediations.RemediationTarget.toObject, includeInstance),
    cycloneDxVexInfo: (f = msg.getCycloneDxVexInfo()) && proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.toObject(includeInstance, f),
    cycloneDxData: (f = msg.getCycloneDxData()) && proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request;
  return proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.remediations.RemediationTarget;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.RemediationTarget.deserializeBinaryFromReader);
      msg.addRemediationTarget(value);
      break;
    case 3:
      var value = new proto.medcrypt.helm.web.remediations.CycloneDxVexInfo;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.deserializeBinaryFromReader);
      msg.setCycloneDxVexInfo(value);
      break;
    case 4:
      var value = new proto.medcrypt.helm.web.remediations.CycloneDxRemediationData;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.deserializeBinaryFromReader);
      msg.setCycloneDxData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getRemediationTargetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.medcrypt.helm.web.remediations.RemediationTarget.serializeBinaryToWriter
    );
  }
  f = message.getCycloneDxVexInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.serializeBinaryToWriter
    );
  }
  f = message.getCycloneDxData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated RemediationTarget remediation_target = 2;
 * @return {!Array.<!proto.medcrypt.helm.web.remediations.RemediationTarget>}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.getRemediationTargetList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.web.remediations.RemediationTarget>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.web.remediations.RemediationTarget, 2));
};


/** @param {!Array.<!proto.medcrypt.helm.web.remediations.RemediationTarget>} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.setRemediationTargetList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.medcrypt.helm.web.remediations.RemediationTarget=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.web.remediations.RemediationTarget}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.addRemediationTarget = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.medcrypt.helm.web.remediations.RemediationTarget, opt_index);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.clearRemediationTargetList = function() {
  this.setRemediationTargetList([]);
};


/**
 * optional CycloneDxVexInfo cyclone_dx_vex_info = 3;
 * @return {?proto.medcrypt.helm.web.remediations.CycloneDxVexInfo}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.getCycloneDxVexInfo = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CycloneDxVexInfo} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CycloneDxVexInfo, 3));
};


/** @param {?proto.medcrypt.helm.web.remediations.CycloneDxVexInfo|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.setCycloneDxVexInfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.clearCycloneDxVexInfo = function() {
  this.setCycloneDxVexInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.hasCycloneDxVexInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CycloneDxRemediationData cyclone_dx_data = 4;
 * @return {?proto.medcrypt.helm.web.remediations.CycloneDxRemediationData}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.getCycloneDxData = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CycloneDxRemediationData} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CycloneDxRemediationData, 4));
};


/** @param {?proto.medcrypt.helm.web.remediations.CycloneDxRemediationData|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.setCycloneDxData = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.clearCycloneDxData = function() {
  this.setCycloneDxData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request.prototype.hasCycloneDxData = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.displayName = 'proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    remediationCreatedInfoList: jspb.Message.toObjectList(msg.getRemediationCreatedInfoList(),
    proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response;
  return proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.remediations.RemediationCreatedInfo;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.deserializeBinaryFromReader);
      msg.addRemediationCreatedInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getRemediationCreatedInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated RemediationCreatedInfo remediation_created_info = 2;
 * @return {!Array.<!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo>}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.prototype.getRemediationCreatedInfoList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.web.remediations.RemediationCreatedInfo, 2));
};


/** @param {!Array.<!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo>} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.prototype.setRemediationCreatedInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.prototype.addRemediationCreatedInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.medcrypt.helm.web.remediations.RemediationCreatedInfo, opt_index);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response.prototype.clearRemediationCreatedInfoList = function() {
  this.setRemediationCreatedInfoList([]);
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request, 1));
};


/** @param {?proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Request|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.web.remediations.CreateRemediationEntries.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntries.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response, 2));
};


/** @param {?proto.medcrypt.helm.web.remediations.CreateRemediationEntries.Response|undefined} value */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.web.remediations.CreateRemediationEntries.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.CreateRemediationEntries.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CreateRemediationEntries.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.RemediationCreatedInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.RemediationCreatedInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.displayName = 'proto.medcrypt.helm.web.remediations.RemediationCreatedInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    remediationTarget: (f = msg.getRemediationTarget()) && proto.medcrypt.helm.web.remediations.RemediationTarget.toObject(includeInstance, f),
    remediationId: (f = msg.getRemediationId()) && heim_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo}
 */
proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.RemediationCreatedInfo;
  return proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo}
 */
proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.web.remediations.RemediationTarget;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.RemediationTarget.deserializeBinaryFromReader);
      msg.setRemediationTarget(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setRemediationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemediationTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.web.remediations.RemediationTarget.serializeBinaryToWriter
    );
  }
  f = message.getRemediationId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional RemediationTarget remediation_target = 1;
 * @return {?proto.medcrypt.helm.web.remediations.RemediationTarget}
 */
proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.prototype.getRemediationTarget = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.RemediationTarget} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.RemediationTarget, 1));
};


/** @param {?proto.medcrypt.helm.web.remediations.RemediationTarget|undefined} value */
proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.prototype.setRemediationTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.prototype.clearRemediationTarget = function() {
  this.setRemediationTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.prototype.hasRemediationTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID remediation_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.prototype.getRemediationId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.prototype.setRemediationId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.prototype.clearRemediationId = function() {
  this.setRemediationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.prototype.hasRemediationId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.displayName = 'proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.PayloadCase}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion;
  return proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.displayName = 'proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    productVersionIdFrom: (f = msg.getProductVersionIdFrom()) && heim_common_pb.UUID.toObject(includeInstance, f),
    productVersionIdTo: (f = msg.getProductVersionIdTo()) && heim_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request;
  return proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setProductVersionIdFrom(value);
      break;
    case 3:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setProductVersionIdTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getProductVersionIdFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getProductVersionIdTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID product_version_id_from = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.getProductVersionIdFrom = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.setProductVersionIdFrom = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.clearProductVersionIdFrom = function() {
  this.setProductVersionIdFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.hasProductVersionIdFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID product_version_id_to = 3;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.getProductVersionIdTo = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 3));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.setProductVersionIdTo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.clearProductVersionIdTo = function() {
  this.setProductVersionIdTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request.prototype.hasProductVersionIdTo = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.displayName = 'proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    remediationEntriesList: jspb.Message.toObjectList(msg.getRemediationEntriesList(),
    proto.medcrypt.helm.web.remediations.LatestRemediationEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response;
  return proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.remediations.LatestRemediationEntry;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.LatestRemediationEntry.deserializeBinaryFromReader);
      msg.addRemediationEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getRemediationEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.medcrypt.helm.web.remediations.LatestRemediationEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated LatestRemediationEntry remediation_entries = 2;
 * @return {!Array.<!proto.medcrypt.helm.web.remediations.LatestRemediationEntry>}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.prototype.getRemediationEntriesList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.web.remediations.LatestRemediationEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.web.remediations.LatestRemediationEntry, 2));
};


/** @param {!Array.<!proto.medcrypt.helm.web.remediations.LatestRemediationEntry>} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.prototype.setRemediationEntriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.medcrypt.helm.web.remediations.LatestRemediationEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.web.remediations.LatestRemediationEntry}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.prototype.addRemediationEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.medcrypt.helm.web.remediations.LatestRemediationEntry, opt_index);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response.prototype.clearRemediationEntriesList = function() {
  this.setRemediationEntriesList([]);
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request, 1));
};


/** @param {?proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Request|undefined} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response, 2));
};


/** @param {?proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.Response|undefined} value */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.ListRemediationEntriesForProductVersion.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.web.remediations.LatestRemediationEntry.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.web.remediations.LatestRemediationEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.LatestRemediationEntry.displayName = 'proto.medcrypt.helm.web.remediations.LatestRemediationEntry';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.oneofGroups_ = [[7]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.RemediationdataCase = {
  REMEDIATIONDATA_NOT_SET: 0,
  CYCLONE_DX_DATA: 7
};

/**
 * @return {proto.medcrypt.helm.web.remediations.LatestRemediationEntry.RemediationdataCase}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getRemediationdataCase = function() {
  return /** @type {proto.medcrypt.helm.web.remediations.LatestRemediationEntry.RemediationdataCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.web.remediations.LatestRemediationEntry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.LatestRemediationEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.LatestRemediationEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    latestRemediationEntryId: (f = msg.getLatestRemediationEntryId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    dependencyIdTo: (f = msg.getDependencyIdTo()) && heim_common_pb.UUID.toObject(includeInstance, f),
    vulnerabilityAnnalIdTo: (f = msg.getVulnerabilityAnnalIdTo()) && heim_common_pb.UUID.toObject(includeInstance, f),
    cveUuid: (f = msg.getCveUuid()) && heim_common_pb.UUID.toObject(includeInstance, f),
    cveIdentifier: jspb.Message.getFieldWithDefault(msg, 5, ""),
    cdxVexInfo: (f = msg.getCdxVexInfo()) && proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.toObject(includeInstance, f),
    cycloneDxData: (f = msg.getCycloneDxData()) && proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.toObject(includeInstance, f),
    createdDate: jspb.Message.getFieldWithDefault(msg, 8, 0),
    createdBy: jspb.Message.getFieldWithDefault(msg, 9, ""),
    depName: jspb.Message.getFieldWithDefault(msg, 10, ""),
    depSupplier: jspb.Message.getFieldWithDefault(msg, 11, ""),
    depVersionFrom: jspb.Message.getFieldWithDefault(msg, 12, ""),
    depVersionTo: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.LatestRemediationEntry}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.LatestRemediationEntry;
  return proto.medcrypt.helm.web.remediations.LatestRemediationEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.LatestRemediationEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.LatestRemediationEntry}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setLatestRemediationEntryId(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setDependencyIdTo(value);
      break;
    case 3:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVulnerabilityAnnalIdTo(value);
      break;
    case 4:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setCveUuid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCveIdentifier(value);
      break;
    case 6:
      var value = new proto.medcrypt.helm.web.remediations.CycloneDxVexInfo;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.deserializeBinaryFromReader);
      msg.setCdxVexInfo(value);
      break;
    case 7:
      var value = new proto.medcrypt.helm.web.remediations.CycloneDxRemediationData;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.deserializeBinaryFromReader);
      msg.setCycloneDxData(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedDate(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedBy(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepName(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepSupplier(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepVersionFrom(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepVersionTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.LatestRemediationEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.LatestRemediationEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatestRemediationEntryId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getDependencyIdTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVulnerabilityAnnalIdTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getCveUuid();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getCveIdentifier();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCdxVexInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.medcrypt.helm.web.remediations.CycloneDxVexInfo.serializeBinaryToWriter
    );
  }
  f = message.getCycloneDxData();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.medcrypt.helm.web.remediations.CycloneDxRemediationData.serializeBinaryToWriter
    );
  }
  f = message.getCreatedDate();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getCreatedBy();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDepName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDepSupplier();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDepVersionFrom();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getDepVersionTo();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.UUID latest_remediation_entry_id = 1;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getLatestRemediationEntryId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.setLatestRemediationEntryId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.clearLatestRemediationEntryId = function() {
  this.setLatestRemediationEntryId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.hasLatestRemediationEntryId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID dependency_id_to = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getDependencyIdTo = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.setDependencyIdTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.clearDependencyIdTo = function() {
  this.setDependencyIdTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.hasDependencyIdTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID vulnerability_annal_id_to = 3;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getVulnerabilityAnnalIdTo = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 3));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.setVulnerabilityAnnalIdTo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.clearVulnerabilityAnnalIdTo = function() {
  this.setVulnerabilityAnnalIdTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.hasVulnerabilityAnnalIdTo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID cve_uuid = 4;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getCveUuid = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 4));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.setCveUuid = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.clearCveUuid = function() {
  this.setCveUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.hasCveUuid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string cve_identifier = 5;
 * @return {string}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getCveIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.setCveIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional CycloneDxVexInfo cdx_vex_info = 6;
 * @return {?proto.medcrypt.helm.web.remediations.CycloneDxVexInfo}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getCdxVexInfo = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CycloneDxVexInfo} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CycloneDxVexInfo, 6));
};


/** @param {?proto.medcrypt.helm.web.remediations.CycloneDxVexInfo|undefined} value */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.setCdxVexInfo = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.clearCdxVexInfo = function() {
  this.setCdxVexInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.hasCdxVexInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CycloneDxRemediationData cyclone_dx_data = 7;
 * @return {?proto.medcrypt.helm.web.remediations.CycloneDxRemediationData}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getCycloneDxData = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CycloneDxRemediationData} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CycloneDxRemediationData, 7));
};


/** @param {?proto.medcrypt.helm.web.remediations.CycloneDxRemediationData|undefined} value */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.setCycloneDxData = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.medcrypt.helm.web.remediations.LatestRemediationEntry.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.clearCycloneDxData = function() {
  this.setCycloneDxData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.hasCycloneDxData = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 created_date = 8;
 * @return {number}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getCreatedDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.setCreatedDate = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string created_by = 9;
 * @return {string}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getCreatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.setCreatedBy = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string dep_name = 10;
 * @return {string}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getDepName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.setDepName = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string dep_supplier = 11;
 * @return {string}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getDepSupplier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.setDepSupplier = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string dep_version_from = 12;
 * @return {string}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getDepVersionFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.setDepVersionFrom = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string dep_version_to = 13;
 * @return {string}
 */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.getDepVersionTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.medcrypt.helm.web.remediations.LatestRemediationEntry.prototype.setDepVersionTo = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.web.remediations.CopyRemediationEntries.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.web.remediations.CopyRemediationEntries, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.CopyRemediationEntries.displayName = 'proto.medcrypt.helm.web.remediations.CopyRemediationEntries';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.web.remediations.CopyRemediationEntries.PayloadCase}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.web.remediations.CopyRemediationEntries.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.web.remediations.CopyRemediationEntries.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.CopyRemediationEntries.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.CopyRemediationEntries;
  return proto.medcrypt.helm.web.remediations.CopyRemediationEntries.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.CopyRemediationEntries.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.displayName = 'proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    copyRemediationEntryList: jspb.Message.toObjectList(msg.getCopyRemediationEntryList(),
    proto.medcrypt.helm.web.remediations.CopyRemediationEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request;
  return proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.remediations.CopyRemediationEntry;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.CopyRemediationEntry.deserializeBinaryFromReader);
      msg.addCopyRemediationEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getCopyRemediationEntryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.medcrypt.helm.web.remediations.CopyRemediationEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CopyRemediationEntry copy_remediation_entry = 2;
 * @return {!Array.<!proto.medcrypt.helm.web.remediations.CopyRemediationEntry>}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.prototype.getCopyRemediationEntryList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.web.remediations.CopyRemediationEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.web.remediations.CopyRemediationEntry, 2));
};


/** @param {!Array.<!proto.medcrypt.helm.web.remediations.CopyRemediationEntry>} value */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.prototype.setCopyRemediationEntryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.medcrypt.helm.web.remediations.CopyRemediationEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.web.remediations.CopyRemediationEntry}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.prototype.addCopyRemediationEntry = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.medcrypt.helm.web.remediations.CopyRemediationEntry, opt_index);
};


proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request.prototype.clearCopyRemediationEntryList = function() {
  this.setCopyRemediationEntryList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.displayName = 'proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    remediationCreatedInfoList: jspb.Message.toObjectList(msg.getRemediationCreatedInfoList(),
    proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response;
  return proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.web.remediations.RemediationCreatedInfo;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.deserializeBinaryFromReader);
      msg.addRemediationCreatedInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getRemediationCreatedInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.medcrypt.helm.web.remediations.RemediationCreatedInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated RemediationCreatedInfo remediation_created_info = 2;
 * @return {!Array.<!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo>}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.prototype.getRemediationCreatedInfoList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.web.remediations.RemediationCreatedInfo, 2));
};


/** @param {!Array.<!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo>} value */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.prototype.setRemediationCreatedInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.web.remediations.RemediationCreatedInfo}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.prototype.addRemediationCreatedInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.medcrypt.helm.web.remediations.RemediationCreatedInfo, opt_index);
};


proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response.prototype.clearRemediationCreatedInfoList = function() {
  this.setRemediationCreatedInfoList([]);
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request, 1));
};


/** @param {?proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Request|undefined} value */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.web.remediations.CopyRemediationEntries.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.CopyRemediationEntries.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response, 2));
};


/** @param {?proto.medcrypt.helm.web.remediations.CopyRemediationEntries.Response|undefined} value */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.web.remediations.CopyRemediationEntries.oneofGroups_[0], value);
};


proto.medcrypt.helm.web.remediations.CopyRemediationEntries.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntries.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.web.remediations.CopyRemediationEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.web.remediations.CopyRemediationEntry.displayName = 'proto.medcrypt.helm.web.remediations.CopyRemediationEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.web.remediations.CopyRemediationEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.web.remediations.CopyRemediationEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    remediationTarget: (f = msg.getRemediationTarget()) && proto.medcrypt.helm.web.remediations.RemediationTarget.toObject(includeInstance, f),
    remediationEntryId: (f = msg.getRemediationEntryId()) && heim_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.web.remediations.CopyRemediationEntry}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.web.remediations.CopyRemediationEntry;
  return proto.medcrypt.helm.web.remediations.CopyRemediationEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.web.remediations.CopyRemediationEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.web.remediations.CopyRemediationEntry}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.web.remediations.RemediationTarget;
      reader.readMessage(value,proto.medcrypt.helm.web.remediations.RemediationTarget.deserializeBinaryFromReader);
      msg.setRemediationTarget(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setRemediationEntryId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.web.remediations.CopyRemediationEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.web.remediations.CopyRemediationEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemediationTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.web.remediations.RemediationTarget.serializeBinaryToWriter
    );
  }
  f = message.getRemediationEntryId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional RemediationTarget remediation_target = 1;
 * @return {?proto.medcrypt.helm.web.remediations.RemediationTarget}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntry.prototype.getRemediationTarget = function() {
  return /** @type{?proto.medcrypt.helm.web.remediations.RemediationTarget} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.web.remediations.RemediationTarget, 1));
};


/** @param {?proto.medcrypt.helm.web.remediations.RemediationTarget|undefined} value */
proto.medcrypt.helm.web.remediations.CopyRemediationEntry.prototype.setRemediationTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.web.remediations.CopyRemediationEntry.prototype.clearRemediationTarget = function() {
  this.setRemediationTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntry.prototype.hasRemediationTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID remediation_entry_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntry.prototype.getRemediationEntryId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.web.remediations.CopyRemediationEntry.prototype.setRemediationEntryId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.web.remediations.CopyRemediationEntry.prototype.clearRemediationEntryId = function() {
  this.setRemediationEntryId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.web.remediations.CopyRemediationEntry.prototype.hasRemediationEntryId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationState = {
  CDXRS_NOT_DEFINED: 0,
  CDXRS_RESOLVED: 1,
  CDXRS_RESOLVED_WITH_PEDIGREE: 2,
  CDXRS_EXPLOITABLE: 3,
  CDXRS_IN_TRIAGE: 4,
  CDXRS_FALSE_POSITIVE: 5,
  CDXRS_NOT_AFFECTED: 6
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationJustification = {
  CDXRJ_NOT_DEFINED: 0,
  CDXRJ_CODE_NOT_PRESENT: 1,
  CDXRJ_CODE_NOT_REACHABLE: 2,
  CDXRJ_REQUIRES_CONFIGURATION: 3,
  CDXRJ_REQUIRES_DEPENDENCY: 4,
  CDXRJ_REQUIRES_ENVIRONMENT: 5,
  CDXRJ_PROTECTED_BY_COMPILER: 6,
  CDXRJ_PROTECTED_AT_RUNTIME: 7,
  CDXRJ_PROTECTED_AT_PERIMETER: 8,
  CDXRJ_PROTECTED_BY_MITIGATING_CONTROL: 9
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.CycloneDxRemediationResponse = {
  CDXRR_NOT_DEFINED: 0,
  CDXRR_CAN_NOT_FIX: 1,
  CDXRR_WILL_NOT_FIX: 2,
  CDXRR_UPDATE: 3,
  CDXRR_ROLLBACK: 4,
  CDXRR_WORKAROUND_AVAILABLE: 5
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.web.remediations.CycloneDxVexStatus = {
  CDXVS_UNKNOWN: 0,
  CDXVS_UNAFFECTED: 1,
  CDXVS_AFFECTED: 2
};

goog.object.extend(exports, proto.medcrypt.helm.web.remediations);
