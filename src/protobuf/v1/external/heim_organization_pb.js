/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var heim_common_pb = require('../../heim_common_pb.js');
goog.exportSymbol('proto.medcrypt.helm.api.v1.organization.ListOrganizations', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organization.Organization', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organization.OrganizationInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organization.Organization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organization.Organization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organization.Organization.displayName = 'proto.medcrypt.helm.api.v1.organization.Organization';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organization.Organization.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organization.Organization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organization.Organization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.Organization.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    emailDomains: jspb.Message.getFieldWithDefault(msg, 3, ""),
    authConnections: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organization.Organization}
 */
proto.medcrypt.helm.api.v1.organization.Organization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organization.Organization;
  return proto.medcrypt.helm.api.v1.organization.Organization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organization.Organization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organization.Organization}
 */
proto.medcrypt.helm.api.v1.organization.Organization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmailDomains(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthConnections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organization.Organization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organization.Organization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organization.Organization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.Organization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmailDomains();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAuthConnections();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.UUID id = 1;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.organization.Organization.prototype.getId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.organization.Organization.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organization.Organization.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organization.Organization.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.organization.Organization.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.organization.Organization.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email_domains = 3;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.organization.Organization.prototype.getEmailDomains = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.organization.Organization.prototype.setEmailDomains = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string auth_connections = 4;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.organization.Organization.prototype.getAuthConnections = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.organization.Organization.prototype.setAuthConnections = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organization.OrganizationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organization.OrganizationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organization.OrganizationInfo.displayName = 'proto.medcrypt.helm.api.v1.organization.OrganizationInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organization.OrganizationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organization.OrganizationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organization.OrganizationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.OrganizationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    org: (f = msg.getOrg()) && proto.medcrypt.helm.api.v1.organization.Organization.toObject(includeInstance, f),
    isAdmin: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organization.OrganizationInfo}
 */
proto.medcrypt.helm.api.v1.organization.OrganizationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organization.OrganizationInfo;
  return proto.medcrypt.helm.api.v1.organization.OrganizationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organization.OrganizationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organization.OrganizationInfo}
 */
proto.medcrypt.helm.api.v1.organization.OrganizationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.api.v1.organization.Organization;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organization.Organization.deserializeBinaryFromReader);
      msg.setOrg(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAdmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organization.OrganizationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organization.OrganizationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organization.OrganizationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.OrganizationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrg();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.api.v1.organization.Organization.serializeBinaryToWriter
    );
  }
  f = message.getIsAdmin();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional Organization org = 1;
 * @return {?proto.medcrypt.helm.api.v1.organization.Organization}
 */
proto.medcrypt.helm.api.v1.organization.OrganizationInfo.prototype.getOrg = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organization.Organization} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organization.Organization, 1));
};


/** @param {?proto.medcrypt.helm.api.v1.organization.Organization|undefined} value */
proto.medcrypt.helm.api.v1.organization.OrganizationInfo.prototype.setOrg = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organization.OrganizationInfo.prototype.clearOrg = function() {
  this.setOrg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organization.OrganizationInfo.prototype.hasOrg = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_admin = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.organization.OrganizationInfo.prototype.getIsAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.organization.OrganizationInfo.prototype.setIsAdmin = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.api.v1.organization.ListOrganizations.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.api.v1.organization.ListOrganizations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organization.ListOrganizations.displayName = 'proto.medcrypt.helm.api.v1.organization.ListOrganizations';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.api.v1.organization.ListOrganizations.PayloadCase}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.api.v1.organization.ListOrganizations.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.api.v1.organization.ListOrganizations.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organization.ListOrganizations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organization.ListOrganizations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organization.ListOrganizations}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organization.ListOrganizations;
  return proto.medcrypt.helm.api.v1.organization.ListOrganizations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organization.ListOrganizations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organization.ListOrganizations}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organization.ListOrganizations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organization.ListOrganizations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.displayName = 'proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request;
  return proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.displayName = 'proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    orginfoList: jspb.Message.toObjectList(msg.getOrginfoList(),
    proto.medcrypt.helm.api.v1.organization.OrganizationInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response;
  return proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.organization.OrganizationInfo;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organization.OrganizationInfo.deserializeBinaryFromReader);
      msg.addOrginfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getOrginfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.organization.OrganizationInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated OrganizationInfo orgInfo = 2;
 * @return {!Array.<!proto.medcrypt.helm.api.v1.organization.OrganizationInfo>}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.prototype.getOrginfoList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.api.v1.organization.OrganizationInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.api.v1.organization.OrganizationInfo, 2));
};


/** @param {!Array.<!proto.medcrypt.helm.api.v1.organization.OrganizationInfo>} value */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.prototype.setOrginfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.medcrypt.helm.api.v1.organization.OrganizationInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.api.v1.organization.OrganizationInfo}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.prototype.addOrginfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.medcrypt.helm.api.v1.organization.OrganizationInfo, opt_index);
};


proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response.prototype.clearOrginfoList = function() {
  this.setOrginfoList([]);
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request, 1));
};


/** @param {?proto.medcrypt.helm.api.v1.organization.ListOrganizations.Request|undefined} value */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.api.v1.organization.ListOrganizations.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.organization.ListOrganizations.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response, 2));
};


/** @param {?proto.medcrypt.helm.api.v1.organization.ListOrganizations.Response|undefined} value */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.api.v1.organization.ListOrganizations.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.organization.ListOrganizations.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organization.ListOrganizations.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.displayName = 'proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.PayloadCase}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser;
  return proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.displayName = 'proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request;
  return proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.displayName = 'proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    workspaceInfoList: jspb.Message.toObjectList(msg.getWorkspaceInfoList(),
    heim_common_pb.WorkspaceInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response;
  return proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.WorkspaceInfo;
      reader.readMessage(value,heim_common_pb.WorkspaceInfo.deserializeBinaryFromReader);
      msg.addWorkspaceInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getWorkspaceInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      heim_common_pb.WorkspaceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated medcrypt.heimdall.web.common.WorkspaceInfo workspace_info = 2;
 * @return {!Array.<!proto.medcrypt.heimdall.web.common.WorkspaceInfo>}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.prototype.getWorkspaceInfoList = function() {
  return /** @type{!Array.<!proto.medcrypt.heimdall.web.common.WorkspaceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, heim_common_pb.WorkspaceInfo, 2));
};


/** @param {!Array.<!proto.medcrypt.heimdall.web.common.WorkspaceInfo>} value */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.prototype.setWorkspaceInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.medcrypt.heimdall.web.common.WorkspaceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.heimdall.web.common.WorkspaceInfo}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.prototype.addWorkspaceInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.medcrypt.heimdall.web.common.WorkspaceInfo, opt_index);
};


proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response.prototype.clearWorkspaceInfoList = function() {
  this.setWorkspaceInfoList([]);
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request, 1));
};


/** @param {?proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Request|undefined} value */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response, 2));
};


/** @param {?proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.Response|undefined} value */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organization.ListWorkspacesForUser.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.medcrypt.helm.api.v1.organization);
