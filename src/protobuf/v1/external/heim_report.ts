/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.5.1
 * source: v1/external/heim_report.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../heim_common";
import * as dependency_2 from "./../common/heim_report_components";
import * as pb_1 from "google-protobuf";
export class RequestReport extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: dependency_2.RequestReportRequest;
        response?: never;
    } | {
        request?: never;
        response?: dependency_2.RequestReportResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, dependency_2.RequestReportRequest, 1) as dependency_2.RequestReportRequest;
    }
    set request(value: dependency_2.RequestReportRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, dependency_2.RequestReportResponse, 2) as dependency_2.RequestReportResponse;
    }
    set response(value: dependency_2.RequestReportResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof dependency_2.RequestReportRequest.prototype.toObject>;
        response?: ReturnType<typeof dependency_2.RequestReportResponse.prototype.toObject>;
    }): RequestReport {
        const message = new RequestReport({});
        if (data.request != null) {
            message.request = dependency_2.RequestReportRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = dependency_2.RequestReportResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof dependency_2.RequestReportRequest.prototype.toObject>;
            response?: ReturnType<typeof dependency_2.RequestReportResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestReport {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestReport();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = dependency_2.RequestReportRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = dependency_2.RequestReportResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RequestReport {
        return RequestReport.deserialize(bytes);
    }
}
export class GetReportRequestState extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: dependency_2.GetReportRequestStateRequest;
        response?: never;
    } | {
        request?: never;
        response?: dependency_2.GetReportRequestStateResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, dependency_2.GetReportRequestStateRequest, 1) as dependency_2.GetReportRequestStateRequest;
    }
    set request(value: dependency_2.GetReportRequestStateRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, dependency_2.GetReportRequestStateResponse, 2) as dependency_2.GetReportRequestStateResponse;
    }
    set response(value: dependency_2.GetReportRequestStateResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof dependency_2.GetReportRequestStateRequest.prototype.toObject>;
        response?: ReturnType<typeof dependency_2.GetReportRequestStateResponse.prototype.toObject>;
    }): GetReportRequestState {
        const message = new GetReportRequestState({});
        if (data.request != null) {
            message.request = dependency_2.GetReportRequestStateRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = dependency_2.GetReportRequestStateResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof dependency_2.GetReportRequestStateRequest.prototype.toObject>;
            response?: ReturnType<typeof dependency_2.GetReportRequestStateResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetReportRequestState {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetReportRequestState();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = dependency_2.GetReportRequestStateRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = dependency_2.GetReportRequestStateResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetReportRequestState {
        return GetReportRequestState.deserialize(bytes);
    }
}
export class GetReportFile extends pb_1.Message {
    #one_of_decls: number[][] = [[1]];
    constructor(data?: any[] | ({} & (({
        request?: dependency_2.GetReportFileRequest;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, dependency_2.GetReportFileRequest, 1) as dependency_2.GetReportFileRequest;
    }
    set request(value: dependency_2.GetReportFileRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request";
        } = {
            0: "none",
            1: "request"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof dependency_2.GetReportFileRequest.prototype.toObject>;
    }): GetReportFile {
        const message = new GetReportFile({});
        if (data.request != null) {
            message.request = dependency_2.GetReportFileRequest.fromObject(data.request);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof dependency_2.GetReportFileRequest.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetReportFile {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetReportFile();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = dependency_2.GetReportFileRequest.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetReportFile {
        return GetReportFile.deserialize(bytes);
    }
}
