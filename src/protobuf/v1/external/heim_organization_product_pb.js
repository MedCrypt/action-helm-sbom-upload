/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var heim_common_pb = require('../../heim_common_pb.js');
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isSbomView: jspb.Message.getFieldWithDefault(msg, 3, false),
    isSbomModify: jspb.Message.getFieldWithDefault(msg, 4, false),
    isVulnView: jspb.Message.getFieldWithDefault(msg, 5, false),
    isVulnModify: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct;
  return proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSbomView(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSbomModify(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVulnView(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVulnModify(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsSbomView();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIsSbomModify();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIsVulnView();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsVulnModify();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.UUID id = 1;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.getId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_sbom_view = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.getIsSbomView = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.setIsSbomView = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool is_sbom_modify = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.getIsSbomModify = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.setIsSbomModify = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool is_vuln_view = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.getIsVulnView = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.setIsVulnView = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool is_vuln_modify = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.getIsVulnModify = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.prototype.setIsVulnModify = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.PayloadCase}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts;
  return proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    organizationId: (f = msg.getOrganizationId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    forSboms: jspb.Message.getFieldWithDefault(msg, 3, false),
    forVulns: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request;
  return proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setOrganizationId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForSboms(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForVulns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getForSboms();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getForVulns();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID organization_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.getOrganizationId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.setOrganizationId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.clearOrganizationId = function() {
  this.setOrganizationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.hasOrganizationId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool for_sboms = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.getForSboms = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.setForSboms = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool for_vulns = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.getForVulns = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request.prototype.setForVulns = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    organizationProductList: jspb.Message.toObjectList(msg.getOrganizationProductList(),
    proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response;
  return proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.deserializeBinaryFromReader);
      msg.addOrganizationProduct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationProductList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated OrganizationProduct organization_product = 2;
 * @return {!Array.<!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct>}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.prototype.getOrganizationProductList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct, 2));
};


/** @param {!Array.<!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct>} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.prototype.setOrganizationProductList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.prototype.addOrganizationProduct = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct, opt_index);
};


proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response.prototype.clearOrganizationProductList = function() {
  this.setOrganizationProductList([]);
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request, 1));
};


/** @param {?proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Request|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response, 2));
};


/** @param {?proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.Response|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProducts.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.PayloadCase}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct;
  return proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    organizationId: (f = msg.getOrganizationId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request;
  return proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setOrganizationId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID organization_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.prototype.getOrganizationId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.prototype.setOrganizationId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.prototype.clearOrganizationId = function() {
  this.setOrganizationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.prototype.hasOrganizationId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    organizationProduct: (f = msg.getOrganizationProduct()) && proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response;
  return proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.deserializeBinaryFromReader);
      msg.setOrganizationProduct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationProduct();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OrganizationProduct organization_product = 2;
 * @return {?proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.prototype.getOrganizationProduct = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct, 2));
};


/** @param {?proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProduct|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.prototype.setOrganizationProduct = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.prototype.clearOrganizationProduct = function() {
  this.setOrganizationProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response.prototype.hasOrganizationProduct = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request, 1));
};


/** @param {?proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Request|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response, 2));
};


/** @param {?proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.Response|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProduct.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    organizationProductId: (f = msg.getOrganizationProductId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    rawVersionString: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion;
  return proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setOrganizationProductId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawVersionString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationProductId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getRawVersionString();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.UUID id = 1;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.prototype.getId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID organization_product_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.prototype.getOrganizationProductId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.prototype.setOrganizationProductId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.prototype.clearOrganizationProductId = function() {
  this.setOrganizationProductId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.prototype.hasOrganizationProductId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string raw_version_string = 3;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.prototype.getRawVersionString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.prototype.setRawVersionString = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.PayloadCase}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions;
  return proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    organizationProductId: (f = msg.getOrganizationProductId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    forSboms: jspb.Message.getFieldWithDefault(msg, 3, false),
    forVulns: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request;
  return proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setOrganizationProductId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForSboms(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForVulns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationProductId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getForSboms();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getForVulns();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID organization_product_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.getOrganizationProductId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.setOrganizationProductId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.clearOrganizationProductId = function() {
  this.setOrganizationProductId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.hasOrganizationProductId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool for_sboms = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.getForSboms = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.setForSboms = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool for_vulns = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.getForVulns = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request.prototype.setForVulns = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    organizationProductVersionList: jspb.Message.toObjectList(msg.getOrganizationProductVersionList(),
    proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response;
  return proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.deserializeBinaryFromReader);
      msg.addOrganizationProductVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationProductVersionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated OrganizationProductVersion organization_product_version = 2;
 * @return {!Array.<!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion>}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.prototype.getOrganizationProductVersionList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion, 2));
};


/** @param {!Array.<!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion>} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.prototype.setOrganizationProductVersionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.prototype.addOrganizationProductVersion = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion, opt_index);
};


proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response.prototype.clearOrganizationProductVersionList = function() {
  this.setOrganizationProductVersionList([]);
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request, 1));
};


/** @param {?proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Request|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response, 2));
};


/** @param {?proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.Response|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.ListOrganizationProductVersions.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.PayloadCase}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion;
  return proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    organizationProductId: (f = msg.getOrganizationProductId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    rawVersionString: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request;
  return proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setOrganizationProductId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawVersionString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationProductId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getRawVersionString();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID organization_product_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.prototype.getOrganizationProductId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.prototype.setOrganizationProductId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.prototype.clearOrganizationProductId = function() {
  this.setOrganizationProductId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.prototype.hasOrganizationProductId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string raw_version_string = 3;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.prototype.getRawVersionString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request.prototype.setRawVersionString = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.displayName = 'proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    organizationProductVersion: (f = msg.getOrganizationProductVersion()) && proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response;
  return proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.deserializeBinaryFromReader);
      msg.setOrganizationProductVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationProductVersion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OrganizationProductVersion organization_product_version = 2;
 * @return {?proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.prototype.getOrganizationProductVersion = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion, 2));
};


/** @param {?proto.medcrypt.helm.api.v1.organizationproduct.OrganizationProductVersion|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.prototype.setOrganizationProductVersion = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.prototype.clearOrganizationProductVersion = function() {
  this.setOrganizationProductVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response.prototype.hasOrganizationProductVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request, 1));
};


/** @param {?proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Request|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response, 2));
};


/** @param {?proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.Response|undefined} value */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.organizationproduct.CreateOrganizationProductVersion.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.medcrypt.helm.api.v1.organizationproduct);
