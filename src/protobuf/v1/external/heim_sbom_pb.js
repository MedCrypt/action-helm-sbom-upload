/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var heim_common_pb = require('../../heim_common_pb.js');
var v1_common_heim_enums_pb = require('../../v1/common/heim_enums_pb.js');
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.ListSbomEntries', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.SbomEntry', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.SbomEntry.PurlSource', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.SbomEntry.State', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.SbomEntry.Status', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.SbomFileType', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.SubmitSbom', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.displayName = 'proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.toObject = function(includeInstance, msg) {
  var f, obj = {
    nameMatch: jspb.Message.getFieldWithDefault(msg, 1, false),
    purlMatch: jspb.Message.getFieldWithDefault(msg, 2, false),
    cpeMatch: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes}
 */
proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes;
  return proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes}
 */
proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNameMatch(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPurlMatch(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCpeMatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNameMatch();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPurlMatch();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCpeMatch();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool name_match = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.prototype.getNameMatch = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.prototype.setNameMatch = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool purl_match = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.prototype.getPurlMatch = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.prototype.setPurlMatch = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool cpe_match = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.prototype.getCpeMatch = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.prototype.setCpeMatch = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.api.v1.sbom.SubmitSbom.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.api.v1.sbom.SubmitSbom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.sbom.SubmitSbom.displayName = 'proto.medcrypt.helm.api.v1.sbom.SubmitSbom';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.api.v1.sbom.SubmitSbom.PayloadCase}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.api.v1.sbom.SubmitSbom.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.api.v1.sbom.SubmitSbom.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.sbom.SubmitSbom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.sbom.SubmitSbom;
  return proto.medcrypt.helm.api.v1.sbom.SubmitSbom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.sbom.SubmitSbom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.displayName = 'proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    organizationProductVersionId: (f = msg.getOrganizationProductVersionId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    fileName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fileContents: msg.getFileContents_asB64(),
    fileType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    s3FileName: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request;
  return proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setOrganizationProductVersionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFileContents(value);
      break;
    case 5:
      var value = /** @type {!proto.medcrypt.helm.api.v1.sbom.SbomFileType} */ (reader.readEnum());
      msg.setFileType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3FileName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationProductVersionId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFileContents_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getFileType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getS3FileName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID organization_product_version_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.getOrganizationProductVersionId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.setOrganizationProductVersionId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.clearOrganizationProductVersionId = function() {
  this.setOrganizationProductVersionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.hasOrganizationProductVersionId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string file_name = 3;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.setFileName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes file_contents = 4;
 * @return {!(string|Uint8Array)}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.getFileContents = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes file_contents = 4;
 * This is a type-conversion wrapper around `getFileContents()`
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.getFileContents_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFileContents()));
};


/**
 * optional bytes file_contents = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFileContents()`
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.getFileContents_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFileContents()));
};


/** @param {!(string|Uint8Array)} value */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.setFileContents = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional SbomFileType file_type = 5;
 * @return {!proto.medcrypt.helm.api.v1.sbom.SbomFileType}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.getFileType = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.sbom.SbomFileType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.sbom.SbomFileType} value */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.setFileType = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string s3_file_name = 6;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.getS3FileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request.prototype.setS3FileName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.displayName = 'proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response;
  return proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request, 1));
};


/** @param {?proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Request|undefined} value */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.api.v1.sbom.SubmitSbom.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.sbom.SubmitSbom.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response, 2));
};


/** @param {?proto.medcrypt.helm.api.v1.sbom.SubmitSbom.Response|undefined} value */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.api.v1.sbom.SubmitSbom.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.sbom.SubmitSbom.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.SubmitSbom.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.displayName = 'proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.PayloadCase}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl;
  return proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.displayName = 'proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    s3FileName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request;
  return proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3FileName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getS3FileName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string s3_file_name = 2;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.prototype.getS3FileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request.prototype.setS3FileName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.displayName = 'proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    s3PreSignedUrl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response;
  return proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3PreSignedUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getS3PreSignedUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string s3_pre_signed_url = 2;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.prototype.getS3PreSignedUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response.prototype.setS3PreSignedUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request, 1));
};


/** @param {?proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Request|undefined} value */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response, 2));
};


/** @param {?proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.Response|undefined} value */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.GetS3PreSignedUrl.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.sbom.SbomEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.sbom.SbomEntry.displayName = 'proto.medcrypt.helm.api.v1.sbom.SbomEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.sbom.SbomEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.sbom.SbomEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    sbomEntryId: (f = msg.getSbomEntryId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    sbomEntryName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sbomEntryState: jspb.Message.getFieldWithDefault(msg, 3, 0),
    vendorId: (f = msg.getVendorId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    vendorDisplayName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    productId: (f = msg.getProductId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    productDisplayName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    productVersionString: jspb.Message.getFieldWithDefault(msg, 8, ""),
    rawProductVersionString: jspb.Message.getFieldWithDefault(msg, 9, ""),
    sbomVersionOverridden: jspb.Message.getFieldWithDefault(msg, 10, false),
    sbomVersionCreatedBy: jspb.Message.getFieldWithDefault(msg, 11, ""),
    dependencyId: (f = msg.getDependencyId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    matchType: jspb.Message.getFieldWithDefault(msg, 13, 0),
    reviewStatus: jspb.Message.getFieldWithDefault(msg, 14, 0),
    status: jspb.Message.getFieldWithDefault(msg, 15, 0),
    purlSource: jspb.Message.getFieldWithDefault(msg, 16, 0),
    matchDataTypes: (f = msg.getMatchDataTypes()) && proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.toObject(includeInstance, f),
    rawPurl: jspb.Message.getFieldWithDefault(msg, 18, ""),
    rawCpe: jspb.Message.getFieldWithDefault(msg, 19, ""),
    rawPart: jspb.Message.getFieldWithDefault(msg, 20, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.sbom.SbomEntry}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.sbom.SbomEntry;
  return proto.medcrypt.helm.api.v1.sbom.SbomEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.sbom.SbomEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.sbom.SbomEntry}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setSbomEntryId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSbomEntryName(value);
      break;
    case 3:
      var value = /** @type {!proto.medcrypt.helm.api.v1.sbom.SbomEntry.State} */ (reader.readEnum());
      msg.setSbomEntryState(value);
      break;
    case 4:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVendorId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendorDisplayName(value);
      break;
    case 6:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setProductId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductDisplayName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductVersionString(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawProductVersionString(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSbomVersionOverridden(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSbomVersionCreatedBy(value);
      break;
    case 12:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setDependencyId(value);
      break;
    case 13:
      var value = /** @type {!proto.medcrypt.helm.web.enums.ProductMatchType} */ (reader.readEnum());
      msg.setMatchType(value);
      break;
    case 14:
      var value = /** @type {!proto.medcrypt.helm.web.enums.ReviewStatus} */ (reader.readEnum());
      msg.setReviewStatus(value);
      break;
    case 15:
      var value = /** @type {!proto.medcrypt.helm.api.v1.sbom.SbomEntry.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 16:
      var value = /** @type {!proto.medcrypt.helm.api.v1.sbom.SbomEntry.PurlSource} */ (reader.readEnum());
      msg.setPurlSource(value);
      break;
    case 17:
      var value = new proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.deserializeBinaryFromReader);
      msg.setMatchDataTypes(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawPurl(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawCpe(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawPart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.sbom.SbomEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.sbom.SbomEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSbomEntryId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getSbomEntryName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSbomEntryState();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getVendorId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVendorDisplayName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getProductId();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getProductDisplayName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getProductVersionString();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRawProductVersionString();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSbomVersionOverridden();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSbomVersionCreatedBy();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDependencyId();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getMatchType();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getReviewStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = message.getPurlSource();
  if (f !== 0.0) {
    writer.writeEnum(
      16,
      f
    );
  }
  f = message.getMatchDataTypes();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes.serializeBinaryToWriter
    );
  }
  f = message.getRawPurl();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getRawCpe();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getRawPart();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.State = {
  NEW_SBOM_ENTRY: 0,
  SBOM_ENTRY_RESET: 1,
  VENDOR_MATCH_PRODUCT_ALIAS: 2,
  VENDOR_UNMATCHED_PRODUCT_ALIAS: 3,
  VENDOR_MATCH_ORG_ALIAS: 4,
  VENDOR_UNMATCHED_ORG_ALIAS: 5,
  VENDOR_MATCH_GLOBAL_ALIAS: 6,
  VENDOR_UNMATCHED_GLOBAL_ALIAS: 7,
  VENDOR_MATCH_UNIQUE_KEY: 8,
  VENDOR_UNMATCHED_UNIQUE_KEY: 9,
  VENDOR_HAVE_POSSIBLE_MATCHES_PRODUCT_ALIAS: 10,
  VENDOR_HAVE_POSSIBLE_MATCHES_ORG_ALIAS: 11,
  VENDOR_HAVE_POSSIBLE_MATCHES_GLOBAL_ALIAS: 12,
  VENDOR_HAVE_POSSIBLE_MATCHES_UNIQUE_KEY: 13,
  PRODUCT_WITH_VENDORS_MATCH_PRODUCT_ALIAS: 14,
  PRODUCT_WITH_VENDORS_UNMATCHED_PRODUCT_ALIAS: 15,
  PRODUCT_WITH_VENDORS_MATCH_ORG_ALIAS: 16,
  PRODUCT_WITH_VENDORS_UNMATCHED_ORG_ALIAS: 17,
  PRODUCT_WITH_VENDORS_MATCH_GLOBAL_ALIAS: 18,
  PRODUCT_WITH_VENDORS_UNMATCHED_GLOBAL_ALIAS: 19,
  PRODUCT_WITH_VENDORS_MATCH_UNIQUE_KEY: 20,
  PRODUCT_WITH_VENDORS_UNMATCHED_UNIQUE_KEY: 21,
  PRODUCT_WO_VENDORS_MATCH_PRODUCT_ALIAS: 22,
  PRODUCT_WO_VENDORS_UNMATCHED_PRODUCT_ALIAS: 23,
  PRODUCT_WO_VENDORS_MATCH_ORG_ALIAS: 24,
  PRODUCT_WO_VENDORS_UNMATCHED_ORG_ALIAS: 25,
  PRODUCT_WO_VENDORS_MATCH_GLOBAL_ALIAS: 26,
  PRODUCT_WO_VENDORS_UNMATCHED_GLOBAL_ALIAS: 27,
  PRODUCT_WO_VENDORS_MATCH_UNIQUE_KEY: 28,
  PRODUCT_WO_VENDORS_UNMATCHED_UNIQUE_KEY: 29,
  PRODUCT_POSSIBLE_MATCHES_WITH_VENDOR: 30,
  PRODUCT_POSSIBLE_MATCHES_WO_VENDOR: 31,
  ONE_PRODUCT_MATCH_WITH_VENDOR_MATCH: 32,
  ONE_PRODUCT_MATCH_WO_VENDOR_MATCH: 33,
  ONE_PRODUCT_MATCH_NO_VENDOR_PROVIDED: 34,
  USER_SELECTED_PRODUCT_MATCH: 35,
  RESCAN_REQUESTED: 36,
  PRODUCT_MATCHED: 37,
  NO_VERSION_PARSER_SET: 38,
  VERSION_REPARSE_REQUESTED: 39,
  HAS_PARSER: 40,
  VERSION_PARSE_ERROR: 41,
  VERSION_PARSED: 42,
  PRODUCT_VERSION_NOT_FOUND: 43,
  NEW_PRODUCT_VERSION_CREATED: 44,
  HAVE_PRODUCT_VERSION: 45,
  SBOM_ENTRY_LINKED_TO_PRODUCT_VERSION: 46,
  FAILED: 47,
  ONE_PRODUCT_MATCH_BY_USER: 48
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.Status = {
  LIVE: 0,
  ARCHIVED: 1
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.PurlSource = {
  NONE: 0,
  NUGET: 3,
  PYPI: 4,
  NPM: 5,
  CARGO: 6
};

/**
 * optional medcrypt.heimdall.web.common.UUID sbom_entry_id = 1;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getSbomEntryId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setSbomEntryId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.clearSbomEntryId = function() {
  this.setSbomEntryId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.hasSbomEntryId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string sbom_entry_name = 2;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getSbomEntryName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setSbomEntryName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional State sbom_entry_state = 3;
 * @return {!proto.medcrypt.helm.api.v1.sbom.SbomEntry.State}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getSbomEntryState = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.sbom.SbomEntry.State} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.sbom.SbomEntry.State} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setSbomEntryState = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional medcrypt.heimdall.web.common.UUID vendor_id = 4;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getVendorId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 4));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setVendorId = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.clearVendorId = function() {
  this.setVendorId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.hasVendorId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string vendor_display_name = 5;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getVendorDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setVendorDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional medcrypt.heimdall.web.common.UUID product_id = 6;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getProductId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 6));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setProductId = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.clearProductId = function() {
  this.setProductId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.hasProductId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string product_display_name = 7;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getProductDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setProductDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string product_version_string = 8;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getProductVersionString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setProductVersionString = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string raw_product_version_string = 9;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getRawProductVersionString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setRawProductVersionString = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool sbom_version_overridden = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getSbomVersionOverridden = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setSbomVersionOverridden = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string sbom_version_created_by = 11;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getSbomVersionCreatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setSbomVersionCreatedBy = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional medcrypt.heimdall.web.common.UUID dependency_id = 12;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getDependencyId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 12));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setDependencyId = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.clearDependencyId = function() {
  this.setDependencyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.hasDependencyId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional medcrypt.helm.web.enums.ProductMatchType match_type = 13;
 * @return {!proto.medcrypt.helm.web.enums.ProductMatchType}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getMatchType = function() {
  return /** @type {!proto.medcrypt.helm.web.enums.ProductMatchType} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.medcrypt.helm.web.enums.ProductMatchType} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setMatchType = function(value) {
  jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional medcrypt.helm.web.enums.ReviewStatus review_status = 14;
 * @return {!proto.medcrypt.helm.web.enums.ReviewStatus}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getReviewStatus = function() {
  return /** @type {!proto.medcrypt.helm.web.enums.ReviewStatus} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {!proto.medcrypt.helm.web.enums.ReviewStatus} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setReviewStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional Status status = 15;
 * @return {!proto.medcrypt.helm.api.v1.sbom.SbomEntry.Status}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getStatus = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.sbom.SbomEntry.Status} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.sbom.SbomEntry.Status} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 15, value);
};


/**
 * optional PurlSource purl_source = 16;
 * @return {!proto.medcrypt.helm.api.v1.sbom.SbomEntry.PurlSource}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getPurlSource = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.sbom.SbomEntry.PurlSource} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.sbom.SbomEntry.PurlSource} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setPurlSource = function(value) {
  jspb.Message.setProto3EnumField(this, 16, value);
};


/**
 * optional ProductMatchDataTypes match_data_types = 17;
 * @return {?proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getMatchDataTypes = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes, 17));
};


/** @param {?proto.medcrypt.helm.api.v1.sbom.ProductMatchDataTypes|undefined} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setMatchDataTypes = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.clearMatchDataTypes = function() {
  this.setMatchDataTypes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.hasMatchDataTypes = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string raw_purl = 18;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getRawPurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setRawPurl = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string raw_cpe = 19;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getRawCpe = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setRawCpe = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string raw_part = 20;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.getRawPart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntry.prototype.setRawPart = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.displayName = 'proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    searchString: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter;
  return proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearchString();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string search_string = 1;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.prototype.getSearchString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.prototype.setSearchString = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.api.v1.sbom.ListSbomEntries, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.displayName = 'proto.medcrypt.helm.api.v1.sbom.ListSbomEntries';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.PayloadCase}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.sbom.ListSbomEntries;
  return proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.displayName = 'proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.RequestMetadata.toObject(includeInstance, f),
    organizationProductVersionId: (f = msg.getOrganizationProductVersionId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    page: (f = msg.getPage()) && heim_common_pb.Page.toObject(includeInstance, f),
    filter: (f = msg.getFilter()) && proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.toObject(includeInstance, f),
    orderList: jspb.Message.toObjectList(msg.getOrderList(),
    heim_common_pb.SbomEntryOrder.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request;
  return proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.RequestMetadata;
      reader.readMessage(value,heim_common_pb.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setOrganizationProductVersionId(value);
      break;
    case 3:
      var value = new heim_common_pb.Page;
      reader.readMessage(value,heim_common_pb.Page.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    case 4:
      var value = new proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 5:
      var value = new heim_common_pb.SbomEntryOrder;
      reader.readMessage(value,heim_common_pb.SbomEntryOrder.deserializeBinaryFromReader);
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationProductVersionId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      heim_common_pb.Page.serializeBinaryToWriter
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter.serializeBinaryToWriter
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      heim_common_pb.SbomEntryOrder.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.RequestMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.RequestMetadata}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.RequestMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.RequestMetadata|undefined} value */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID organization_product_version_id = 2;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.getOrganizationProductVersionId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 2));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.setOrganizationProductVersionId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.clearOrganizationProductVersionId = function() {
  this.setOrganizationProductVersionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.hasOrganizationProductVersionId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional medcrypt.heimdall.web.common.Page page = 3;
 * @return {?proto.medcrypt.heimdall.web.common.Page}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.getPage = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.Page} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.Page, 3));
};


/** @param {?proto.medcrypt.heimdall.web.common.Page|undefined} value */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.setPage = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.hasPage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SbomEntryFilter filter = 4;
 * @return {?proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.getFilter = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter, 4));
};


/** @param {?proto.medcrypt.helm.api.v1.sbom.SbomEntryFilter|undefined} value */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated medcrypt.heimdall.web.common.SbomEntryOrder order = 5;
 * @return {!Array.<!proto.medcrypt.heimdall.web.common.SbomEntryOrder>}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.getOrderList = function() {
  return /** @type{!Array.<!proto.medcrypt.heimdall.web.common.SbomEntryOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, heim_common_pb.SbomEntryOrder, 5));
};


/** @param {!Array.<!proto.medcrypt.heimdall.web.common.SbomEntryOrder>} value */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.setOrderList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.medcrypt.heimdall.web.common.SbomEntryOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.heimdall.web.common.SbomEntryOrder}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.addOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.medcrypt.heimdall.web.common.SbomEntryOrder, opt_index);
};


proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.displayName = 'proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    sbomEntryList: jspb.Message.toObjectList(msg.getSbomEntryList(),
    proto.medcrypt.helm.api.v1.sbom.SbomEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response;
  return proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.sbom.SbomEntry;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.sbom.SbomEntry.deserializeBinaryFromReader);
      msg.addSbomEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getSbomEntryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.sbom.SbomEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SbomEntry sbom_entry = 2;
 * @return {!Array.<!proto.medcrypt.helm.api.v1.sbom.SbomEntry>}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.prototype.getSbomEntryList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.api.v1.sbom.SbomEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.api.v1.sbom.SbomEntry, 2));
};


/** @param {!Array.<!proto.medcrypt.helm.api.v1.sbom.SbomEntry>} value */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.prototype.setSbomEntryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.medcrypt.helm.api.v1.sbom.SbomEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.api.v1.sbom.SbomEntry}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.prototype.addSbomEntry = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.medcrypt.helm.api.v1.sbom.SbomEntry, opt_index);
};


proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response.prototype.clearSbomEntryList = function() {
  this.setSbomEntryList([]);
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request, 1));
};


/** @param {?proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Request|undefined} value */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response, 2));
};


/** @param {?proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.Response|undefined} value */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.sbom.ListSbomEntries.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.sbom.SbomFileType = {
  CYCLONE_DX: 0,
  SPDX: 1
};

goog.object.extend(exports, proto.medcrypt.helm.api.v1.sbom);
