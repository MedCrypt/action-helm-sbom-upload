/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.5.1
 * source: v1/external/heim_organization_product.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../heim_common";
import * as pb_1 from "google-protobuf";
export class OrganizationProduct extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: dependency_1.UUID;
        name?: string;
        isSbomView?: boolean;
        isSbomModify?: boolean;
        isVulnView?: boolean;
        isVulnModify?: boolean;
        workspaceId?: dependency_1.UUID;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("isSbomView" in data && data.isSbomView != undefined) {
                this.isSbomView = data.isSbomView;
            }
            if ("isSbomModify" in data && data.isSbomModify != undefined) {
                this.isSbomModify = data.isSbomModify;
            }
            if ("isVulnView" in data && data.isVulnView != undefined) {
                this.isVulnView = data.isVulnView;
            }
            if ("isVulnModify" in data && data.isVulnModify != undefined) {
                this.isVulnModify = data.isVulnModify;
            }
            if ("workspaceId" in data && data.workspaceId != undefined) {
                this.workspaceId = data.workspaceId;
            }
        }
    }
    get id() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 1) as dependency_1.UUID;
    }
    set id(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get isSbomView() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set isSbomView(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get isSbomModify() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set isSbomModify(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get isVulnView() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set isVulnView(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get isVulnModify() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set isVulnModify(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get workspaceId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 7) as dependency_1.UUID;
    }
    set workspaceId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get hasWorkspaceId() {
        return pb_1.Message.getField(this, 7) != null;
    }
    static fromObject(data: {
        id?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        name?: string;
        isSbomView?: boolean;
        isSbomModify?: boolean;
        isVulnView?: boolean;
        isVulnModify?: boolean;
        workspaceId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
    }): OrganizationProduct {
        const message = new OrganizationProduct({});
        if (data.id != null) {
            message.id = dependency_1.UUID.fromObject(data.id);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.isSbomView != null) {
            message.isSbomView = data.isSbomView;
        }
        if (data.isSbomModify != null) {
            message.isSbomModify = data.isSbomModify;
        }
        if (data.isVulnView != null) {
            message.isVulnView = data.isVulnView;
        }
        if (data.isVulnModify != null) {
            message.isVulnModify = data.isVulnModify;
        }
        if (data.workspaceId != null) {
            message.workspaceId = dependency_1.UUID.fromObject(data.workspaceId);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            name?: string;
            isSbomView?: boolean;
            isSbomModify?: boolean;
            isVulnView?: boolean;
            isVulnModify?: boolean;
            workspaceId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.isSbomView != null) {
            data.isSbomView = this.isSbomView;
        }
        if (this.isSbomModify != null) {
            data.isSbomModify = this.isSbomModify;
        }
        if (this.isVulnView != null) {
            data.isVulnView = this.isVulnView;
        }
        if (this.isVulnModify != null) {
            data.isVulnModify = this.isVulnModify;
        }
        if (this.workspaceId != null) {
            data.workspaceId = this.workspaceId.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasId)
            writer.writeMessage(1, this.id, () => this.id.serialize(writer));
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.isSbomView != false)
            writer.writeBool(3, this.isSbomView);
        if (this.isSbomModify != false)
            writer.writeBool(4, this.isSbomModify);
        if (this.isVulnView != false)
            writer.writeBool(5, this.isVulnView);
        if (this.isVulnModify != false)
            writer.writeBool(6, this.isVulnModify);
        if (this.hasWorkspaceId)
            writer.writeMessage(7, this.workspaceId, () => this.workspaceId.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrganizationProduct {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrganizationProduct();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.id, () => message.id = dependency_1.UUID.deserialize(reader));
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.isSbomView = reader.readBool();
                    break;
                case 4:
                    message.isSbomModify = reader.readBool();
                    break;
                case 5:
                    message.isVulnView = reader.readBool();
                    break;
                case 6:
                    message.isVulnModify = reader.readBool();
                    break;
                case 7:
                    reader.readMessage(message.workspaceId, () => message.workspaceId = dependency_1.UUID.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OrganizationProduct {
        return OrganizationProduct.deserialize(bytes);
    }
}
export class ListOrganizationProducts extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: ListOrganizationProductsRequest;
        response?: never;
    } | {
        request?: never;
        response?: ListOrganizationProductsResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, ListOrganizationProductsRequest, 1) as ListOrganizationProductsRequest;
    }
    set request(value: ListOrganizationProductsRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, ListOrganizationProductsResponse, 2) as ListOrganizationProductsResponse;
    }
    set response(value: ListOrganizationProductsResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof ListOrganizationProductsRequest.prototype.toObject>;
        response?: ReturnType<typeof ListOrganizationProductsResponse.prototype.toObject>;
    }): ListOrganizationProducts {
        const message = new ListOrganizationProducts({});
        if (data.request != null) {
            message.request = ListOrganizationProductsRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = ListOrganizationProductsResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof ListOrganizationProductsRequest.prototype.toObject>;
            response?: ReturnType<typeof ListOrganizationProductsResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListOrganizationProducts {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListOrganizationProducts();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = ListOrganizationProductsRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = ListOrganizationProductsResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListOrganizationProducts {
        return ListOrganizationProducts.deserialize(bytes);
    }
}
export class ListOrganizationProductsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
        organizationId?: dependency_1.UUID;
        forSboms?: boolean;
        forVulns?: boolean;
        workspaceId?: dependency_1.UUID;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("organizationId" in data && data.organizationId != undefined) {
                this.organizationId = data.organizationId;
            }
            if ("forSboms" in data && data.forSboms != undefined) {
                this.forSboms = data.forSboms;
            }
            if ("forVulns" in data && data.forVulns != undefined) {
                this.forVulns = data.forVulns;
            }
            if ("workspaceId" in data && data.workspaceId != undefined) {
                this.workspaceId = data.workspaceId;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get organizationId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set organizationId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasOrganizationId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get forSboms() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set forSboms(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get forVulns() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set forVulns(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get workspaceId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 5) as dependency_1.UUID;
    }
    set workspaceId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasWorkspaceId() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        organizationId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        forSboms?: boolean;
        forVulns?: boolean;
        workspaceId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
    }): ListOrganizationProductsRequest {
        const message = new ListOrganizationProductsRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.organizationId != null) {
            message.organizationId = dependency_1.UUID.fromObject(data.organizationId);
        }
        if (data.forSboms != null) {
            message.forSboms = data.forSboms;
        }
        if (data.forVulns != null) {
            message.forVulns = data.forVulns;
        }
        if (data.workspaceId != null) {
            message.workspaceId = dependency_1.UUID.fromObject(data.workspaceId);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            organizationId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            forSboms?: boolean;
            forVulns?: boolean;
            workspaceId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.organizationId != null) {
            data.organizationId = this.organizationId.toObject();
        }
        if (this.forSboms != null) {
            data.forSboms = this.forSboms;
        }
        if (this.forVulns != null) {
            data.forVulns = this.forVulns;
        }
        if (this.workspaceId != null) {
            data.workspaceId = this.workspaceId.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasOrganizationId)
            writer.writeMessage(2, this.organizationId, () => this.organizationId.serialize(writer));
        if (this.forSboms != false)
            writer.writeBool(3, this.forSboms);
        if (this.forVulns != false)
            writer.writeBool(4, this.forVulns);
        if (this.hasWorkspaceId)
            writer.writeMessage(5, this.workspaceId, () => this.workspaceId.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListOrganizationProductsRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListOrganizationProductsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.organizationId, () => message.organizationId = dependency_1.UUID.deserialize(reader));
                    break;
                case 3:
                    message.forSboms = reader.readBool();
                    break;
                case 4:
                    message.forVulns = reader.readBool();
                    break;
                case 5:
                    reader.readMessage(message.workspaceId, () => message.workspaceId = dependency_1.UUID.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListOrganizationProductsRequest {
        return ListOrganizationProductsRequest.deserialize(bytes);
    }
}
export class ListOrganizationProductsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        organizationProduct?: OrganizationProduct[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("organizationProduct" in data && data.organizationProduct != undefined) {
                this.organizationProduct = data.organizationProduct;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get organizationProduct() {
        return pb_1.Message.getRepeatedWrapperField(this, OrganizationProduct, 2) as OrganizationProduct[];
    }
    set organizationProduct(value: OrganizationProduct[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        organizationProduct?: ReturnType<typeof OrganizationProduct.prototype.toObject>[];
    }): ListOrganizationProductsResponse {
        const message = new ListOrganizationProductsResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.organizationProduct != null) {
            message.organizationProduct = data.organizationProduct.map(item => OrganizationProduct.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            organizationProduct?: ReturnType<typeof OrganizationProduct.prototype.toObject>[];
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.organizationProduct != null) {
            data.organizationProduct = this.organizationProduct.map((item: OrganizationProduct) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.organizationProduct.length)
            writer.writeRepeatedMessage(2, this.organizationProduct, (item: OrganizationProduct) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListOrganizationProductsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListOrganizationProductsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.organizationProduct, () => pb_1.Message.addToRepeatedWrapperField(message, 2, OrganizationProduct.deserialize(reader), OrganizationProduct));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListOrganizationProductsResponse {
        return ListOrganizationProductsResponse.deserialize(bytes);
    }
}
export class CreateOrganizationProduct extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: CreateOrganizationProductRequest;
        response?: never;
    } | {
        request?: never;
        response?: CreateOrganizationProductResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, CreateOrganizationProductRequest, 1) as CreateOrganizationProductRequest;
    }
    set request(value: CreateOrganizationProductRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, CreateOrganizationProductResponse, 2) as CreateOrganizationProductResponse;
    }
    set response(value: CreateOrganizationProductResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof CreateOrganizationProductRequest.prototype.toObject>;
        response?: ReturnType<typeof CreateOrganizationProductResponse.prototype.toObject>;
    }): CreateOrganizationProduct {
        const message = new CreateOrganizationProduct({});
        if (data.request != null) {
            message.request = CreateOrganizationProductRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = CreateOrganizationProductResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof CreateOrganizationProductRequest.prototype.toObject>;
            response?: ReturnType<typeof CreateOrganizationProductResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOrganizationProduct {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOrganizationProduct();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = CreateOrganizationProductRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = CreateOrganizationProductResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateOrganizationProduct {
        return CreateOrganizationProduct.deserialize(bytes);
    }
}
export class CreateOrganizationProductRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
        organizationId?: dependency_1.UUID;
        name?: string;
        workspaceId?: dependency_1.UUID;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("organizationId" in data && data.organizationId != undefined) {
                this.organizationId = data.organizationId;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("workspaceId" in data && data.workspaceId != undefined) {
                this.workspaceId = data.workspaceId;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get organizationId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set organizationId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasOrganizationId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get workspaceId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 4) as dependency_1.UUID;
    }
    set workspaceId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasWorkspaceId() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        organizationId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        name?: string;
        workspaceId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
    }): CreateOrganizationProductRequest {
        const message = new CreateOrganizationProductRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.organizationId != null) {
            message.organizationId = dependency_1.UUID.fromObject(data.organizationId);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.workspaceId != null) {
            message.workspaceId = dependency_1.UUID.fromObject(data.workspaceId);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            organizationId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            name?: string;
            workspaceId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.organizationId != null) {
            data.organizationId = this.organizationId.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.workspaceId != null) {
            data.workspaceId = this.workspaceId.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasOrganizationId)
            writer.writeMessage(2, this.organizationId, () => this.organizationId.serialize(writer));
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.hasWorkspaceId)
            writer.writeMessage(4, this.workspaceId, () => this.workspaceId.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOrganizationProductRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOrganizationProductRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.organizationId, () => message.organizationId = dependency_1.UUID.deserialize(reader));
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.workspaceId, () => message.workspaceId = dependency_1.UUID.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateOrganizationProductRequest {
        return CreateOrganizationProductRequest.deserialize(bytes);
    }
}
export class CreateOrganizationProductResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        organizationProduct?: OrganizationProduct;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("organizationProduct" in data && data.organizationProduct != undefined) {
                this.organizationProduct = data.organizationProduct;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get organizationProduct() {
        return pb_1.Message.getWrapperField(this, OrganizationProduct, 2) as OrganizationProduct;
    }
    set organizationProduct(value: OrganizationProduct) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasOrganizationProduct() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        organizationProduct?: ReturnType<typeof OrganizationProduct.prototype.toObject>;
    }): CreateOrganizationProductResponse {
        const message = new CreateOrganizationProductResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.organizationProduct != null) {
            message.organizationProduct = OrganizationProduct.fromObject(data.organizationProduct);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            organizationProduct?: ReturnType<typeof OrganizationProduct.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.organizationProduct != null) {
            data.organizationProduct = this.organizationProduct.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasOrganizationProduct)
            writer.writeMessage(2, this.organizationProduct, () => this.organizationProduct.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOrganizationProductResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOrganizationProductResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.organizationProduct, () => message.organizationProduct = OrganizationProduct.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateOrganizationProductResponse {
        return CreateOrganizationProductResponse.deserialize(bytes);
    }
}
export class OrganizationProductVersion extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: dependency_1.UUID;
        organizationProductId?: dependency_1.UUID;
        rawVersionString?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("organizationProductId" in data && data.organizationProductId != undefined) {
                this.organizationProductId = data.organizationProductId;
            }
            if ("rawVersionString" in data && data.rawVersionString != undefined) {
                this.rawVersionString = data.rawVersionString;
            }
        }
    }
    get id() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 1) as dependency_1.UUID;
    }
    set id(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get organizationProductId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set organizationProductId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasOrganizationProductId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get rawVersionString() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set rawVersionString(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        id?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        organizationProductId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        rawVersionString?: string;
    }): OrganizationProductVersion {
        const message = new OrganizationProductVersion({});
        if (data.id != null) {
            message.id = dependency_1.UUID.fromObject(data.id);
        }
        if (data.organizationProductId != null) {
            message.organizationProductId = dependency_1.UUID.fromObject(data.organizationProductId);
        }
        if (data.rawVersionString != null) {
            message.rawVersionString = data.rawVersionString;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            organizationProductId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            rawVersionString?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id.toObject();
        }
        if (this.organizationProductId != null) {
            data.organizationProductId = this.organizationProductId.toObject();
        }
        if (this.rawVersionString != null) {
            data.rawVersionString = this.rawVersionString;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasId)
            writer.writeMessage(1, this.id, () => this.id.serialize(writer));
        if (this.hasOrganizationProductId)
            writer.writeMessage(2, this.organizationProductId, () => this.organizationProductId.serialize(writer));
        if (this.rawVersionString.length)
            writer.writeString(3, this.rawVersionString);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrganizationProductVersion {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrganizationProductVersion();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.id, () => message.id = dependency_1.UUID.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.organizationProductId, () => message.organizationProductId = dependency_1.UUID.deserialize(reader));
                    break;
                case 3:
                    message.rawVersionString = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OrganizationProductVersion {
        return OrganizationProductVersion.deserialize(bytes);
    }
}
export class ListOrganizationProductVersions extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: ListOrganizationProductVersionsRequest;
        response?: never;
    } | {
        request?: never;
        response?: ListOrganizationProductVersionsResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, ListOrganizationProductVersionsRequest, 1) as ListOrganizationProductVersionsRequest;
    }
    set request(value: ListOrganizationProductVersionsRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, ListOrganizationProductVersionsResponse, 2) as ListOrganizationProductVersionsResponse;
    }
    set response(value: ListOrganizationProductVersionsResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof ListOrganizationProductVersionsRequest.prototype.toObject>;
        response?: ReturnType<typeof ListOrganizationProductVersionsResponse.prototype.toObject>;
    }): ListOrganizationProductVersions {
        const message = new ListOrganizationProductVersions({});
        if (data.request != null) {
            message.request = ListOrganizationProductVersionsRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = ListOrganizationProductVersionsResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof ListOrganizationProductVersionsRequest.prototype.toObject>;
            response?: ReturnType<typeof ListOrganizationProductVersionsResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListOrganizationProductVersions {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListOrganizationProductVersions();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = ListOrganizationProductVersionsRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = ListOrganizationProductVersionsResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListOrganizationProductVersions {
        return ListOrganizationProductVersions.deserialize(bytes);
    }
}
export class ListOrganizationProductVersionsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
        organizationProductId?: dependency_1.UUID;
        forSboms?: boolean;
        forVulns?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("organizationProductId" in data && data.organizationProductId != undefined) {
                this.organizationProductId = data.organizationProductId;
            }
            if ("forSboms" in data && data.forSboms != undefined) {
                this.forSboms = data.forSboms;
            }
            if ("forVulns" in data && data.forVulns != undefined) {
                this.forVulns = data.forVulns;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get organizationProductId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set organizationProductId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasOrganizationProductId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get forSboms() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set forSboms(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get forVulns() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set forVulns(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        organizationProductId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        forSboms?: boolean;
        forVulns?: boolean;
    }): ListOrganizationProductVersionsRequest {
        const message = new ListOrganizationProductVersionsRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.organizationProductId != null) {
            message.organizationProductId = dependency_1.UUID.fromObject(data.organizationProductId);
        }
        if (data.forSboms != null) {
            message.forSboms = data.forSboms;
        }
        if (data.forVulns != null) {
            message.forVulns = data.forVulns;
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            organizationProductId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            forSboms?: boolean;
            forVulns?: boolean;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.organizationProductId != null) {
            data.organizationProductId = this.organizationProductId.toObject();
        }
        if (this.forSboms != null) {
            data.forSboms = this.forSboms;
        }
        if (this.forVulns != null) {
            data.forVulns = this.forVulns;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasOrganizationProductId)
            writer.writeMessage(2, this.organizationProductId, () => this.organizationProductId.serialize(writer));
        if (this.forSboms != false)
            writer.writeBool(3, this.forSboms);
        if (this.forVulns != false)
            writer.writeBool(4, this.forVulns);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListOrganizationProductVersionsRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListOrganizationProductVersionsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.organizationProductId, () => message.organizationProductId = dependency_1.UUID.deserialize(reader));
                    break;
                case 3:
                    message.forSboms = reader.readBool();
                    break;
                case 4:
                    message.forVulns = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListOrganizationProductVersionsRequest {
        return ListOrganizationProductVersionsRequest.deserialize(bytes);
    }
}
export class ListOrganizationProductVersionsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        organizationProductVersion?: OrganizationProductVersion[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("organizationProductVersion" in data && data.organizationProductVersion != undefined) {
                this.organizationProductVersion = data.organizationProductVersion;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get organizationProductVersion() {
        return pb_1.Message.getRepeatedWrapperField(this, OrganizationProductVersion, 2) as OrganizationProductVersion[];
    }
    set organizationProductVersion(value: OrganizationProductVersion[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        organizationProductVersion?: ReturnType<typeof OrganizationProductVersion.prototype.toObject>[];
    }): ListOrganizationProductVersionsResponse {
        const message = new ListOrganizationProductVersionsResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.organizationProductVersion != null) {
            message.organizationProductVersion = data.organizationProductVersion.map(item => OrganizationProductVersion.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            organizationProductVersion?: ReturnType<typeof OrganizationProductVersion.prototype.toObject>[];
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.organizationProductVersion != null) {
            data.organizationProductVersion = this.organizationProductVersion.map((item: OrganizationProductVersion) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.organizationProductVersion.length)
            writer.writeRepeatedMessage(2, this.organizationProductVersion, (item: OrganizationProductVersion) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListOrganizationProductVersionsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListOrganizationProductVersionsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.organizationProductVersion, () => pb_1.Message.addToRepeatedWrapperField(message, 2, OrganizationProductVersion.deserialize(reader), OrganizationProductVersion));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListOrganizationProductVersionsResponse {
        return ListOrganizationProductVersionsResponse.deserialize(bytes);
    }
}
export class CreateOrganizationProductVersion extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: CreateOrganizationProductVersionRequest;
        response?: never;
    } | {
        request?: never;
        response?: CreateOrganizationProductVersionResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, CreateOrganizationProductVersionRequest, 1) as CreateOrganizationProductVersionRequest;
    }
    set request(value: CreateOrganizationProductVersionRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, CreateOrganizationProductVersionResponse, 2) as CreateOrganizationProductVersionResponse;
    }
    set response(value: CreateOrganizationProductVersionResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof CreateOrganizationProductVersionRequest.prototype.toObject>;
        response?: ReturnType<typeof CreateOrganizationProductVersionResponse.prototype.toObject>;
    }): CreateOrganizationProductVersion {
        const message = new CreateOrganizationProductVersion({});
        if (data.request != null) {
            message.request = CreateOrganizationProductVersionRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = CreateOrganizationProductVersionResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof CreateOrganizationProductVersionRequest.prototype.toObject>;
            response?: ReturnType<typeof CreateOrganizationProductVersionResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOrganizationProductVersion {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOrganizationProductVersion();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = CreateOrganizationProductVersionRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = CreateOrganizationProductVersionResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateOrganizationProductVersion {
        return CreateOrganizationProductVersion.deserialize(bytes);
    }
}
export class CreateOrganizationProductVersionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
        organizationProductId?: dependency_1.UUID;
        rawVersionString?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("organizationProductId" in data && data.organizationProductId != undefined) {
                this.organizationProductId = data.organizationProductId;
            }
            if ("rawVersionString" in data && data.rawVersionString != undefined) {
                this.rawVersionString = data.rawVersionString;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get organizationProductId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set organizationProductId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasOrganizationProductId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get rawVersionString() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set rawVersionString(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        organizationProductId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        rawVersionString?: string;
    }): CreateOrganizationProductVersionRequest {
        const message = new CreateOrganizationProductVersionRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.organizationProductId != null) {
            message.organizationProductId = dependency_1.UUID.fromObject(data.organizationProductId);
        }
        if (data.rawVersionString != null) {
            message.rawVersionString = data.rawVersionString;
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            organizationProductId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            rawVersionString?: string;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.organizationProductId != null) {
            data.organizationProductId = this.organizationProductId.toObject();
        }
        if (this.rawVersionString != null) {
            data.rawVersionString = this.rawVersionString;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasOrganizationProductId)
            writer.writeMessage(2, this.organizationProductId, () => this.organizationProductId.serialize(writer));
        if (this.rawVersionString.length)
            writer.writeString(3, this.rawVersionString);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOrganizationProductVersionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOrganizationProductVersionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.organizationProductId, () => message.organizationProductId = dependency_1.UUID.deserialize(reader));
                    break;
                case 3:
                    message.rawVersionString = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateOrganizationProductVersionRequest {
        return CreateOrganizationProductVersionRequest.deserialize(bytes);
    }
}
export class CreateOrganizationProductVersionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        organizationProductVersion?: OrganizationProductVersion;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("organizationProductVersion" in data && data.organizationProductVersion != undefined) {
                this.organizationProductVersion = data.organizationProductVersion;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get organizationProductVersion() {
        return pb_1.Message.getWrapperField(this, OrganizationProductVersion, 2) as OrganizationProductVersion;
    }
    set organizationProductVersion(value: OrganizationProductVersion) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasOrganizationProductVersion() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        organizationProductVersion?: ReturnType<typeof OrganizationProductVersion.prototype.toObject>;
    }): CreateOrganizationProductVersionResponse {
        const message = new CreateOrganizationProductVersionResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.organizationProductVersion != null) {
            message.organizationProductVersion = OrganizationProductVersion.fromObject(data.organizationProductVersion);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            organizationProductVersion?: ReturnType<typeof OrganizationProductVersion.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.organizationProductVersion != null) {
            data.organizationProductVersion = this.organizationProductVersion.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasOrganizationProductVersion)
            writer.writeMessage(2, this.organizationProductVersion, () => this.organizationProductVersion.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOrganizationProductVersionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOrganizationProductVersionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.organizationProductVersion, () => message.organizationProductVersion = OrganizationProductVersion.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateOrganizationProductVersionResponse {
        return CreateOrganizationProductVersionResponse.deserialize(bytes);
    }
}
