/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.5.1
 * source: v1/external/heim_organization.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../heim_common";
import * as pb_1 from "google-protobuf";
export class Organization extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: dependency_1.UUID;
        name?: string;
        emailDomains?: string;
        authConnections?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("emailDomains" in data && data.emailDomains != undefined) {
                this.emailDomains = data.emailDomains;
            }
            if ("authConnections" in data && data.authConnections != undefined) {
                this.authConnections = data.authConnections;
            }
        }
    }
    get id() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 1) as dependency_1.UUID;
    }
    set id(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get emailDomains() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set emailDomains(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get authConnections() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set authConnections(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        id?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        name?: string;
        emailDomains?: string;
        authConnections?: string;
    }): Organization {
        const message = new Organization({});
        if (data.id != null) {
            message.id = dependency_1.UUID.fromObject(data.id);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.emailDomains != null) {
            message.emailDomains = data.emailDomains;
        }
        if (data.authConnections != null) {
            message.authConnections = data.authConnections;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            name?: string;
            emailDomains?: string;
            authConnections?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.emailDomains != null) {
            data.emailDomains = this.emailDomains;
        }
        if (this.authConnections != null) {
            data.authConnections = this.authConnections;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasId)
            writer.writeMessage(1, this.id, () => this.id.serialize(writer));
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.emailDomains.length)
            writer.writeString(3, this.emailDomains);
        if (this.authConnections.length)
            writer.writeString(4, this.authConnections);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Organization {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Organization();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.id, () => message.id = dependency_1.UUID.deserialize(reader));
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.emailDomains = reader.readString();
                    break;
                case 4:
                    message.authConnections = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Organization {
        return Organization.deserialize(bytes);
    }
}
export class OrganizationInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        org?: Organization;
        isAdmin?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("org" in data && data.org != undefined) {
                this.org = data.org;
            }
            if ("isAdmin" in data && data.isAdmin != undefined) {
                this.isAdmin = data.isAdmin;
            }
        }
    }
    get org() {
        return pb_1.Message.getWrapperField(this, Organization, 1) as Organization;
    }
    set org(value: Organization) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasOrg() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get isAdmin() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set isAdmin(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        org?: ReturnType<typeof Organization.prototype.toObject>;
        isAdmin?: boolean;
    }): OrganizationInfo {
        const message = new OrganizationInfo({});
        if (data.org != null) {
            message.org = Organization.fromObject(data.org);
        }
        if (data.isAdmin != null) {
            message.isAdmin = data.isAdmin;
        }
        return message;
    }
    toObject() {
        const data: {
            org?: ReturnType<typeof Organization.prototype.toObject>;
            isAdmin?: boolean;
        } = {};
        if (this.org != null) {
            data.org = this.org.toObject();
        }
        if (this.isAdmin != null) {
            data.isAdmin = this.isAdmin;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasOrg)
            writer.writeMessage(1, this.org, () => this.org.serialize(writer));
        if (this.isAdmin != false)
            writer.writeBool(2, this.isAdmin);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrganizationInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrganizationInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.org, () => message.org = Organization.deserialize(reader));
                    break;
                case 2:
                    message.isAdmin = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OrganizationInfo {
        return OrganizationInfo.deserialize(bytes);
    }
}
export class ListOrganizations extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: ListOrganizationsRequest;
        response?: never;
    } | {
        request?: never;
        response?: ListOrganizationsResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, ListOrganizationsRequest, 1) as ListOrganizationsRequest;
    }
    set request(value: ListOrganizationsRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, ListOrganizationsResponse, 2) as ListOrganizationsResponse;
    }
    set response(value: ListOrganizationsResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof ListOrganizationsRequest.prototype.toObject>;
        response?: ReturnType<typeof ListOrganizationsResponse.prototype.toObject>;
    }): ListOrganizations {
        const message = new ListOrganizations({});
        if (data.request != null) {
            message.request = ListOrganizationsRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = ListOrganizationsResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof ListOrganizationsRequest.prototype.toObject>;
            response?: ReturnType<typeof ListOrganizationsResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListOrganizations {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListOrganizations();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = ListOrganizationsRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = ListOrganizationsResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListOrganizations {
        return ListOrganizations.deserialize(bytes);
    }
}
export class ListOrganizationsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
    }): ListOrganizationsRequest {
        const message = new ListOrganizationsRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListOrganizationsRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListOrganizationsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListOrganizationsRequest {
        return ListOrganizationsRequest.deserialize(bytes);
    }
}
export class ListOrganizationsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        orgInfo?: OrganizationInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("orgInfo" in data && data.orgInfo != undefined) {
                this.orgInfo = data.orgInfo;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get orgInfo() {
        return pb_1.Message.getRepeatedWrapperField(this, OrganizationInfo, 2) as OrganizationInfo[];
    }
    set orgInfo(value: OrganizationInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        orgInfo?: ReturnType<typeof OrganizationInfo.prototype.toObject>[];
    }): ListOrganizationsResponse {
        const message = new ListOrganizationsResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.orgInfo != null) {
            message.orgInfo = data.orgInfo.map(item => OrganizationInfo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            orgInfo?: ReturnType<typeof OrganizationInfo.prototype.toObject>[];
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.orgInfo != null) {
            data.orgInfo = this.orgInfo.map((item: OrganizationInfo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.orgInfo.length)
            writer.writeRepeatedMessage(2, this.orgInfo, (item: OrganizationInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListOrganizationsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListOrganizationsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.orgInfo, () => pb_1.Message.addToRepeatedWrapperField(message, 2, OrganizationInfo.deserialize(reader), OrganizationInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListOrganizationsResponse {
        return ListOrganizationsResponse.deserialize(bytes);
    }
}
export class ListWorkspacesForUser extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: ListWorkspacesForUserRequest;
        response?: never;
    } | {
        request?: never;
        response?: ListWorkspacesForUserResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, ListWorkspacesForUserRequest, 1) as ListWorkspacesForUserRequest;
    }
    set request(value: ListWorkspacesForUserRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, ListWorkspacesForUserResponse, 2) as ListWorkspacesForUserResponse;
    }
    set response(value: ListWorkspacesForUserResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof ListWorkspacesForUserRequest.prototype.toObject>;
        response?: ReturnType<typeof ListWorkspacesForUserResponse.prototype.toObject>;
    }): ListWorkspacesForUser {
        const message = new ListWorkspacesForUser({});
        if (data.request != null) {
            message.request = ListWorkspacesForUserRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = ListWorkspacesForUserResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof ListWorkspacesForUserRequest.prototype.toObject>;
            response?: ReturnType<typeof ListWorkspacesForUserResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWorkspacesForUser {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWorkspacesForUser();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = ListWorkspacesForUserRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = ListWorkspacesForUserResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListWorkspacesForUser {
        return ListWorkspacesForUser.deserialize(bytes);
    }
}
export class ListWorkspacesForUserRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
    }): ListWorkspacesForUserRequest {
        const message = new ListWorkspacesForUserRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWorkspacesForUserRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWorkspacesForUserRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListWorkspacesForUserRequest {
        return ListWorkspacesForUserRequest.deserialize(bytes);
    }
}
export class ListWorkspacesForUserResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        workspaceInfo?: dependency_1.WorkspaceInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("workspaceInfo" in data && data.workspaceInfo != undefined) {
                this.workspaceInfo = data.workspaceInfo;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get workspaceInfo() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.WorkspaceInfo, 2) as dependency_1.WorkspaceInfo[];
    }
    set workspaceInfo(value: dependency_1.WorkspaceInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        workspaceInfo?: ReturnType<typeof dependency_1.WorkspaceInfo.prototype.toObject>[];
    }): ListWorkspacesForUserResponse {
        const message = new ListWorkspacesForUserResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.workspaceInfo != null) {
            message.workspaceInfo = data.workspaceInfo.map(item => dependency_1.WorkspaceInfo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            workspaceInfo?: ReturnType<typeof dependency_1.WorkspaceInfo.prototype.toObject>[];
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.workspaceInfo != null) {
            data.workspaceInfo = this.workspaceInfo.map((item: dependency_1.WorkspaceInfo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.workspaceInfo.length)
            writer.writeRepeatedMessage(2, this.workspaceInfo, (item: dependency_1.WorkspaceInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWorkspacesForUserResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWorkspacesForUserResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.workspaceInfo, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.WorkspaceInfo.deserialize(reader), dependency_1.WorkspaceInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListWorkspacesForUserResponse {
        return ListWorkspacesForUserResponse.deserialize(bytes);
    }
}
