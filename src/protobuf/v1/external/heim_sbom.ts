/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.5.1
 * source: v1/external/heim_sbom.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../heim_common";
import * as dependency_2 from "./../common/heim_enums";
import * as pb_1 from "google-protobuf";
export enum SbomFileType {
    CYCLONE_DX = 0,
    SPDX = 1
}
export class ProductMatchDataTypes extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        nameMatch?: boolean;
        purlMatch?: boolean;
        cpeMatch?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("nameMatch" in data && data.nameMatch != undefined) {
                this.nameMatch = data.nameMatch;
            }
            if ("purlMatch" in data && data.purlMatch != undefined) {
                this.purlMatch = data.purlMatch;
            }
            if ("cpeMatch" in data && data.cpeMatch != undefined) {
                this.cpeMatch = data.cpeMatch;
            }
        }
    }
    get nameMatch() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set nameMatch(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get purlMatch() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set purlMatch(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get cpeMatch() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set cpeMatch(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        nameMatch?: boolean;
        purlMatch?: boolean;
        cpeMatch?: boolean;
    }): ProductMatchDataTypes {
        const message = new ProductMatchDataTypes({});
        if (data.nameMatch != null) {
            message.nameMatch = data.nameMatch;
        }
        if (data.purlMatch != null) {
            message.purlMatch = data.purlMatch;
        }
        if (data.cpeMatch != null) {
            message.cpeMatch = data.cpeMatch;
        }
        return message;
    }
    toObject() {
        const data: {
            nameMatch?: boolean;
            purlMatch?: boolean;
            cpeMatch?: boolean;
        } = {};
        if (this.nameMatch != null) {
            data.nameMatch = this.nameMatch;
        }
        if (this.purlMatch != null) {
            data.purlMatch = this.purlMatch;
        }
        if (this.cpeMatch != null) {
            data.cpeMatch = this.cpeMatch;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.nameMatch != false)
            writer.writeBool(1, this.nameMatch);
        if (this.purlMatch != false)
            writer.writeBool(2, this.purlMatch);
        if (this.cpeMatch != false)
            writer.writeBool(3, this.cpeMatch);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductMatchDataTypes {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductMatchDataTypes();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.nameMatch = reader.readBool();
                    break;
                case 2:
                    message.purlMatch = reader.readBool();
                    break;
                case 3:
                    message.cpeMatch = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProductMatchDataTypes {
        return ProductMatchDataTypes.deserialize(bytes);
    }
}
export class SubmitSbom extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: SubmitSbomRequest;
        response?: never;
    } | {
        request?: never;
        response?: SubmitSbomResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, SubmitSbomRequest, 1) as SubmitSbomRequest;
    }
    set request(value: SubmitSbomRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, SubmitSbomResponse, 2) as SubmitSbomResponse;
    }
    set response(value: SubmitSbomResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof SubmitSbomRequest.prototype.toObject>;
        response?: ReturnType<typeof SubmitSbomResponse.prototype.toObject>;
    }): SubmitSbom {
        const message = new SubmitSbom({});
        if (data.request != null) {
            message.request = SubmitSbomRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = SubmitSbomResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof SubmitSbomRequest.prototype.toObject>;
            response?: ReturnType<typeof SubmitSbomResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitSbom {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitSbom();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = SubmitSbomRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = SubmitSbomResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SubmitSbom {
        return SubmitSbom.deserialize(bytes);
    }
}
export class SubmitSbomRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
        organizationProductVersionId?: dependency_1.UUID;
        fileName?: string;
        /** @deprecated*/
        fileContents?: Uint8Array;
        fileType?: SbomFileType;
        s3FileName?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("organizationProductVersionId" in data && data.organizationProductVersionId != undefined) {
                this.organizationProductVersionId = data.organizationProductVersionId;
            }
            if ("fileName" in data && data.fileName != undefined) {
                this.fileName = data.fileName;
            }
            if ("fileContents" in data && data.fileContents != undefined) {
                this.fileContents = data.fileContents;
            }
            if ("fileType" in data && data.fileType != undefined) {
                this.fileType = data.fileType;
            }
            if ("s3FileName" in data && data.s3FileName != undefined) {
                this.s3FileName = data.s3FileName;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get organizationProductVersionId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set organizationProductVersionId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasOrganizationProductVersionId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get fileName() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set fileName(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    /** @deprecated*/
    get fileContents() {
        return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
    }
    /** @deprecated*/
    set fileContents(value: Uint8Array) {
        pb_1.Message.setField(this, 4, value);
    }
    get fileType() {
        return pb_1.Message.getFieldWithDefault(this, 5, SbomFileType.CYCLONE_DX) as SbomFileType;
    }
    set fileType(value: SbomFileType) {
        pb_1.Message.setField(this, 5, value);
    }
    get s3FileName() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set s3FileName(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        organizationProductVersionId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        fileName?: string;
        fileContents?: Uint8Array;
        fileType?: SbomFileType;
        s3FileName?: string;
    }): SubmitSbomRequest {
        const message = new SubmitSbomRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.organizationProductVersionId != null) {
            message.organizationProductVersionId = dependency_1.UUID.fromObject(data.organizationProductVersionId);
        }
        if (data.fileName != null) {
            message.fileName = data.fileName;
        }
        if (data.fileContents != null) {
            message.fileContents = data.fileContents;
        }
        if (data.fileType != null) {
            message.fileType = data.fileType;
        }
        if (data.s3FileName != null) {
            message.s3FileName = data.s3FileName;
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            organizationProductVersionId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            fileName?: string;
            fileContents?: Uint8Array;
            fileType?: SbomFileType;
            s3FileName?: string;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.organizationProductVersionId != null) {
            data.organizationProductVersionId = this.organizationProductVersionId.toObject();
        }
        if (this.fileName != null) {
            data.fileName = this.fileName;
        }
        if (this.fileContents != null) {
            data.fileContents = this.fileContents;
        }
        if (this.fileType != null) {
            data.fileType = this.fileType;
        }
        if (this.s3FileName != null) {
            data.s3FileName = this.s3FileName;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasOrganizationProductVersionId)
            writer.writeMessage(2, this.organizationProductVersionId, () => this.organizationProductVersionId.serialize(writer));
        if (this.fileName.length)
            writer.writeString(3, this.fileName);
        if (this.fileContents.length)
            writer.writeBytes(4, this.fileContents);
        if (this.fileType != SbomFileType.CYCLONE_DX)
            writer.writeEnum(5, this.fileType);
        if (this.s3FileName.length)
            writer.writeString(6, this.s3FileName);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitSbomRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitSbomRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.organizationProductVersionId, () => message.organizationProductVersionId = dependency_1.UUID.deserialize(reader));
                    break;
                case 3:
                    message.fileName = reader.readString();
                    break;
                case 4:
                    message.fileContents = reader.readBytes();
                    break;
                case 5:
                    message.fileType = reader.readEnum();
                    break;
                case 6:
                    message.s3FileName = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SubmitSbomRequest {
        return SubmitSbomRequest.deserialize(bytes);
    }
}
export class SubmitSbomResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        fileId?: dependency_1.UUID;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("fileId" in data && data.fileId != undefined) {
                this.fileId = data.fileId;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get fileId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set fileId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasFileId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        fileId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
    }): SubmitSbomResponse {
        const message = new SubmitSbomResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.fileId != null) {
            message.fileId = dependency_1.UUID.fromObject(data.fileId);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            fileId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.fileId != null) {
            data.fileId = this.fileId.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasFileId)
            writer.writeMessage(2, this.fileId, () => this.fileId.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitSbomResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitSbomResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.fileId, () => message.fileId = dependency_1.UUID.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SubmitSbomResponse {
        return SubmitSbomResponse.deserialize(bytes);
    }
}
export class GetS3PreSignedUrl extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: GetS3PreSignedUrlRequest;
        response?: never;
    } | {
        request?: never;
        response?: GetS3PreSignedUrlResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, GetS3PreSignedUrlRequest, 1) as GetS3PreSignedUrlRequest;
    }
    set request(value: GetS3PreSignedUrlRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, GetS3PreSignedUrlResponse, 2) as GetS3PreSignedUrlResponse;
    }
    set response(value: GetS3PreSignedUrlResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof GetS3PreSignedUrlRequest.prototype.toObject>;
        response?: ReturnType<typeof GetS3PreSignedUrlResponse.prototype.toObject>;
    }): GetS3PreSignedUrl {
        const message = new GetS3PreSignedUrl({});
        if (data.request != null) {
            message.request = GetS3PreSignedUrlRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = GetS3PreSignedUrlResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof GetS3PreSignedUrlRequest.prototype.toObject>;
            response?: ReturnType<typeof GetS3PreSignedUrlResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetS3PreSignedUrl {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetS3PreSignedUrl();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = GetS3PreSignedUrlRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = GetS3PreSignedUrlResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetS3PreSignedUrl {
        return GetS3PreSignedUrl.deserialize(bytes);
    }
}
export class GetS3PreSignedUrlRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
        s3FileName?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("s3FileName" in data && data.s3FileName != undefined) {
                this.s3FileName = data.s3FileName;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get s3FileName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set s3FileName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        s3FileName?: string;
    }): GetS3PreSignedUrlRequest {
        const message = new GetS3PreSignedUrlRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.s3FileName != null) {
            message.s3FileName = data.s3FileName;
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            s3FileName?: string;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.s3FileName != null) {
            data.s3FileName = this.s3FileName;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.s3FileName.length)
            writer.writeString(2, this.s3FileName);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetS3PreSignedUrlRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetS3PreSignedUrlRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    message.s3FileName = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetS3PreSignedUrlRequest {
        return GetS3PreSignedUrlRequest.deserialize(bytes);
    }
}
export class GetS3PreSignedUrlResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        s3PreSignedUrl?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("s3PreSignedUrl" in data && data.s3PreSignedUrl != undefined) {
                this.s3PreSignedUrl = data.s3PreSignedUrl;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get s3PreSignedUrl() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set s3PreSignedUrl(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        s3PreSignedUrl?: string;
    }): GetS3PreSignedUrlResponse {
        const message = new GetS3PreSignedUrlResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.s3PreSignedUrl != null) {
            message.s3PreSignedUrl = data.s3PreSignedUrl;
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            s3PreSignedUrl?: string;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.s3PreSignedUrl != null) {
            data.s3PreSignedUrl = this.s3PreSignedUrl;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.s3PreSignedUrl.length)
            writer.writeString(2, this.s3PreSignedUrl);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetS3PreSignedUrlResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetS3PreSignedUrlResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    message.s3PreSignedUrl = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetS3PreSignedUrlResponse {
        return GetS3PreSignedUrlResponse.deserialize(bytes);
    }
}
export class SbomEntry extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        sbomEntryId?: dependency_1.UUID;
        sbomEntryName?: string;
        sbomEntryState?: SbomEntryState;
        vendorId?: dependency_1.UUID;
        vendorDisplayName?: string;
        productId?: dependency_1.UUID;
        productDisplayName?: string;
        productVersionString?: string;
        rawProductVersionString?: string;
        sbomVersionOverridden?: boolean;
        sbomVersionCreatedBy?: string;
        dependencyId?: dependency_1.UUID;
        matchType?: dependency_2.ProductMatchType;
        reviewStatus?: dependency_2.ReviewStatus;
        status?: SbomEntryStatus;
        purlSource?: SbomEntryPurlSource;
        matchDataTypes?: ProductMatchDataTypes;
        rawPurl?: string;
        rawCpe?: string;
        rawPart?: string;
        generatedPurl?: string;
        generatedCpe?: string;
        originalFileName?: string;
        originalVendorName?: string;
        rawEntryIdentifier?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("sbomEntryId" in data && data.sbomEntryId != undefined) {
                this.sbomEntryId = data.sbomEntryId;
            }
            if ("sbomEntryName" in data && data.sbomEntryName != undefined) {
                this.sbomEntryName = data.sbomEntryName;
            }
            if ("sbomEntryState" in data && data.sbomEntryState != undefined) {
                this.sbomEntryState = data.sbomEntryState;
            }
            if ("vendorId" in data && data.vendorId != undefined) {
                this.vendorId = data.vendorId;
            }
            if ("vendorDisplayName" in data && data.vendorDisplayName != undefined) {
                this.vendorDisplayName = data.vendorDisplayName;
            }
            if ("productId" in data && data.productId != undefined) {
                this.productId = data.productId;
            }
            if ("productDisplayName" in data && data.productDisplayName != undefined) {
                this.productDisplayName = data.productDisplayName;
            }
            if ("productVersionString" in data && data.productVersionString != undefined) {
                this.productVersionString = data.productVersionString;
            }
            if ("rawProductVersionString" in data && data.rawProductVersionString != undefined) {
                this.rawProductVersionString = data.rawProductVersionString;
            }
            if ("sbomVersionOverridden" in data && data.sbomVersionOverridden != undefined) {
                this.sbomVersionOverridden = data.sbomVersionOverridden;
            }
            if ("sbomVersionCreatedBy" in data && data.sbomVersionCreatedBy != undefined) {
                this.sbomVersionCreatedBy = data.sbomVersionCreatedBy;
            }
            if ("dependencyId" in data && data.dependencyId != undefined) {
                this.dependencyId = data.dependencyId;
            }
            if ("matchType" in data && data.matchType != undefined) {
                this.matchType = data.matchType;
            }
            if ("reviewStatus" in data && data.reviewStatus != undefined) {
                this.reviewStatus = data.reviewStatus;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("purlSource" in data && data.purlSource != undefined) {
                this.purlSource = data.purlSource;
            }
            if ("matchDataTypes" in data && data.matchDataTypes != undefined) {
                this.matchDataTypes = data.matchDataTypes;
            }
            if ("rawPurl" in data && data.rawPurl != undefined) {
                this.rawPurl = data.rawPurl;
            }
            if ("rawCpe" in data && data.rawCpe != undefined) {
                this.rawCpe = data.rawCpe;
            }
            if ("rawPart" in data && data.rawPart != undefined) {
                this.rawPart = data.rawPart;
            }
            if ("generatedPurl" in data && data.generatedPurl != undefined) {
                this.generatedPurl = data.generatedPurl;
            }
            if ("generatedCpe" in data && data.generatedCpe != undefined) {
                this.generatedCpe = data.generatedCpe;
            }
            if ("originalFileName" in data && data.originalFileName != undefined) {
                this.originalFileName = data.originalFileName;
            }
            if ("originalVendorName" in data && data.originalVendorName != undefined) {
                this.originalVendorName = data.originalVendorName;
            }
            if ("rawEntryIdentifier" in data && data.rawEntryIdentifier != undefined) {
                this.rawEntryIdentifier = data.rawEntryIdentifier;
            }
        }
    }
    get sbomEntryId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 1) as dependency_1.UUID;
    }
    set sbomEntryId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasSbomEntryId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get sbomEntryName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set sbomEntryName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get sbomEntryState() {
        return pb_1.Message.getFieldWithDefault(this, 3, SbomEntryState.NEW_SBOM_ENTRY) as SbomEntryState;
    }
    set sbomEntryState(value: SbomEntryState) {
        pb_1.Message.setField(this, 3, value);
    }
    get vendorId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 4) as dependency_1.UUID;
    }
    set vendorId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasVendorId() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get vendorDisplayName() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set vendorDisplayName(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get productId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 6) as dependency_1.UUID;
    }
    set productId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasProductId() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get productDisplayName() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set productDisplayName(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get productVersionString() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set productVersionString(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get rawProductVersionString() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set rawProductVersionString(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get sbomVersionOverridden() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set sbomVersionOverridden(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get sbomVersionCreatedBy() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set sbomVersionCreatedBy(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get dependencyId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 12) as dependency_1.UUID;
    }
    set dependencyId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get hasDependencyId() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get matchType() {
        return pb_1.Message.getFieldWithDefault(this, 13, dependency_2.ProductMatchType.AUTO_EXACT_MATCH) as dependency_2.ProductMatchType;
    }
    set matchType(value: dependency_2.ProductMatchType) {
        pb_1.Message.setField(this, 13, value);
    }
    get reviewStatus() {
        return pb_1.Message.getFieldWithDefault(this, 14, dependency_2.ReviewStatus.NONE) as dependency_2.ReviewStatus;
    }
    set reviewStatus(value: dependency_2.ReviewStatus) {
        pb_1.Message.setField(this, 14, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 15, SbomEntryStatus.LIVE) as SbomEntryStatus;
    }
    set status(value: SbomEntryStatus) {
        pb_1.Message.setField(this, 15, value);
    }
    get purlSource() {
        return pb_1.Message.getFieldWithDefault(this, 16, SbomEntryPurlSource.NONE) as SbomEntryPurlSource;
    }
    set purlSource(value: SbomEntryPurlSource) {
        pb_1.Message.setField(this, 16, value);
    }
    get matchDataTypes() {
        return pb_1.Message.getWrapperField(this, ProductMatchDataTypes, 17) as ProductMatchDataTypes;
    }
    set matchDataTypes(value: ProductMatchDataTypes) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    get hasMatchDataTypes() {
        return pb_1.Message.getField(this, 17) != null;
    }
    get rawPurl() {
        return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
    }
    set rawPurl(value: string) {
        pb_1.Message.setField(this, 18, value);
    }
    get rawCpe() {
        return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
    }
    set rawCpe(value: string) {
        pb_1.Message.setField(this, 19, value);
    }
    get rawPart() {
        return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
    }
    set rawPart(value: string) {
        pb_1.Message.setField(this, 20, value);
    }
    get generatedPurl() {
        return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
    }
    set generatedPurl(value: string) {
        pb_1.Message.setField(this, 22, value);
    }
    get generatedCpe() {
        return pb_1.Message.getFieldWithDefault(this, 23, "") as string;
    }
    set generatedCpe(value: string) {
        pb_1.Message.setField(this, 23, value);
    }
    get originalFileName() {
        return pb_1.Message.getFieldWithDefault(this, 28, "") as string;
    }
    set originalFileName(value: string) {
        pb_1.Message.setField(this, 28, value);
    }
    get originalVendorName() {
        return pb_1.Message.getFieldWithDefault(this, 30, "") as string;
    }
    set originalVendorName(value: string) {
        pb_1.Message.setField(this, 30, value);
    }
    get rawEntryIdentifier() {
        return pb_1.Message.getFieldWithDefault(this, 31, "") as string;
    }
    set rawEntryIdentifier(value: string) {
        pb_1.Message.setField(this, 31, value);
    }
    static fromObject(data: {
        sbomEntryId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        sbomEntryName?: string;
        sbomEntryState?: SbomEntryState;
        vendorId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        vendorDisplayName?: string;
        productId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        productDisplayName?: string;
        productVersionString?: string;
        rawProductVersionString?: string;
        sbomVersionOverridden?: boolean;
        sbomVersionCreatedBy?: string;
        dependencyId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        matchType?: dependency_2.ProductMatchType;
        reviewStatus?: dependency_2.ReviewStatus;
        status?: SbomEntryStatus;
        purlSource?: SbomEntryPurlSource;
        matchDataTypes?: ReturnType<typeof ProductMatchDataTypes.prototype.toObject>;
        rawPurl?: string;
        rawCpe?: string;
        rawPart?: string;
        generatedPurl?: string;
        generatedCpe?: string;
        originalFileName?: string;
        originalVendorName?: string;
        rawEntryIdentifier?: string;
    }): SbomEntry {
        const message = new SbomEntry({});
        if (data.sbomEntryId != null) {
            message.sbomEntryId = dependency_1.UUID.fromObject(data.sbomEntryId);
        }
        if (data.sbomEntryName != null) {
            message.sbomEntryName = data.sbomEntryName;
        }
        if (data.sbomEntryState != null) {
            message.sbomEntryState = data.sbomEntryState;
        }
        if (data.vendorId != null) {
            message.vendorId = dependency_1.UUID.fromObject(data.vendorId);
        }
        if (data.vendorDisplayName != null) {
            message.vendorDisplayName = data.vendorDisplayName;
        }
        if (data.productId != null) {
            message.productId = dependency_1.UUID.fromObject(data.productId);
        }
        if (data.productDisplayName != null) {
            message.productDisplayName = data.productDisplayName;
        }
        if (data.productVersionString != null) {
            message.productVersionString = data.productVersionString;
        }
        if (data.rawProductVersionString != null) {
            message.rawProductVersionString = data.rawProductVersionString;
        }
        if (data.sbomVersionOverridden != null) {
            message.sbomVersionOverridden = data.sbomVersionOverridden;
        }
        if (data.sbomVersionCreatedBy != null) {
            message.sbomVersionCreatedBy = data.sbomVersionCreatedBy;
        }
        if (data.dependencyId != null) {
            message.dependencyId = dependency_1.UUID.fromObject(data.dependencyId);
        }
        if (data.matchType != null) {
            message.matchType = data.matchType;
        }
        if (data.reviewStatus != null) {
            message.reviewStatus = data.reviewStatus;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.purlSource != null) {
            message.purlSource = data.purlSource;
        }
        if (data.matchDataTypes != null) {
            message.matchDataTypes = ProductMatchDataTypes.fromObject(data.matchDataTypes);
        }
        if (data.rawPurl != null) {
            message.rawPurl = data.rawPurl;
        }
        if (data.rawCpe != null) {
            message.rawCpe = data.rawCpe;
        }
        if (data.rawPart != null) {
            message.rawPart = data.rawPart;
        }
        if (data.generatedPurl != null) {
            message.generatedPurl = data.generatedPurl;
        }
        if (data.generatedCpe != null) {
            message.generatedCpe = data.generatedCpe;
        }
        if (data.originalFileName != null) {
            message.originalFileName = data.originalFileName;
        }
        if (data.originalVendorName != null) {
            message.originalVendorName = data.originalVendorName;
        }
        if (data.rawEntryIdentifier != null) {
            message.rawEntryIdentifier = data.rawEntryIdentifier;
        }
        return message;
    }
    toObject() {
        const data: {
            sbomEntryId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            sbomEntryName?: string;
            sbomEntryState?: SbomEntryState;
            vendorId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            vendorDisplayName?: string;
            productId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            productDisplayName?: string;
            productVersionString?: string;
            rawProductVersionString?: string;
            sbomVersionOverridden?: boolean;
            sbomVersionCreatedBy?: string;
            dependencyId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            matchType?: dependency_2.ProductMatchType;
            reviewStatus?: dependency_2.ReviewStatus;
            status?: SbomEntryStatus;
            purlSource?: SbomEntryPurlSource;
            matchDataTypes?: ReturnType<typeof ProductMatchDataTypes.prototype.toObject>;
            rawPurl?: string;
            rawCpe?: string;
            rawPart?: string;
            generatedPurl?: string;
            generatedCpe?: string;
            originalFileName?: string;
            originalVendorName?: string;
            rawEntryIdentifier?: string;
        } = {};
        if (this.sbomEntryId != null) {
            data.sbomEntryId = this.sbomEntryId.toObject();
        }
        if (this.sbomEntryName != null) {
            data.sbomEntryName = this.sbomEntryName;
        }
        if (this.sbomEntryState != null) {
            data.sbomEntryState = this.sbomEntryState;
        }
        if (this.vendorId != null) {
            data.vendorId = this.vendorId.toObject();
        }
        if (this.vendorDisplayName != null) {
            data.vendorDisplayName = this.vendorDisplayName;
        }
        if (this.productId != null) {
            data.productId = this.productId.toObject();
        }
        if (this.productDisplayName != null) {
            data.productDisplayName = this.productDisplayName;
        }
        if (this.productVersionString != null) {
            data.productVersionString = this.productVersionString;
        }
        if (this.rawProductVersionString != null) {
            data.rawProductVersionString = this.rawProductVersionString;
        }
        if (this.sbomVersionOverridden != null) {
            data.sbomVersionOverridden = this.sbomVersionOverridden;
        }
        if (this.sbomVersionCreatedBy != null) {
            data.sbomVersionCreatedBy = this.sbomVersionCreatedBy;
        }
        if (this.dependencyId != null) {
            data.dependencyId = this.dependencyId.toObject();
        }
        if (this.matchType != null) {
            data.matchType = this.matchType;
        }
        if (this.reviewStatus != null) {
            data.reviewStatus = this.reviewStatus;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.purlSource != null) {
            data.purlSource = this.purlSource;
        }
        if (this.matchDataTypes != null) {
            data.matchDataTypes = this.matchDataTypes.toObject();
        }
        if (this.rawPurl != null) {
            data.rawPurl = this.rawPurl;
        }
        if (this.rawCpe != null) {
            data.rawCpe = this.rawCpe;
        }
        if (this.rawPart != null) {
            data.rawPart = this.rawPart;
        }
        if (this.generatedPurl != null) {
            data.generatedPurl = this.generatedPurl;
        }
        if (this.generatedCpe != null) {
            data.generatedCpe = this.generatedCpe;
        }
        if (this.originalFileName != null) {
            data.originalFileName = this.originalFileName;
        }
        if (this.originalVendorName != null) {
            data.originalVendorName = this.originalVendorName;
        }
        if (this.rawEntryIdentifier != null) {
            data.rawEntryIdentifier = this.rawEntryIdentifier;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasSbomEntryId)
            writer.writeMessage(1, this.sbomEntryId, () => this.sbomEntryId.serialize(writer));
        if (this.sbomEntryName.length)
            writer.writeString(2, this.sbomEntryName);
        if (this.sbomEntryState != SbomEntryState.NEW_SBOM_ENTRY)
            writer.writeEnum(3, this.sbomEntryState);
        if (this.hasVendorId)
            writer.writeMessage(4, this.vendorId, () => this.vendorId.serialize(writer));
        if (this.vendorDisplayName.length)
            writer.writeString(5, this.vendorDisplayName);
        if (this.hasProductId)
            writer.writeMessage(6, this.productId, () => this.productId.serialize(writer));
        if (this.productDisplayName.length)
            writer.writeString(7, this.productDisplayName);
        if (this.productVersionString.length)
            writer.writeString(8, this.productVersionString);
        if (this.rawProductVersionString.length)
            writer.writeString(9, this.rawProductVersionString);
        if (this.sbomVersionOverridden != false)
            writer.writeBool(10, this.sbomVersionOverridden);
        if (this.sbomVersionCreatedBy.length)
            writer.writeString(11, this.sbomVersionCreatedBy);
        if (this.hasDependencyId)
            writer.writeMessage(12, this.dependencyId, () => this.dependencyId.serialize(writer));
        if (this.matchType != dependency_2.ProductMatchType.AUTO_EXACT_MATCH)
            writer.writeEnum(13, this.matchType);
        if (this.reviewStatus != dependency_2.ReviewStatus.NONE)
            writer.writeEnum(14, this.reviewStatus);
        if (this.status != SbomEntryStatus.LIVE)
            writer.writeEnum(15, this.status);
        if (this.purlSource != SbomEntryPurlSource.NONE)
            writer.writeEnum(16, this.purlSource);
        if (this.hasMatchDataTypes)
            writer.writeMessage(17, this.matchDataTypes, () => this.matchDataTypes.serialize(writer));
        if (this.rawPurl.length)
            writer.writeString(18, this.rawPurl);
        if (this.rawCpe.length)
            writer.writeString(19, this.rawCpe);
        if (this.rawPart.length)
            writer.writeString(20, this.rawPart);
        if (this.generatedPurl.length)
            writer.writeString(22, this.generatedPurl);
        if (this.generatedCpe.length)
            writer.writeString(23, this.generatedCpe);
        if (this.originalFileName.length)
            writer.writeString(28, this.originalFileName);
        if (this.originalVendorName.length)
            writer.writeString(30, this.originalVendorName);
        if (this.rawEntryIdentifier.length)
            writer.writeString(31, this.rawEntryIdentifier);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SbomEntry {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SbomEntry();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.sbomEntryId, () => message.sbomEntryId = dependency_1.UUID.deserialize(reader));
                    break;
                case 2:
                    message.sbomEntryName = reader.readString();
                    break;
                case 3:
                    message.sbomEntryState = reader.readEnum();
                    break;
                case 4:
                    reader.readMessage(message.vendorId, () => message.vendorId = dependency_1.UUID.deserialize(reader));
                    break;
                case 5:
                    message.vendorDisplayName = reader.readString();
                    break;
                case 6:
                    reader.readMessage(message.productId, () => message.productId = dependency_1.UUID.deserialize(reader));
                    break;
                case 7:
                    message.productDisplayName = reader.readString();
                    break;
                case 8:
                    message.productVersionString = reader.readString();
                    break;
                case 9:
                    message.rawProductVersionString = reader.readString();
                    break;
                case 10:
                    message.sbomVersionOverridden = reader.readBool();
                    break;
                case 11:
                    message.sbomVersionCreatedBy = reader.readString();
                    break;
                case 12:
                    reader.readMessage(message.dependencyId, () => message.dependencyId = dependency_1.UUID.deserialize(reader));
                    break;
                case 13:
                    message.matchType = reader.readEnum();
                    break;
                case 14:
                    message.reviewStatus = reader.readEnum();
                    break;
                case 15:
                    message.status = reader.readEnum();
                    break;
                case 16:
                    message.purlSource = reader.readEnum();
                    break;
                case 17:
                    reader.readMessage(message.matchDataTypes, () => message.matchDataTypes = ProductMatchDataTypes.deserialize(reader));
                    break;
                case 18:
                    message.rawPurl = reader.readString();
                    break;
                case 19:
                    message.rawCpe = reader.readString();
                    break;
                case 20:
                    message.rawPart = reader.readString();
                    break;
                case 22:
                    message.generatedPurl = reader.readString();
                    break;
                case 23:
                    message.generatedCpe = reader.readString();
                    break;
                case 28:
                    message.originalFileName = reader.readString();
                    break;
                case 30:
                    message.originalVendorName = reader.readString();
                    break;
                case 31:
                    message.rawEntryIdentifier = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SbomEntry {
        return SbomEntry.deserialize(bytes);
    }
}
export enum SbomEntryState {
    NEW_SBOM_ENTRY = 0,
    SBOM_ENTRY_RESET = 1,
    VENDOR_MATCH_PRODUCT_ALIAS = 2,
    VENDOR_UNMATCHED_PRODUCT_ALIAS = 3,
    VENDOR_MATCH_ORG_ALIAS = 4,
    VENDOR_UNMATCHED_ORG_ALIAS = 5,
    VENDOR_MATCH_GLOBAL_ALIAS = 6,
    VENDOR_UNMATCHED_GLOBAL_ALIAS = 7,
    VENDOR_MATCH_UNIQUE_KEY = 8,
    VENDOR_UNMATCHED_UNIQUE_KEY = 9,
    VENDOR_HAVE_POSSIBLE_MATCHES_PRODUCT_ALIAS = 10,
    VENDOR_HAVE_POSSIBLE_MATCHES_ORG_ALIAS = 11,
    VENDOR_HAVE_POSSIBLE_MATCHES_GLOBAL_ALIAS = 12,
    VENDOR_HAVE_POSSIBLE_MATCHES_UNIQUE_KEY = 13,
    PRODUCT_WITH_VENDORS_MATCH_PRODUCT_ALIAS = 14,
    PRODUCT_WITH_VENDORS_UNMATCHED_PRODUCT_ALIAS = 15,
    PRODUCT_WITH_VENDORS_MATCH_ORG_ALIAS = 16,
    PRODUCT_WITH_VENDORS_UNMATCHED_ORG_ALIAS = 17,
    PRODUCT_WITH_VENDORS_MATCH_GLOBAL_ALIAS = 18,
    PRODUCT_WITH_VENDORS_UNMATCHED_GLOBAL_ALIAS = 19,
    PRODUCT_WITH_VENDORS_MATCH_UNIQUE_KEY = 20,
    PRODUCT_WITH_VENDORS_UNMATCHED_UNIQUE_KEY = 21,
    PRODUCT_WO_VENDORS_MATCH_PRODUCT_ALIAS = 22,
    PRODUCT_WO_VENDORS_UNMATCHED_PRODUCT_ALIAS = 23,
    PRODUCT_WO_VENDORS_MATCH_ORG_ALIAS = 24,
    PRODUCT_WO_VENDORS_UNMATCHED_ORG_ALIAS = 25,
    PRODUCT_WO_VENDORS_MATCH_GLOBAL_ALIAS = 26,
    PRODUCT_WO_VENDORS_UNMATCHED_GLOBAL_ALIAS = 27,
    PRODUCT_WO_VENDORS_MATCH_UNIQUE_KEY = 28,
    PRODUCT_WO_VENDORS_UNMATCHED_UNIQUE_KEY = 29,
    PRODUCT_POSSIBLE_MATCHES_WITH_VENDOR = 30,
    PRODUCT_POSSIBLE_MATCHES_WO_VENDOR = 31,
    ONE_PRODUCT_MATCH_WITH_VENDOR_MATCH = 32,
    ONE_PRODUCT_MATCH_WO_VENDOR_MATCH = 33,
    ONE_PRODUCT_MATCH_NO_VENDOR_PROVIDED = 34,
    USER_SELECTED_PRODUCT_MATCH = 35,
    RESCAN_REQUESTED = 36,
    PRODUCT_MATCHED = 37,
    NO_VERSION_PARSER_SET = 38,
    VERSION_REPARSE_REQUESTED = 39,
    HAS_PARSER = 40,
    VERSION_PARSE_ERROR = 41,
    VERSION_PARSED = 42,
    PRODUCT_VERSION_NOT_FOUND = 43,
    NEW_PRODUCT_VERSION_CREATED = 44,
    HAVE_PRODUCT_VERSION = 45,
    SBOM_ENTRY_LINKED_TO_PRODUCT_VERSION = 46,
    FAILED = 47,
    ONE_PRODUCT_MATCH_BY_USER = 48
}
export enum SbomEntryStatus {
    LIVE = 0,
    ARCHIVED = 1
}
export enum SbomEntryPurlSource {
    NONE = 0,
    NUGET = 3,
    PYPI = 4,
    NPM = 5,
    CARGO = 6
}
export class SbomEntryFilter extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        searchString?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("searchString" in data && data.searchString != undefined) {
                this.searchString = data.searchString;
            }
        }
    }
    get searchString() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set searchString(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        searchString?: string;
    }): SbomEntryFilter {
        const message = new SbomEntryFilter({});
        if (data.searchString != null) {
            message.searchString = data.searchString;
        }
        return message;
    }
    toObject() {
        const data: {
            searchString?: string;
        } = {};
        if (this.searchString != null) {
            data.searchString = this.searchString;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.searchString.length)
            writer.writeString(1, this.searchString);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SbomEntryFilter {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SbomEntryFilter();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.searchString = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SbomEntryFilter {
        return SbomEntryFilter.deserialize(bytes);
    }
}
export class ListSbomEntries extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: ListSbomEntriesRequest;
        response?: never;
    } | {
        request?: never;
        response?: ListSbomEntriesResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, ListSbomEntriesRequest, 1) as ListSbomEntriesRequest;
    }
    set request(value: ListSbomEntriesRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, ListSbomEntriesResponse, 2) as ListSbomEntriesResponse;
    }
    set response(value: ListSbomEntriesResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof ListSbomEntriesRequest.prototype.toObject>;
        response?: ReturnType<typeof ListSbomEntriesResponse.prototype.toObject>;
    }): ListSbomEntries {
        const message = new ListSbomEntries({});
        if (data.request != null) {
            message.request = ListSbomEntriesRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = ListSbomEntriesResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof ListSbomEntriesRequest.prototype.toObject>;
            response?: ReturnType<typeof ListSbomEntriesResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListSbomEntries {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListSbomEntries();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = ListSbomEntriesRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = ListSbomEntriesResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListSbomEntries {
        return ListSbomEntries.deserialize(bytes);
    }
}
export class ListSbomEntriesRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.RequestMetadata;
        organizationProductVersionId?: dependency_1.UUID;
        page?: dependency_1.Page;
        filter?: SbomEntryFilter;
        order?: dependency_1.SbomEntryOrder[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("organizationProductVersionId" in data && data.organizationProductVersionId != undefined) {
                this.organizationProductVersionId = data.organizationProductVersionId;
            }
            if ("page" in data && data.page != undefined) {
                this.page = data.page;
            }
            if ("filter" in data && data.filter != undefined) {
                this.filter = data.filter;
            }
            if ("order" in data && data.order != undefined) {
                this.order = data.order;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.RequestMetadata, 1) as dependency_1.RequestMetadata;
    }
    set metadata(value: dependency_1.RequestMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get organizationProductVersionId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 2) as dependency_1.UUID;
    }
    set organizationProductVersionId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasOrganizationProductVersionId() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get page() {
        return pb_1.Message.getWrapperField(this, dependency_1.Page, 3) as dependency_1.Page;
    }
    set page(value: dependency_1.Page) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasPage() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get filter() {
        return pb_1.Message.getWrapperField(this, SbomEntryFilter, 4) as SbomEntryFilter;
    }
    set filter(value: SbomEntryFilter) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasFilter() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get order() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.SbomEntryOrder, 5) as dependency_1.SbomEntryOrder[];
    }
    set order(value: dependency_1.SbomEntryOrder[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
        organizationProductVersionId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        page?: ReturnType<typeof dependency_1.Page.prototype.toObject>;
        filter?: ReturnType<typeof SbomEntryFilter.prototype.toObject>;
        order?: ReturnType<typeof dependency_1.SbomEntryOrder.prototype.toObject>[];
    }): ListSbomEntriesRequest {
        const message = new ListSbomEntriesRequest({});
        if (data.metadata != null) {
            message.metadata = dependency_1.RequestMetadata.fromObject(data.metadata);
        }
        if (data.organizationProductVersionId != null) {
            message.organizationProductVersionId = dependency_1.UUID.fromObject(data.organizationProductVersionId);
        }
        if (data.page != null) {
            message.page = dependency_1.Page.fromObject(data.page);
        }
        if (data.filter != null) {
            message.filter = SbomEntryFilter.fromObject(data.filter);
        }
        if (data.order != null) {
            message.order = data.order.map(item => dependency_1.SbomEntryOrder.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.RequestMetadata.prototype.toObject>;
            organizationProductVersionId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            page?: ReturnType<typeof dependency_1.Page.prototype.toObject>;
            filter?: ReturnType<typeof SbomEntryFilter.prototype.toObject>;
            order?: ReturnType<typeof dependency_1.SbomEntryOrder.prototype.toObject>[];
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.organizationProductVersionId != null) {
            data.organizationProductVersionId = this.organizationProductVersionId.toObject();
        }
        if (this.page != null) {
            data.page = this.page.toObject();
        }
        if (this.filter != null) {
            data.filter = this.filter.toObject();
        }
        if (this.order != null) {
            data.order = this.order.map((item: dependency_1.SbomEntryOrder) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasOrganizationProductVersionId)
            writer.writeMessage(2, this.organizationProductVersionId, () => this.organizationProductVersionId.serialize(writer));
        if (this.hasPage)
            writer.writeMessage(3, this.page, () => this.page.serialize(writer));
        if (this.hasFilter)
            writer.writeMessage(4, this.filter, () => this.filter.serialize(writer));
        if (this.order.length)
            writer.writeRepeatedMessage(5, this.order, (item: dependency_1.SbomEntryOrder) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListSbomEntriesRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListSbomEntriesRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.RequestMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.organizationProductVersionId, () => message.organizationProductVersionId = dependency_1.UUID.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.page, () => message.page = dependency_1.Page.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.filter, () => message.filter = SbomEntryFilter.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.order, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.SbomEntryOrder.deserialize(reader), dependency_1.SbomEntryOrder));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListSbomEntriesRequest {
        return ListSbomEntriesRequest.deserialize(bytes);
    }
}
export class ListSbomEntriesResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        sbomEntry?: SbomEntry[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("sbomEntry" in data && data.sbomEntry != undefined) {
                this.sbomEntry = data.sbomEntry;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get sbomEntry() {
        return pb_1.Message.getRepeatedWrapperField(this, SbomEntry, 2) as SbomEntry[];
    }
    set sbomEntry(value: SbomEntry[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        sbomEntry?: ReturnType<typeof SbomEntry.prototype.toObject>[];
    }): ListSbomEntriesResponse {
        const message = new ListSbomEntriesResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.sbomEntry != null) {
            message.sbomEntry = data.sbomEntry.map(item => SbomEntry.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            sbomEntry?: ReturnType<typeof SbomEntry.prototype.toObject>[];
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.sbomEntry != null) {
            data.sbomEntry = this.sbomEntry.map((item: SbomEntry) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.sbomEntry.length)
            writer.writeRepeatedMessage(2, this.sbomEntry, (item: SbomEntry) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListSbomEntriesResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListSbomEntriesResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.sbomEntry, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SbomEntry.deserialize(reader), SbomEntry));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListSbomEntriesResponse {
        return ListSbomEntriesResponse.deserialize(bytes);
    }
}
