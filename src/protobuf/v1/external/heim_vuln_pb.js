/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var heim_common_pb = require('../../heim_common_pb.js');
var v1_external_heim_organization_product_pb = require('../../v1/external/heim_organization_product_pb.js');
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.BaseScore', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.BaseScore.AttackComplexity', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.BaseScore.AttackVector', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.BaseScore.Availability', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.BaseScore.Confidentiality', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.BaseScore.Integrity', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.BaseScore.PrivilegesRequired', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.BaseScore.Scope', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.BaseScore.UserInteraction', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.CycloneDxRemediationState', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.CycloneDxVexStatus', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.PatchState', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.ReferenceLink', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.Severity', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.Severity.RescoreType', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.Severity.Type', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.TextData', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.VulnSource', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.Vulnerability', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.Type', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder', null, global);
goog.exportSymbol('proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.Column', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.vuln.Severity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.vuln.Severity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.vuln.Severity.displayName = 'proto.medcrypt.helm.api.v1.vuln.Severity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.vuln.Severity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.vuln.Severity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.Severity.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    score: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    version: jspb.Message.getFieldWithDefault(msg, 3, ""),
    baseScore: (f = msg.getBaseScore()) && proto.medcrypt.helm.api.v1.vuln.BaseScore.toObject(includeInstance, f),
    rescoretype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    newScore: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    newTemporalScore: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    newEnvironmentalScore: +jspb.Message.getFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.vuln.Severity}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.vuln.Severity;
  return proto.medcrypt.helm.api.v1.vuln.Severity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.vuln.Severity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.vuln.Severity}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.Severity.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setScore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = new proto.medcrypt.helm.api.v1.vuln.BaseScore;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.vuln.BaseScore.deserializeBinaryFromReader);
      msg.setBaseScore(value);
      break;
    case 5:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.Severity.RescoreType} */ (reader.readEnum());
      msg.setRescoretype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNewScore(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNewTemporalScore(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNewEnvironmentalScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.vuln.Severity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.vuln.Severity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.Severity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getScore();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBaseScore();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.medcrypt.helm.api.v1.vuln.BaseScore.serializeBinaryToWriter
    );
  }
  f = message.getRescoretype();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getNewScore();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getNewTemporalScore();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getNewEnvironmentalScore();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.Type = {
  HEIMDALL: 0,
  CVSS: 1
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.RescoreType = {
  NONE: 0,
  PROFILE: 1,
  ITEM: 2
};

/**
 * optional Type type = 1;
 * @return {!proto.medcrypt.helm.api.v1.vuln.Severity.Type}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.getType = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.Severity.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.Severity.Type} value */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double score = 2;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.getScore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.setScore = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional BaseScore base_score = 4;
 * @return {?proto.medcrypt.helm.api.v1.vuln.BaseScore}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.getBaseScore = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.vuln.BaseScore} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.vuln.BaseScore, 4));
};


/** @param {?proto.medcrypt.helm.api.v1.vuln.BaseScore|undefined} value */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.setBaseScore = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.medcrypt.helm.api.v1.vuln.Severity.prototype.clearBaseScore = function() {
  this.setBaseScore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.hasBaseScore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RescoreType rescoreType = 5;
 * @return {!proto.medcrypt.helm.api.v1.vuln.Severity.RescoreType}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.getRescoretype = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.Severity.RescoreType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.Severity.RescoreType} value */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.setRescoretype = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional double new_score = 6;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.getNewScore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.setNewScore = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double new_temporal_score = 7;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.getNewTemporalScore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.setNewTemporalScore = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double new_environmental_score = 8;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.getNewEnvironmentalScore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.Severity.prototype.setNewEnvironmentalScore = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.vuln.BaseScore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.vuln.BaseScore.displayName = 'proto.medcrypt.helm.api.v1.vuln.BaseScore';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.vuln.BaseScore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.vuln.BaseScore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.toObject = function(includeInstance, msg) {
  var f, obj = {
    attackVector: jspb.Message.getFieldWithDefault(msg, 1, 0),
    attackComplexity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    privilegesRequired: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userInteraction: jspb.Message.getFieldWithDefault(msg, 4, 0),
    scope: jspb.Message.getFieldWithDefault(msg, 5, 0),
    confidentiality: jspb.Message.getFieldWithDefault(msg, 6, 0),
    integrity: jspb.Message.getFieldWithDefault(msg, 7, 0),
    availability: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.vuln.BaseScore}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.vuln.BaseScore;
  return proto.medcrypt.helm.api.v1.vuln.BaseScore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.vuln.BaseScore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.vuln.BaseScore}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.AttackVector} */ (reader.readEnum());
      msg.setAttackVector(value);
      break;
    case 2:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.AttackComplexity} */ (reader.readEnum());
      msg.setAttackComplexity(value);
      break;
    case 3:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.PrivilegesRequired} */ (reader.readEnum());
      msg.setPrivilegesRequired(value);
      break;
    case 4:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.UserInteraction} */ (reader.readEnum());
      msg.setUserInteraction(value);
      break;
    case 5:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Scope} */ (reader.readEnum());
      msg.setScope(value);
      break;
    case 6:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Confidentiality} */ (reader.readEnum());
      msg.setConfidentiality(value);
      break;
    case 7:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Integrity} */ (reader.readEnum());
      msg.setIntegrity(value);
      break;
    case 8:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Availability} */ (reader.readEnum());
      msg.setAvailability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.vuln.BaseScore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.vuln.BaseScore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttackVector();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAttackComplexity();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPrivilegesRequired();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getUserInteraction();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getScope();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getConfidentiality();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getIntegrity();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getAvailability();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.AttackVector = {
  AV_NETWORK: 0,
  AV_ADJACENT: 1,
  AV_LOCAL: 2,
  AV_PHYSICAL: 3
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.AttackComplexity = {
  AC_HIGH: 0,
  AC_LOW: 1
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.PrivilegesRequired = {
  PR_HIGH: 0,
  PR_LOW: 1,
  PR_NONE: 2
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.UserInteraction = {
  UI_NONE: 0,
  UI_REQUIRED: 1
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.Scope = {
  S_UNCHANGED: 0,
  S_CHANGED: 1
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.Confidentiality = {
  C_HIGH: 0,
  C_LOW: 1,
  C_NONE: 2
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.Integrity = {
  I_HIGH: 0,
  I_LOW: 1,
  I_NONE: 2
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.Availability = {
  A_HIGH: 0,
  A_LOW: 1,
  A_NONE: 2
};

/**
 * optional AttackVector attack_vector = 1;
 * @return {!proto.medcrypt.helm.api.v1.vuln.BaseScore.AttackVector}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.getAttackVector = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.AttackVector} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.BaseScore.AttackVector} value */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.setAttackVector = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional AttackComplexity attack_complexity = 2;
 * @return {!proto.medcrypt.helm.api.v1.vuln.BaseScore.AttackComplexity}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.getAttackComplexity = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.AttackComplexity} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.BaseScore.AttackComplexity} value */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.setAttackComplexity = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional PrivilegesRequired privileges_required = 3;
 * @return {!proto.medcrypt.helm.api.v1.vuln.BaseScore.PrivilegesRequired}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.getPrivilegesRequired = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.PrivilegesRequired} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.BaseScore.PrivilegesRequired} value */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.setPrivilegesRequired = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional UserInteraction user_interaction = 4;
 * @return {!proto.medcrypt.helm.api.v1.vuln.BaseScore.UserInteraction}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.getUserInteraction = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.UserInteraction} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.BaseScore.UserInteraction} value */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.setUserInteraction = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Scope scope = 5;
 * @return {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Scope}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.getScope = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Scope} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Scope} value */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.setScope = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional Confidentiality confidentiality = 6;
 * @return {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Confidentiality}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.getConfidentiality = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Confidentiality} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Confidentiality} value */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.setConfidentiality = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional Integrity integrity = 7;
 * @return {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Integrity}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.getIntegrity = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Integrity} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Integrity} value */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.setIntegrity = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional Availability availability = 8;
 * @return {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Availability}
 */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.getAvailability = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Availability} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.BaseScore.Availability} value */
proto.medcrypt.helm.api.v1.vuln.BaseScore.prototype.setAvailability = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.displayName = 'proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    severityList: jspb.Message.toObjectList(msg.getSeverityList(),
    proto.medcrypt.helm.api.v1.vuln.Severity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact;
  return proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.vuln.Severity;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.vuln.Severity.deserializeBinaryFromReader);
      msg.addSeverity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSeverityList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.vuln.Severity.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.Type = {
  UNRESOLVED: 0,
  DOES_NOT_APPLY: 1,
  PATCH_REQUIRED: 2
};

/**
 * optional Type type = 1;
 * @return {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.Type}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.prototype.getType = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.Type} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated Severity severity = 2;
 * @return {!Array.<!proto.medcrypt.helm.api.v1.vuln.Severity>}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.prototype.getSeverityList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.api.v1.vuln.Severity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.api.v1.vuln.Severity, 2));
};


/** @param {!Array.<!proto.medcrypt.helm.api.v1.vuln.Severity>} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.prototype.setSeverityList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.medcrypt.helm.api.v1.vuln.Severity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.api.v1.vuln.Severity}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.prototype.addSeverity = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.medcrypt.helm.api.v1.vuln.Severity, opt_index);
};


proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.prototype.clearSeverityList = function() {
  this.setSeverityList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.vuln.TextData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.vuln.TextData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.vuln.TextData.displayName = 'proto.medcrypt.helm.api.v1.vuln.TextData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.vuln.TextData.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.vuln.TextData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.vuln.TextData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.TextData.toObject = function(includeInstance, msg) {
  var f, obj = {
    langCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.vuln.TextData}
 */
proto.medcrypt.helm.api.v1.vuln.TextData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.vuln.TextData;
  return proto.medcrypt.helm.api.v1.vuln.TextData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.vuln.TextData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.vuln.TextData}
 */
proto.medcrypt.helm.api.v1.vuln.TextData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLangCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.vuln.TextData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.vuln.TextData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.vuln.TextData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.TextData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLangCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string lang_code = 1;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.TextData.prototype.getLangCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.TextData.prototype.setLangCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.TextData.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.TextData.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.api.v1.vuln.ReferenceLink.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.vuln.ReferenceLink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.vuln.ReferenceLink.displayName = 'proto.medcrypt.helm.api.v1.vuln.ReferenceLink';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.vuln.ReferenceLink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.vuln.ReferenceLink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.toObject = function(includeInstance, msg) {
  var f, obj = {
    referenceLinkHref: jspb.Message.getFieldWithDefault(msg, 1, ""),
    referenceLinkName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    referenceLinkSource: jspb.Message.getFieldWithDefault(msg, 3, ""),
    referenceLinkTagList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.vuln.ReferenceLink}
 */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.vuln.ReferenceLink;
  return proto.medcrypt.helm.api.v1.vuln.ReferenceLink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.vuln.ReferenceLink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.vuln.ReferenceLink}
 */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceLinkHref(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceLinkName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceLinkSource(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addReferenceLinkTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.vuln.ReferenceLink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.vuln.ReferenceLink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReferenceLinkHref();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReferenceLinkName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReferenceLinkSource();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReferenceLinkTagList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string reference_link_href = 1;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.prototype.getReferenceLinkHref = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.prototype.setReferenceLinkHref = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reference_link_name = 2;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.prototype.getReferenceLinkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.prototype.setReferenceLinkName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string reference_link_source = 3;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.prototype.getReferenceLinkSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.prototype.setReferenceLinkSource = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string reference_link_tag = 4;
 * @return {!Array.<string>}
 */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.prototype.getReferenceLinkTagList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<string>} value */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.prototype.setReferenceLinkTagList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.medcrypt.helm.api.v1.vuln.ReferenceLink.prototype.addReferenceLinkTag = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.medcrypt.helm.api.v1.vuln.ReferenceLink.prototype.clearReferenceLinkTagList = function() {
  this.setReferenceLinkTagList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.api.v1.vuln.Vulnerability.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.vuln.Vulnerability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.vuln.Vulnerability.displayName = 'proto.medcrypt.helm.api.v1.vuln.Vulnerability';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.repeatedFields_ = [15,22,23,24];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.vuln.Vulnerability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.vuln.Vulnerability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizationProductId: (f = msg.getOrganizationProductId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    organizationProductName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    organizationProductVersionId: (f = msg.getOrganizationProductVersionId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    organizationProductVersionString: jspb.Message.getFieldWithDefault(msg, 4, ""),
    vendorId: (f = msg.getVendorId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    vendorDisplayName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    productId: (f = msg.getProductId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    productDisplayName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    productVersionString: jspb.Message.getFieldWithDefault(msg, 9, ""),
    vulnerabilityId: (f = msg.getVulnerabilityId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    vulnerabilityKey: jspb.Message.getFieldWithDefault(msg, 11, ""),
    vulnerabilityPublishedDate: jspb.Message.getFieldWithDefault(msg, 12, ""),
    vulnerabilityModifiedDate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    vulnerabilitySummary: jspb.Message.getFieldWithDefault(msg, 14, ""),
    vulnerabilitySeverityList: jspb.Message.toObjectList(msg.getVulnerabilitySeverityList(),
    proto.medcrypt.helm.api.v1.vuln.Severity.toObject, includeInstance),
    vulnerabilityImpact: (f = msg.getVulnerabilityImpact()) && proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.toObject(includeInstance, f),
    dependencyId: (f = msg.getDependencyId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    vulnerabilityAnnalId: (f = msg.getVulnerabilityAnnalId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    vulnerabilityAnnalCreatedAt: jspb.Message.getFieldWithDefault(msg, 19, 0),
    userImpactVulnerabilityAnnalId: (f = msg.getUserImpactVulnerabilityAnnalId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    userImpactVulnerabilityAnnalCreatedAt: jspb.Message.getFieldWithDefault(msg, 21, 0),
    descriptionList: jspb.Message.toObjectList(msg.getDescriptionList(),
    proto.medcrypt.helm.api.v1.vuln.TextData.toObject, includeInstance),
    problemsList: jspb.Message.toObjectList(msg.getProblemsList(),
    proto.medcrypt.helm.api.v1.vuln.TextData.toObject, includeInstance),
    referenceLinkList: jspb.Message.toObjectList(msg.getReferenceLinkList(),
    proto.medcrypt.helm.api.v1.vuln.ReferenceLink.toObject, includeInstance),
    vulnerabilityNote: jspb.Message.getFieldWithDefault(msg, 25, ""),
    isModify: jspb.Message.getFieldWithDefault(msg, 26, false),
    cvssV2VectorString: jspb.Message.getFieldWithDefault(msg, 27, ""),
    cvssV3VectorString: jspb.Message.getFieldWithDefault(msg, 28, ""),
    vulnerabilityAssociationDate: jspb.Message.getFieldWithDefault(msg, 29, 0),
    vulnerabilityPublishedTimestamp: jspb.Message.getFieldWithDefault(msg, 30, 0),
    vulnerabilityModifiedTimestamp: jspb.Message.getFieldWithDefault(msg, 31, 0),
    patchState: jspb.Message.getFieldWithDefault(msg, 32, 0),
    cisaKev: jspb.Message.getFieldWithDefault(msg, 33, false),
    topCwe: jspb.Message.getFieldWithDefault(msg, 34, false),
    exploitDb: jspb.Message.getFieldWithDefault(msg, 35, false),
    metasploit: jspb.Message.getFieldWithDefault(msg, 36, false),
    epssScore: jspb.Message.getFieldWithDefault(msg, 37, ""),
    ai: jspb.Message.getFieldWithDefault(msg, 40, false),
    cdxRemediationEvidence: jspb.Message.getFieldWithDefault(msg, 41, ""),
    vexRemediationEvidence: jspb.Message.getFieldWithDefault(msg, 42, ""),
    cdxVexStatus: jspb.Message.getFieldWithDefault(msg, 43, 0),
    cdxRemediationState: jspb.Message.getFieldWithDefault(msg, 44, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.vuln.Vulnerability}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.vuln.Vulnerability;
  return proto.medcrypt.helm.api.v1.vuln.Vulnerability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.vuln.Vulnerability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.vuln.Vulnerability}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setOrganizationProductId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationProductName(value);
      break;
    case 3:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setOrganizationProductVersionId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationProductVersionString(value);
      break;
    case 5:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVendorId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendorDisplayName(value);
      break;
    case 7:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setProductId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductDisplayName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductVersionString(value);
      break;
    case 10:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVulnerabilityId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setVulnerabilityKey(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setVulnerabilityPublishedDate(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setVulnerabilityModifiedDate(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setVulnerabilitySummary(value);
      break;
    case 15:
      var value = new proto.medcrypt.helm.api.v1.vuln.Severity;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.vuln.Severity.deserializeBinaryFromReader);
      msg.addVulnerabilitySeverity(value);
      break;
    case 16:
      var value = new proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.deserializeBinaryFromReader);
      msg.setVulnerabilityImpact(value);
      break;
    case 17:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setDependencyId(value);
      break;
    case 18:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVulnerabilityAnnalId(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVulnerabilityAnnalCreatedAt(value);
      break;
    case 20:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setUserImpactVulnerabilityAnnalId(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserImpactVulnerabilityAnnalCreatedAt(value);
      break;
    case 22:
      var value = new proto.medcrypt.helm.api.v1.vuln.TextData;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.vuln.TextData.deserializeBinaryFromReader);
      msg.addDescription(value);
      break;
    case 23:
      var value = new proto.medcrypt.helm.api.v1.vuln.TextData;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.vuln.TextData.deserializeBinaryFromReader);
      msg.addProblems(value);
      break;
    case 24:
      var value = new proto.medcrypt.helm.api.v1.vuln.ReferenceLink;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.vuln.ReferenceLink.deserializeBinaryFromReader);
      msg.addReferenceLink(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setVulnerabilityNote(value);
      break;
    case 26:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsModify(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setCvssV2VectorString(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setCvssV3VectorString(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVulnerabilityAssociationDate(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVulnerabilityPublishedTimestamp(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVulnerabilityModifiedTimestamp(value);
      break;
    case 32:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.PatchState} */ (reader.readEnum());
      msg.setPatchState(value);
      break;
    case 33:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCisaKev(value);
      break;
    case 34:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTopCwe(value);
      break;
    case 35:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExploitDb(value);
      break;
    case 36:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMetasploit(value);
      break;
    case 37:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpssScore(value);
      break;
    case 40:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAi(value);
      break;
    case 41:
      var value = /** @type {string} */ (reader.readString());
      msg.setCdxRemediationEvidence(value);
      break;
    case 42:
      var value = /** @type {string} */ (reader.readString());
      msg.setVexRemediationEvidence(value);
      break;
    case 43:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.CycloneDxVexStatus} */ (reader.readEnum());
      msg.setCdxVexStatus(value);
      break;
    case 44:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.CycloneDxRemediationState} */ (reader.readEnum());
      msg.setCdxRemediationState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.vuln.Vulnerability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.vuln.Vulnerability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganizationProductId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationProductName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrganizationProductVersionId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationProductVersionString();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVendorId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVendorDisplayName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getProductId();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getProductDisplayName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getProductVersionString();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getVulnerabilityId();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVulnerabilityKey();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getVulnerabilityPublishedDate();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getVulnerabilityModifiedDate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getVulnerabilitySummary();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getVulnerabilitySeverityList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.medcrypt.helm.api.v1.vuln.Severity.serializeBinaryToWriter
    );
  }
  f = message.getVulnerabilityImpact();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact.serializeBinaryToWriter
    );
  }
  f = message.getDependencyId();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVulnerabilityAnnalId();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVulnerabilityAnnalCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      19,
      f
    );
  }
  f = message.getUserImpactVulnerabilityAnnalId();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getUserImpactVulnerabilityAnnalCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      21,
      f
    );
  }
  f = message.getDescriptionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.medcrypt.helm.api.v1.vuln.TextData.serializeBinaryToWriter
    );
  }
  f = message.getProblemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      23,
      f,
      proto.medcrypt.helm.api.v1.vuln.TextData.serializeBinaryToWriter
    );
  }
  f = message.getReferenceLinkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      24,
      f,
      proto.medcrypt.helm.api.v1.vuln.ReferenceLink.serializeBinaryToWriter
    );
  }
  f = message.getVulnerabilityNote();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getIsModify();
  if (f) {
    writer.writeBool(
      26,
      f
    );
  }
  f = message.getCvssV2VectorString();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = message.getCvssV3VectorString();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getVulnerabilityAssociationDate();
  if (f !== 0) {
    writer.writeInt64(
      29,
      f
    );
  }
  f = message.getVulnerabilityPublishedTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      30,
      f
    );
  }
  f = message.getVulnerabilityModifiedTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      31,
      f
    );
  }
  f = message.getPatchState();
  if (f !== 0.0) {
    writer.writeEnum(
      32,
      f
    );
  }
  f = message.getCisaKev();
  if (f) {
    writer.writeBool(
      33,
      f
    );
  }
  f = message.getTopCwe();
  if (f) {
    writer.writeBool(
      34,
      f
    );
  }
  f = message.getExploitDb();
  if (f) {
    writer.writeBool(
      35,
      f
    );
  }
  f = message.getMetasploit();
  if (f) {
    writer.writeBool(
      36,
      f
    );
  }
  f = message.getEpssScore();
  if (f.length > 0) {
    writer.writeString(
      37,
      f
    );
  }
  f = message.getAi();
  if (f) {
    writer.writeBool(
      40,
      f
    );
  }
  f = message.getCdxRemediationEvidence();
  if (f.length > 0) {
    writer.writeString(
      41,
      f
    );
  }
  f = message.getVexRemediationEvidence();
  if (f.length > 0) {
    writer.writeString(
      42,
      f
    );
  }
  f = message.getCdxVexStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      43,
      f
    );
  }
  f = message.getCdxRemediationState();
  if (f !== 0.0) {
    writer.writeEnum(
      44,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.UUID organization_product_id = 1;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getOrganizationProductId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setOrganizationProductId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.clearOrganizationProductId = function() {
  this.setOrganizationProductId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.hasOrganizationProductId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string organization_product_name = 2;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getOrganizationProductName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setOrganizationProductName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional medcrypt.heimdall.web.common.UUID organization_product_version_id = 3;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getOrganizationProductVersionId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 3));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setOrganizationProductVersionId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.clearOrganizationProductVersionId = function() {
  this.setOrganizationProductVersionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.hasOrganizationProductVersionId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string organization_product_version_string = 4;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getOrganizationProductVersionString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setOrganizationProductVersionString = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional medcrypt.heimdall.web.common.UUID vendor_id = 5;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVendorId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 5));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVendorId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.clearVendorId = function() {
  this.setVendorId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.hasVendorId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string vendor_display_name = 6;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVendorDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVendorDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional medcrypt.heimdall.web.common.UUID product_id = 7;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getProductId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 7));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setProductId = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.clearProductId = function() {
  this.setProductId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.hasProductId = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string product_display_name = 8;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getProductDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setProductDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string product_version_string = 9;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getProductVersionString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setProductVersionString = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional medcrypt.heimdall.web.common.UUID vulnerability_id = 10;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVulnerabilityId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 10));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVulnerabilityId = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.clearVulnerabilityId = function() {
  this.setVulnerabilityId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.hasVulnerabilityId = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string vulnerability_key = 11;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVulnerabilityKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVulnerabilityKey = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string vulnerability_published_date = 12;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVulnerabilityPublishedDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVulnerabilityPublishedDate = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string vulnerability_modified_date = 13;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVulnerabilityModifiedDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVulnerabilityModifiedDate = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string vulnerability_summary = 14;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVulnerabilitySummary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVulnerabilitySummary = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * repeated Severity vulnerability_severity = 15;
 * @return {!Array.<!proto.medcrypt.helm.api.v1.vuln.Severity>}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVulnerabilitySeverityList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.api.v1.vuln.Severity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.api.v1.vuln.Severity, 15));
};


/** @param {!Array.<!proto.medcrypt.helm.api.v1.vuln.Severity>} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVulnerabilitySeverityList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.medcrypt.helm.api.v1.vuln.Severity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.api.v1.vuln.Severity}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.addVulnerabilitySeverity = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.medcrypt.helm.api.v1.vuln.Severity, opt_index);
};


proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.clearVulnerabilitySeverityList = function() {
  this.setVulnerabilitySeverityList([]);
};


/**
 * optional VulnerabilityImpact vulnerability_impact = 16;
 * @return {?proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVulnerabilityImpact = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact, 16));
};


/** @param {?proto.medcrypt.helm.api.v1.vuln.VulnerabilityImpact|undefined} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVulnerabilityImpact = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.clearVulnerabilityImpact = function() {
  this.setVulnerabilityImpact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.hasVulnerabilityImpact = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID dependency_id = 17;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getDependencyId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 17));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setDependencyId = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.clearDependencyId = function() {
  this.setDependencyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.hasDependencyId = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID vulnerability_annal_id = 18;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVulnerabilityAnnalId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 18));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVulnerabilityAnnalId = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.clearVulnerabilityAnnalId = function() {
  this.setVulnerabilityAnnalId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.hasVulnerabilityAnnalId = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional int64 vulnerability_annal_created_at = 19;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVulnerabilityAnnalCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVulnerabilityAnnalCreatedAt = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional medcrypt.heimdall.web.common.UUID user_impact_vulnerability_annal_id = 20;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getUserImpactVulnerabilityAnnalId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 20));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setUserImpactVulnerabilityAnnalId = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.clearUserImpactVulnerabilityAnnalId = function() {
  this.setUserImpactVulnerabilityAnnalId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.hasUserImpactVulnerabilityAnnalId = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional int64 user_impact_vulnerability_annal_created_at = 21;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getUserImpactVulnerabilityAnnalCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setUserImpactVulnerabilityAnnalCreatedAt = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * repeated TextData description = 22;
 * @return {!Array.<!proto.medcrypt.helm.api.v1.vuln.TextData>}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getDescriptionList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.api.v1.vuln.TextData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.api.v1.vuln.TextData, 22));
};


/** @param {!Array.<!proto.medcrypt.helm.api.v1.vuln.TextData>} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setDescriptionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.medcrypt.helm.api.v1.vuln.TextData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.api.v1.vuln.TextData}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.addDescription = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.medcrypt.helm.api.v1.vuln.TextData, opt_index);
};


proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.clearDescriptionList = function() {
  this.setDescriptionList([]);
};


/**
 * repeated TextData problems = 23;
 * @return {!Array.<!proto.medcrypt.helm.api.v1.vuln.TextData>}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getProblemsList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.api.v1.vuln.TextData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.api.v1.vuln.TextData, 23));
};


/** @param {!Array.<!proto.medcrypt.helm.api.v1.vuln.TextData>} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setProblemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 23, value);
};


/**
 * @param {!proto.medcrypt.helm.api.v1.vuln.TextData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.api.v1.vuln.TextData}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.addProblems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 23, opt_value, proto.medcrypt.helm.api.v1.vuln.TextData, opt_index);
};


proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.clearProblemsList = function() {
  this.setProblemsList([]);
};


/**
 * repeated ReferenceLink reference_link = 24;
 * @return {!Array.<!proto.medcrypt.helm.api.v1.vuln.ReferenceLink>}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getReferenceLinkList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.api.v1.vuln.ReferenceLink>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.api.v1.vuln.ReferenceLink, 24));
};


/** @param {!Array.<!proto.medcrypt.helm.api.v1.vuln.ReferenceLink>} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setReferenceLinkList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 24, value);
};


/**
 * @param {!proto.medcrypt.helm.api.v1.vuln.ReferenceLink=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.api.v1.vuln.ReferenceLink}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.addReferenceLink = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 24, opt_value, proto.medcrypt.helm.api.v1.vuln.ReferenceLink, opt_index);
};


proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.clearReferenceLinkList = function() {
  this.setReferenceLinkList([]);
};


/**
 * optional string vulnerability_note = 25;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVulnerabilityNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVulnerabilityNote = function(value) {
  jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * optional bool is_modify = 26;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getIsModify = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 26, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setIsModify = function(value) {
  jspb.Message.setProto3BooleanField(this, 26, value);
};


/**
 * optional string cvss_v2_vector_string = 27;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getCvssV2VectorString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setCvssV2VectorString = function(value) {
  jspb.Message.setProto3StringField(this, 27, value);
};


/**
 * optional string cvss_v3_vector_string = 28;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getCvssV3VectorString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setCvssV3VectorString = function(value) {
  jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * optional int64 vulnerability_association_date = 29;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVulnerabilityAssociationDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVulnerabilityAssociationDate = function(value) {
  jspb.Message.setProto3IntField(this, 29, value);
};


/**
 * optional int64 vulnerability_published_timestamp = 30;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVulnerabilityPublishedTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVulnerabilityPublishedTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 30, value);
};


/**
 * optional int64 vulnerability_modified_timestamp = 31;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVulnerabilityModifiedTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVulnerabilityModifiedTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional PatchState patch_state = 32;
 * @return {!proto.medcrypt.helm.api.v1.vuln.PatchState}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getPatchState = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.PatchState} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.PatchState} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setPatchState = function(value) {
  jspb.Message.setProto3EnumField(this, 32, value);
};


/**
 * optional bool cisa_kev = 33;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getCisaKev = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 33, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setCisaKev = function(value) {
  jspb.Message.setProto3BooleanField(this, 33, value);
};


/**
 * optional bool top_cwe = 34;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getTopCwe = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 34, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setTopCwe = function(value) {
  jspb.Message.setProto3BooleanField(this, 34, value);
};


/**
 * optional bool exploit_db = 35;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getExploitDb = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 35, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setExploitDb = function(value) {
  jspb.Message.setProto3BooleanField(this, 35, value);
};


/**
 * optional bool metasploit = 36;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getMetasploit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 36, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setMetasploit = function(value) {
  jspb.Message.setProto3BooleanField(this, 36, value);
};


/**
 * optional string epss_score = 37;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getEpssScore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setEpssScore = function(value) {
  jspb.Message.setProto3StringField(this, 37, value);
};


/**
 * optional bool ai = 40;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getAi = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 40, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setAi = function(value) {
  jspb.Message.setProto3BooleanField(this, 40, value);
};


/**
 * optional string cdx_remediation_evidence = 41;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getCdxRemediationEvidence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 41, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setCdxRemediationEvidence = function(value) {
  jspb.Message.setProto3StringField(this, 41, value);
};


/**
 * optional string vex_remediation_evidence = 42;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getVexRemediationEvidence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 42, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setVexRemediationEvidence = function(value) {
  jspb.Message.setProto3StringField(this, 42, value);
};


/**
 * optional CycloneDxVexStatus cdx_vex_status = 43;
 * @return {!proto.medcrypt.helm.api.v1.vuln.CycloneDxVexStatus}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getCdxVexStatus = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.CycloneDxVexStatus} */ (jspb.Message.getFieldWithDefault(this, 43, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.CycloneDxVexStatus} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setCdxVexStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 43, value);
};


/**
 * optional CycloneDxRemediationState cdx_remediation_state = 44;
 * @return {!proto.medcrypt.helm.api.v1.vuln.CycloneDxRemediationState}
 */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.getCdxRemediationState = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.CycloneDxRemediationState} */ (jspb.Message.getFieldWithDefault(this, 44, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.CycloneDxRemediationState} value */
proto.medcrypt.helm.api.v1.vuln.Vulnerability.prototype.setCdxRemediationState = function(value) {
  jspb.Message.setProto3EnumField(this, 44, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.displayName = 'proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    vulnerabilitySourceId: (f = msg.getVulnerabilitySourceId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    vulnerabilityKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cvssBaseScore: jspb.Message.getFieldWithDefault(msg, 3, 0),
    vulnerabilityModified: (f = msg.getVulnerabilityModified()) && heim_common_pb.DateRange.toObject(includeInstance, f),
    organizationProductId: (f = msg.getOrganizationProductId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    organizationProductVersionId: (f = msg.getOrganizationProductVersionId()) && heim_common_pb.UUID.toObject(includeInstance, f),
    startDate: jspb.Message.getFieldWithDefault(msg, 7, 0),
    endDate: jspb.Message.getFieldWithDefault(msg, 8, 0),
    patchState: jspb.Message.getFieldWithDefault(msg, 10, 0),
    minimumCvssBaseScore: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    vulnSource: jspb.Message.getFieldWithDefault(msg, 12, 0),
    cisaKevOnly: jspb.Message.getFieldWithDefault(msg, 13, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter;
  return proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVulnerabilitySourceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVulnerabilityKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCvssBaseScore(value);
      break;
    case 4:
      var value = new heim_common_pb.DateRange;
      reader.readMessage(value,heim_common_pb.DateRange.deserializeBinaryFromReader);
      msg.setVulnerabilityModified(value);
      break;
    case 5:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setOrganizationProductId(value);
      break;
    case 6:
      var value = new heim_common_pb.UUID;
      reader.readMessage(value,heim_common_pb.UUID.deserializeBinaryFromReader);
      msg.setOrganizationProductVersionId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartDate(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndDate(value);
      break;
    case 10:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.PatchState} */ (reader.readEnum());
      msg.setPatchState(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinimumCvssBaseScore(value);
      break;
    case 12:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.VulnSource} */ (reader.readEnum());
      msg.setVulnSource(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCisaKevOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVulnerabilitySourceId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVulnerabilityKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCvssBaseScore();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getVulnerabilityModified();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      heim_common_pb.DateRange.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationProductId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationProductVersionId();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      heim_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getStartDate();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getEndDate();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getPatchState();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getMinimumCvssBaseScore();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getVulnSource();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getCisaKevOnly();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.UUID vulnerability_source_id = 1;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.getVulnerabilitySourceId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.setVulnerabilitySourceId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.clearVulnerabilitySourceId = function() {
  this.setVulnerabilitySourceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.hasVulnerabilitySourceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string vulnerability_key = 2;
 * @return {string}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.getVulnerabilityKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.setVulnerabilityKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 cvss_base_score = 3;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.getCvssBaseScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.setCvssBaseScore = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional medcrypt.heimdall.web.common.DateRange vulnerability_modified = 4;
 * @return {?proto.medcrypt.heimdall.web.common.DateRange}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.getVulnerabilityModified = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.DateRange} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.DateRange, 4));
};


/** @param {?proto.medcrypt.heimdall.web.common.DateRange|undefined} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.setVulnerabilityModified = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.clearVulnerabilityModified = function() {
  this.setVulnerabilityModified(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.hasVulnerabilityModified = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID organization_product_id = 5;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.getOrganizationProductId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 5));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.setOrganizationProductId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.clearOrganizationProductId = function() {
  this.setOrganizationProductId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.hasOrganizationProductId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional medcrypt.heimdall.web.common.UUID organization_product_version_id = 6;
 * @return {?proto.medcrypt.heimdall.web.common.UUID}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.getOrganizationProductVersionId = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.UUID} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.UUID, 6));
};


/** @param {?proto.medcrypt.heimdall.web.common.UUID|undefined} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.setOrganizationProductVersionId = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.clearOrganizationProductVersionId = function() {
  this.setOrganizationProductVersionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.hasOrganizationProductVersionId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 start_date = 7;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.getStartDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.setStartDate = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 end_date = 8;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.getEndDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.setEndDate = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional PatchState patch_state = 10;
 * @return {!proto.medcrypt.helm.api.v1.vuln.PatchState}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.getPatchState = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.PatchState} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.PatchState} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.setPatchState = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional double minimum_cvss_base_score = 11;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.getMinimumCvssBaseScore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.setMinimumCvssBaseScore = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional VulnSource vuln_source = 12;
 * @return {!proto.medcrypt.helm.api.v1.vuln.VulnSource}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.getVulnSource = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.VulnSource} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.VulnSource} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.setVulnSource = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional bool cisa_kev_only = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.getCisaKevOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.prototype.setCisaKevOnly = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.displayName = 'proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    column: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isDescending: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder;
  return proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.Column} */ (reader.readEnum());
      msg.setColumn(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDescending(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumn();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIsDescending();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.Column = {
  ORGANIZATION_PRODUCT_NAME: 0,
  ORGANIZATION_PRODUCT_VERSION_STRING: 1,
  PRODUCT_NAME: 2,
  VENDOR_NAME: 3,
  PRODUCT_VERSION_STRING: 4,
  VULNERABILITY_ID: 5,
  SEVERITY: 6,
  VULN_MODIFIED: 7,
  VULN_PUBLISHED: 8,
  SUMMARY: 9,
  DEPENDENCY_VULNERABILITY_UPDATED: 11,
  EPSS: 12
};

/**
 * optional Column column = 1;
 * @return {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.Column}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.prototype.getColumn = function() {
  return /** @type {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.Column} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.Column} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.prototype.setColumn = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool is_descending = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.prototype.getIsDescending = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.prototype.setIsDescending = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.oneofGroups_);
};
goog.inherits(proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.displayName = 'proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * @return {proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.PayloadCase}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.prototype.getPayloadCase = function() {
  return /** @type {proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities;
  return proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.displayName = 'proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: (f = msg.getPage()) && heim_common_pb.Page.toObject(includeInstance, f),
    filter: (f = msg.getFilter()) && proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.toObject(includeInstance, f),
    orderList: jspb.Message.toObjectList(msg.getOrderList(),
    proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request;
  return proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.Page;
      reader.readMessage(value,heim_common_pb.Page.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 3:
      var value = new proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.deserializeBinaryFromReader);
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.Page.serializeBinaryToWriter
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter.serializeBinaryToWriter
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder.serializeBinaryToWriter
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.Page page = 1;
 * @return {?proto.medcrypt.heimdall.web.common.Page}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.getPage = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.Page} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.Page, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.Page|undefined} value */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.setPage = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.hasPage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VulnerabilityFilter filter = 2;
 * @return {?proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.getFilter = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter, 2));
};


/** @param {?proto.medcrypt.helm.api.v1.vuln.VulnerabilityFilter|undefined} value */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated VulnerabilityOrder order = 3;
 * @return {!Array.<!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder>}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.getOrderList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder, 3));
};


/** @param {!Array.<!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder>} value */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.setOrderList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.addOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.medcrypt.helm.api.v1.vuln.VulnerabilityOrder, opt_index);
};


proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.repeatedFields_, null);
};
goog.inherits(proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.displayName = 'proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && heim_common_pb.ResponseMetadata.toObject(includeInstance, f),
    vulnerabilityList: jspb.Message.toObjectList(msg.getVulnerabilityList(),
    proto.medcrypt.helm.api.v1.vuln.Vulnerability.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response;
  return proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heim_common_pb.ResponseMetadata;
      reader.readMessage(value,heim_common_pb.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.medcrypt.helm.api.v1.vuln.Vulnerability;
      reader.readMessage(value,proto.medcrypt.helm.api.v1.vuln.Vulnerability.deserializeBinaryFromReader);
      msg.addVulnerability(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heim_common_pb.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getVulnerabilityList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.medcrypt.helm.api.v1.vuln.Vulnerability.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional medcrypt.heimdall.web.common.ResponseMetadata metadata = 1;
 * @return {?proto.medcrypt.heimdall.web.common.ResponseMetadata}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.prototype.getMetadata = function() {
  return /** @type{?proto.medcrypt.heimdall.web.common.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, heim_common_pb.ResponseMetadata, 1));
};


/** @param {?proto.medcrypt.heimdall.web.common.ResponseMetadata|undefined} value */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Vulnerability vulnerability = 2;
 * @return {!Array.<!proto.medcrypt.helm.api.v1.vuln.Vulnerability>}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.prototype.getVulnerabilityList = function() {
  return /** @type{!Array.<!proto.medcrypt.helm.api.v1.vuln.Vulnerability>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.medcrypt.helm.api.v1.vuln.Vulnerability, 2));
};


/** @param {!Array.<!proto.medcrypt.helm.api.v1.vuln.Vulnerability>} value */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.prototype.setVulnerabilityList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.medcrypt.helm.api.v1.vuln.Vulnerability=} opt_value
 * @param {number=} opt_index
 * @return {!proto.medcrypt.helm.api.v1.vuln.Vulnerability}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.prototype.addVulnerability = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.medcrypt.helm.api.v1.vuln.Vulnerability, opt_index);
};


proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.prototype.clearVulnerabilityList = function() {
  this.setVulnerabilityList([]);
};


/**
 * optional int64 total_count = 3;
 * @return {number}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response.prototype.setTotalCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Request request = 1;
 * @return {?proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.prototype.getRequest = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request, 1));
};


/** @param {?proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Request|undefined} value */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.prototype.getResponse = function() {
  return /** @type{?proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response} */ (
    jspb.Message.getWrapperField(this, proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response, 2));
};


/** @param {?proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.Response|undefined} value */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.oneofGroups_[0], value);
};


proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.medcrypt.helm.api.v1.vuln.ListVulnerabilities.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.CycloneDxRemediationState = {
  CDXRS_NOT_DEFINED: 0,
  CDXRS_RESOLVED: 1,
  CDXRS_RESOLVED_WITH_PEDIGREE: 2,
  CDXRS_EXPLOITABLE: 3,
  CDXRS_IN_TRIAGE: 4,
  CDXRS_FALSE_POSITIVE: 5,
  CDXRS_NOT_AFFECTED: 6
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.CycloneDxVexStatus = {
  CDXVS_UNKNOWN: 0,
  CDXVS_UNAFFECTED: 1,
  CDXVS_AFFECTED: 2
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.PatchState = {
  UNKNOWN: 0,
  PATCHED: 1,
  UNPATCHED: 2,
  PATCH_AVAILABLE: 3
};

/**
 * @enum {number}
 */
proto.medcrypt.helm.api.v1.vuln.VulnSource = {
  UNSET: 0,
  NVD: 1,
  AI: 2
};

goog.object.extend(exports, proto.medcrypt.helm.api.v1.vuln);
