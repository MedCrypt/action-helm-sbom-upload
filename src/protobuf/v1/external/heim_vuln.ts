/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.5.1
 * source: v1/external/heim_vuln.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../heim_common";
import * as dependency_2 from "./heim_organization_product";
import * as pb_1 from "google-protobuf";
export enum CycloneDxRemediationState {
    CDXRS_NOT_DEFINED = 0,
    CDXRS_RESOLVED = 1,
    CDXRS_RESOLVED_WITH_PEDIGREE = 2,
    CDXRS_EXPLOITABLE = 3,
    CDXRS_IN_TRIAGE = 4,
    CDXRS_FALSE_POSITIVE = 5,
    CDXRS_NOT_AFFECTED = 6
}
export enum CycloneDxVexStatus {
    CDXVS_UNKNOWN = 0,
    CDXVS_UNAFFECTED = 1,
    CDXVS_AFFECTED = 2
}
export enum PatchState {
    UNKNOWN = 0,
    PATCHED = 1,
    UNPATCHED = 2,
    PATCH_AVAILABLE = 3
}
export enum VulnSource {
    UNSET = 0,
    NVD = 1,
    AI = 2
}
export class Severity extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: SeverityType;
        score?: number;
        version?: string;
        baseScore?: BaseScore;
        rescoreType?: SeverityRescoreType;
        newScore?: number;
        newTemporalScore?: number;
        newEnvironmentalScore?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("score" in data && data.score != undefined) {
                this.score = data.score;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
            if ("baseScore" in data && data.baseScore != undefined) {
                this.baseScore = data.baseScore;
            }
            if ("rescoreType" in data && data.rescoreType != undefined) {
                this.rescoreType = data.rescoreType;
            }
            if ("newScore" in data && data.newScore != undefined) {
                this.newScore = data.newScore;
            }
            if ("newTemporalScore" in data && data.newTemporalScore != undefined) {
                this.newTemporalScore = data.newTemporalScore;
            }
            if ("newEnvironmentalScore" in data && data.newEnvironmentalScore != undefined) {
                this.newEnvironmentalScore = data.newEnvironmentalScore;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, SeverityType.HEIMDALL) as SeverityType;
    }
    set type(value: SeverityType) {
        pb_1.Message.setField(this, 1, value);
    }
    get score() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set score(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set version(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get baseScore() {
        return pb_1.Message.getWrapperField(this, BaseScore, 4) as BaseScore;
    }
    set baseScore(value: BaseScore) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasBaseScore() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get rescoreType() {
        return pb_1.Message.getFieldWithDefault(this, 5, SeverityRescoreType.NONE) as SeverityRescoreType;
    }
    set rescoreType(value: SeverityRescoreType) {
        pb_1.Message.setField(this, 5, value);
    }
    get newScore() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set newScore(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get newTemporalScore() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set newTemporalScore(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get newEnvironmentalScore() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set newEnvironmentalScore(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        type?: SeverityType;
        score?: number;
        version?: string;
        baseScore?: ReturnType<typeof BaseScore.prototype.toObject>;
        rescoreType?: SeverityRescoreType;
        newScore?: number;
        newTemporalScore?: number;
        newEnvironmentalScore?: number;
    }): Severity {
        const message = new Severity({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.score != null) {
            message.score = data.score;
        }
        if (data.version != null) {
            message.version = data.version;
        }
        if (data.baseScore != null) {
            message.baseScore = BaseScore.fromObject(data.baseScore);
        }
        if (data.rescoreType != null) {
            message.rescoreType = data.rescoreType;
        }
        if (data.newScore != null) {
            message.newScore = data.newScore;
        }
        if (data.newTemporalScore != null) {
            message.newTemporalScore = data.newTemporalScore;
        }
        if (data.newEnvironmentalScore != null) {
            message.newEnvironmentalScore = data.newEnvironmentalScore;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: SeverityType;
            score?: number;
            version?: string;
            baseScore?: ReturnType<typeof BaseScore.prototype.toObject>;
            rescoreType?: SeverityRescoreType;
            newScore?: number;
            newTemporalScore?: number;
            newEnvironmentalScore?: number;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.score != null) {
            data.score = this.score;
        }
        if (this.version != null) {
            data.version = this.version;
        }
        if (this.baseScore != null) {
            data.baseScore = this.baseScore.toObject();
        }
        if (this.rescoreType != null) {
            data.rescoreType = this.rescoreType;
        }
        if (this.newScore != null) {
            data.newScore = this.newScore;
        }
        if (this.newTemporalScore != null) {
            data.newTemporalScore = this.newTemporalScore;
        }
        if (this.newEnvironmentalScore != null) {
            data.newEnvironmentalScore = this.newEnvironmentalScore;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != SeverityType.HEIMDALL)
            writer.writeEnum(1, this.type);
        if (this.score != 0)
            writer.writeDouble(2, this.score);
        if (this.version.length)
            writer.writeString(3, this.version);
        if (this.hasBaseScore)
            writer.writeMessage(4, this.baseScore, () => this.baseScore.serialize(writer));
        if (this.rescoreType != SeverityRescoreType.NONE)
            writer.writeEnum(5, this.rescoreType);
        if (this.newScore != 0)
            writer.writeDouble(6, this.newScore);
        if (this.newTemporalScore != 0)
            writer.writeDouble(7, this.newTemporalScore);
        if (this.newEnvironmentalScore != 0)
            writer.writeDouble(8, this.newEnvironmentalScore);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Severity {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Severity();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.score = reader.readDouble();
                    break;
                case 3:
                    message.version = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.baseScore, () => message.baseScore = BaseScore.deserialize(reader));
                    break;
                case 5:
                    message.rescoreType = reader.readEnum();
                    break;
                case 6:
                    message.newScore = reader.readDouble();
                    break;
                case 7:
                    message.newTemporalScore = reader.readDouble();
                    break;
                case 8:
                    message.newEnvironmentalScore = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Severity {
        return Severity.deserialize(bytes);
    }
}
export enum SeverityType {
    HEIMDALL = 0,
    CVSS = 1
}
export enum SeverityRescoreType {
    NONE = 0,
    PROFILE = 1,
    ITEM = 2
}
export class BaseScore extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        attackVector?: BaseScoreAttackVector;
        attackComplexity?: BaseScoreAttackComplexity;
        privilegesRequired?: BaseScorePrivilegesRequired;
        userInteraction?: BaseScoreUserInteraction;
        scope?: BaseScoreScope;
        confidentiality?: BaseScoreConfidentiality;
        integrity?: BaseScoreIntegrity;
        availability?: BaseScoreAvailability;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("attackVector" in data && data.attackVector != undefined) {
                this.attackVector = data.attackVector;
            }
            if ("attackComplexity" in data && data.attackComplexity != undefined) {
                this.attackComplexity = data.attackComplexity;
            }
            if ("privilegesRequired" in data && data.privilegesRequired != undefined) {
                this.privilegesRequired = data.privilegesRequired;
            }
            if ("userInteraction" in data && data.userInteraction != undefined) {
                this.userInteraction = data.userInteraction;
            }
            if ("scope" in data && data.scope != undefined) {
                this.scope = data.scope;
            }
            if ("confidentiality" in data && data.confidentiality != undefined) {
                this.confidentiality = data.confidentiality;
            }
            if ("integrity" in data && data.integrity != undefined) {
                this.integrity = data.integrity;
            }
            if ("availability" in data && data.availability != undefined) {
                this.availability = data.availability;
            }
        }
    }
    get attackVector() {
        return pb_1.Message.getFieldWithDefault(this, 1, BaseScoreAttackVector.AV_NETWORK) as BaseScoreAttackVector;
    }
    set attackVector(value: BaseScoreAttackVector) {
        pb_1.Message.setField(this, 1, value);
    }
    get attackComplexity() {
        return pb_1.Message.getFieldWithDefault(this, 2, BaseScoreAttackComplexity.AC_HIGH) as BaseScoreAttackComplexity;
    }
    set attackComplexity(value: BaseScoreAttackComplexity) {
        pb_1.Message.setField(this, 2, value);
    }
    get privilegesRequired() {
        return pb_1.Message.getFieldWithDefault(this, 3, BaseScorePrivilegesRequired.PR_HIGH) as BaseScorePrivilegesRequired;
    }
    set privilegesRequired(value: BaseScorePrivilegesRequired) {
        pb_1.Message.setField(this, 3, value);
    }
    get userInteraction() {
        return pb_1.Message.getFieldWithDefault(this, 4, BaseScoreUserInteraction.UI_NONE) as BaseScoreUserInteraction;
    }
    set userInteraction(value: BaseScoreUserInteraction) {
        pb_1.Message.setField(this, 4, value);
    }
    get scope() {
        return pb_1.Message.getFieldWithDefault(this, 5, BaseScoreScope.S_UNCHANGED) as BaseScoreScope;
    }
    set scope(value: BaseScoreScope) {
        pb_1.Message.setField(this, 5, value);
    }
    get confidentiality() {
        return pb_1.Message.getFieldWithDefault(this, 6, BaseScoreConfidentiality.C_HIGH) as BaseScoreConfidentiality;
    }
    set confidentiality(value: BaseScoreConfidentiality) {
        pb_1.Message.setField(this, 6, value);
    }
    get integrity() {
        return pb_1.Message.getFieldWithDefault(this, 7, BaseScoreIntegrity.I_HIGH) as BaseScoreIntegrity;
    }
    set integrity(value: BaseScoreIntegrity) {
        pb_1.Message.setField(this, 7, value);
    }
    get availability() {
        return pb_1.Message.getFieldWithDefault(this, 8, BaseScoreAvailability.A_HIGH) as BaseScoreAvailability;
    }
    set availability(value: BaseScoreAvailability) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        attackVector?: BaseScoreAttackVector;
        attackComplexity?: BaseScoreAttackComplexity;
        privilegesRequired?: BaseScorePrivilegesRequired;
        userInteraction?: BaseScoreUserInteraction;
        scope?: BaseScoreScope;
        confidentiality?: BaseScoreConfidentiality;
        integrity?: BaseScoreIntegrity;
        availability?: BaseScoreAvailability;
    }): BaseScore {
        const message = new BaseScore({});
        if (data.attackVector != null) {
            message.attackVector = data.attackVector;
        }
        if (data.attackComplexity != null) {
            message.attackComplexity = data.attackComplexity;
        }
        if (data.privilegesRequired != null) {
            message.privilegesRequired = data.privilegesRequired;
        }
        if (data.userInteraction != null) {
            message.userInteraction = data.userInteraction;
        }
        if (data.scope != null) {
            message.scope = data.scope;
        }
        if (data.confidentiality != null) {
            message.confidentiality = data.confidentiality;
        }
        if (data.integrity != null) {
            message.integrity = data.integrity;
        }
        if (data.availability != null) {
            message.availability = data.availability;
        }
        return message;
    }
    toObject() {
        const data: {
            attackVector?: BaseScoreAttackVector;
            attackComplexity?: BaseScoreAttackComplexity;
            privilegesRequired?: BaseScorePrivilegesRequired;
            userInteraction?: BaseScoreUserInteraction;
            scope?: BaseScoreScope;
            confidentiality?: BaseScoreConfidentiality;
            integrity?: BaseScoreIntegrity;
            availability?: BaseScoreAvailability;
        } = {};
        if (this.attackVector != null) {
            data.attackVector = this.attackVector;
        }
        if (this.attackComplexity != null) {
            data.attackComplexity = this.attackComplexity;
        }
        if (this.privilegesRequired != null) {
            data.privilegesRequired = this.privilegesRequired;
        }
        if (this.userInteraction != null) {
            data.userInteraction = this.userInteraction;
        }
        if (this.scope != null) {
            data.scope = this.scope;
        }
        if (this.confidentiality != null) {
            data.confidentiality = this.confidentiality;
        }
        if (this.integrity != null) {
            data.integrity = this.integrity;
        }
        if (this.availability != null) {
            data.availability = this.availability;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.attackVector != BaseScoreAttackVector.AV_NETWORK)
            writer.writeEnum(1, this.attackVector);
        if (this.attackComplexity != BaseScoreAttackComplexity.AC_HIGH)
            writer.writeEnum(2, this.attackComplexity);
        if (this.privilegesRequired != BaseScorePrivilegesRequired.PR_HIGH)
            writer.writeEnum(3, this.privilegesRequired);
        if (this.userInteraction != BaseScoreUserInteraction.UI_NONE)
            writer.writeEnum(4, this.userInteraction);
        if (this.scope != BaseScoreScope.S_UNCHANGED)
            writer.writeEnum(5, this.scope);
        if (this.confidentiality != BaseScoreConfidentiality.C_HIGH)
            writer.writeEnum(6, this.confidentiality);
        if (this.integrity != BaseScoreIntegrity.I_HIGH)
            writer.writeEnum(7, this.integrity);
        if (this.availability != BaseScoreAvailability.A_HIGH)
            writer.writeEnum(8, this.availability);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BaseScore {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BaseScore();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.attackVector = reader.readEnum();
                    break;
                case 2:
                    message.attackComplexity = reader.readEnum();
                    break;
                case 3:
                    message.privilegesRequired = reader.readEnum();
                    break;
                case 4:
                    message.userInteraction = reader.readEnum();
                    break;
                case 5:
                    message.scope = reader.readEnum();
                    break;
                case 6:
                    message.confidentiality = reader.readEnum();
                    break;
                case 7:
                    message.integrity = reader.readEnum();
                    break;
                case 8:
                    message.availability = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BaseScore {
        return BaseScore.deserialize(bytes);
    }
}
export enum BaseScoreAttackVector {
    AV_NETWORK = 0,
    AV_ADJACENT = 1,
    AV_LOCAL = 2,
    AV_PHYSICAL = 3
}
export enum BaseScoreAttackComplexity {
    AC_HIGH = 0,
    AC_LOW = 1
}
export enum BaseScorePrivilegesRequired {
    PR_HIGH = 0,
    PR_LOW = 1,
    PR_NONE = 2
}
export enum BaseScoreUserInteraction {
    UI_NONE = 0,
    UI_REQUIRED = 1
}
export enum BaseScoreScope {
    S_UNCHANGED = 0,
    S_CHANGED = 1
}
export enum BaseScoreConfidentiality {
    C_HIGH = 0,
    C_LOW = 1,
    C_NONE = 2
}
export enum BaseScoreIntegrity {
    I_HIGH = 0,
    I_LOW = 1,
    I_NONE = 2
}
export enum BaseScoreAvailability {
    A_HIGH = 0,
    A_LOW = 1,
    A_NONE = 2
}
export class VulnerabilityImpact extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: VulnerabilityImpactType;
        severity?: Severity[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("severity" in data && data.severity != undefined) {
                this.severity = data.severity;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, VulnerabilityImpactType.UNRESOLVED) as VulnerabilityImpactType;
    }
    set type(value: VulnerabilityImpactType) {
        pb_1.Message.setField(this, 1, value);
    }
    get severity() {
        return pb_1.Message.getRepeatedWrapperField(this, Severity, 2) as Severity[];
    }
    set severity(value: Severity[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        type?: VulnerabilityImpactType;
        severity?: ReturnType<typeof Severity.prototype.toObject>[];
    }): VulnerabilityImpact {
        const message = new VulnerabilityImpact({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.severity != null) {
            message.severity = data.severity.map(item => Severity.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            type?: VulnerabilityImpactType;
            severity?: ReturnType<typeof Severity.prototype.toObject>[];
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.severity != null) {
            data.severity = this.severity.map((item: Severity) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != VulnerabilityImpactType.UNRESOLVED)
            writer.writeEnum(1, this.type);
        if (this.severity.length)
            writer.writeRepeatedMessage(2, this.severity, (item: Severity) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VulnerabilityImpact {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VulnerabilityImpact();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    reader.readMessage(message.severity, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Severity.deserialize(reader), Severity));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): VulnerabilityImpact {
        return VulnerabilityImpact.deserialize(bytes);
    }
}
export enum VulnerabilityImpactType {
    UNRESOLVED = 0,
    DOES_NOT_APPLY = 1,
    PATCH_REQUIRED = 2
}
export class TextData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        langCode?: string;
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("langCode" in data && data.langCode != undefined) {
                this.langCode = data.langCode;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get langCode() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set langCode(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        langCode?: string;
        value?: string;
    }): TextData {
        const message = new TextData({});
        if (data.langCode != null) {
            message.langCode = data.langCode;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            langCode?: string;
            value?: string;
        } = {};
        if (this.langCode != null) {
            data.langCode = this.langCode;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.langCode.length)
            writer.writeString(1, this.langCode);
        if (this.value.length)
            writer.writeString(2, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TextData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TextData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.langCode = reader.readString();
                    break;
                case 2:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TextData {
        return TextData.deserialize(bytes);
    }
}
export class ReferenceLink extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        referenceLinkHref?: string;
        referenceLinkName?: string;
        referenceLinkSource?: string;
        referenceLinkTag?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("referenceLinkHref" in data && data.referenceLinkHref != undefined) {
                this.referenceLinkHref = data.referenceLinkHref;
            }
            if ("referenceLinkName" in data && data.referenceLinkName != undefined) {
                this.referenceLinkName = data.referenceLinkName;
            }
            if ("referenceLinkSource" in data && data.referenceLinkSource != undefined) {
                this.referenceLinkSource = data.referenceLinkSource;
            }
            if ("referenceLinkTag" in data && data.referenceLinkTag != undefined) {
                this.referenceLinkTag = data.referenceLinkTag;
            }
        }
    }
    get referenceLinkHref() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set referenceLinkHref(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get referenceLinkName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set referenceLinkName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get referenceLinkSource() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set referenceLinkSource(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get referenceLinkTag() {
        return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
    }
    set referenceLinkTag(value: string[]) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        referenceLinkHref?: string;
        referenceLinkName?: string;
        referenceLinkSource?: string;
        referenceLinkTag?: string[];
    }): ReferenceLink {
        const message = new ReferenceLink({});
        if (data.referenceLinkHref != null) {
            message.referenceLinkHref = data.referenceLinkHref;
        }
        if (data.referenceLinkName != null) {
            message.referenceLinkName = data.referenceLinkName;
        }
        if (data.referenceLinkSource != null) {
            message.referenceLinkSource = data.referenceLinkSource;
        }
        if (data.referenceLinkTag != null) {
            message.referenceLinkTag = data.referenceLinkTag;
        }
        return message;
    }
    toObject() {
        const data: {
            referenceLinkHref?: string;
            referenceLinkName?: string;
            referenceLinkSource?: string;
            referenceLinkTag?: string[];
        } = {};
        if (this.referenceLinkHref != null) {
            data.referenceLinkHref = this.referenceLinkHref;
        }
        if (this.referenceLinkName != null) {
            data.referenceLinkName = this.referenceLinkName;
        }
        if (this.referenceLinkSource != null) {
            data.referenceLinkSource = this.referenceLinkSource;
        }
        if (this.referenceLinkTag != null) {
            data.referenceLinkTag = this.referenceLinkTag;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.referenceLinkHref.length)
            writer.writeString(1, this.referenceLinkHref);
        if (this.referenceLinkName.length)
            writer.writeString(2, this.referenceLinkName);
        if (this.referenceLinkSource.length)
            writer.writeString(3, this.referenceLinkSource);
        if (this.referenceLinkTag.length)
            writer.writeRepeatedString(4, this.referenceLinkTag);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReferenceLink {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReferenceLink();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.referenceLinkHref = reader.readString();
                    break;
                case 2:
                    message.referenceLinkName = reader.readString();
                    break;
                case 3:
                    message.referenceLinkSource = reader.readString();
                    break;
                case 4:
                    pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReferenceLink {
        return ReferenceLink.deserialize(bytes);
    }
}
export class Vulnerability extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        organizationProductId?: dependency_1.UUID;
        organizationProductName?: string;
        organizationProductVersionId?: dependency_1.UUID;
        organizationProductVersionString?: string;
        vendorId?: dependency_1.UUID;
        vendorDisplayName?: string;
        productId?: dependency_1.UUID;
        productDisplayName?: string;
        productVersionString?: string;
        vulnerabilityId?: dependency_1.UUID;
        vulnerabilityKey?: string;
        /** @deprecated*/
        vulnerabilityPublishedDate?: string;
        /** @deprecated*/
        vulnerabilityModifiedDate?: string;
        vulnerabilitySummary?: string;
        vulnerabilitySeverity?: Severity[];
        vulnerabilityImpact?: VulnerabilityImpact;
        dependencyId?: dependency_1.UUID;
        vulnerabilityAnnalId?: dependency_1.UUID;
        vulnerabilityAnnalCreatedAt?: number;
        userImpactVulnerabilityAnnalId?: dependency_1.UUID;
        userImpactVulnerabilityAnnalCreatedAt?: number;
        description?: TextData[];
        problems?: TextData[];
        referenceLink?: ReferenceLink[];
        /** @deprecated*/
        vulnerabilityNote?: string;
        isModify?: boolean;
        cvssV2VectorString?: string;
        cvssV3VectorString?: string;
        vulnerabilityAssociationDate?: number;
        vulnerabilityPublishedTimestamp?: number;
        vulnerabilityModifiedTimestamp?: number;
        patchState?: PatchState;
        cisaKev?: boolean;
        topCwe?: boolean;
        exploitDb?: boolean;
        metasploit?: boolean;
        epssScore?: string;
        ai?: boolean;
        cdxRemediationEvidence?: string;
        vexRemediationEvidence?: string;
        cdxVexStatus?: CycloneDxVexStatus;
        cdxRemediationState?: CycloneDxRemediationState;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [15, 22, 23, 24], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("organizationProductId" in data && data.organizationProductId != undefined) {
                this.organizationProductId = data.organizationProductId;
            }
            if ("organizationProductName" in data && data.organizationProductName != undefined) {
                this.organizationProductName = data.organizationProductName;
            }
            if ("organizationProductVersionId" in data && data.organizationProductVersionId != undefined) {
                this.organizationProductVersionId = data.organizationProductVersionId;
            }
            if ("organizationProductVersionString" in data && data.organizationProductVersionString != undefined) {
                this.organizationProductVersionString = data.organizationProductVersionString;
            }
            if ("vendorId" in data && data.vendorId != undefined) {
                this.vendorId = data.vendorId;
            }
            if ("vendorDisplayName" in data && data.vendorDisplayName != undefined) {
                this.vendorDisplayName = data.vendorDisplayName;
            }
            if ("productId" in data && data.productId != undefined) {
                this.productId = data.productId;
            }
            if ("productDisplayName" in data && data.productDisplayName != undefined) {
                this.productDisplayName = data.productDisplayName;
            }
            if ("productVersionString" in data && data.productVersionString != undefined) {
                this.productVersionString = data.productVersionString;
            }
            if ("vulnerabilityId" in data && data.vulnerabilityId != undefined) {
                this.vulnerabilityId = data.vulnerabilityId;
            }
            if ("vulnerabilityKey" in data && data.vulnerabilityKey != undefined) {
                this.vulnerabilityKey = data.vulnerabilityKey;
            }
            if ("vulnerabilityPublishedDate" in data && data.vulnerabilityPublishedDate != undefined) {
                this.vulnerabilityPublishedDate = data.vulnerabilityPublishedDate;
            }
            if ("vulnerabilityModifiedDate" in data && data.vulnerabilityModifiedDate != undefined) {
                this.vulnerabilityModifiedDate = data.vulnerabilityModifiedDate;
            }
            if ("vulnerabilitySummary" in data && data.vulnerabilitySummary != undefined) {
                this.vulnerabilitySummary = data.vulnerabilitySummary;
            }
            if ("vulnerabilitySeverity" in data && data.vulnerabilitySeverity != undefined) {
                this.vulnerabilitySeverity = data.vulnerabilitySeverity;
            }
            if ("vulnerabilityImpact" in data && data.vulnerabilityImpact != undefined) {
                this.vulnerabilityImpact = data.vulnerabilityImpact;
            }
            if ("dependencyId" in data && data.dependencyId != undefined) {
                this.dependencyId = data.dependencyId;
            }
            if ("vulnerabilityAnnalId" in data && data.vulnerabilityAnnalId != undefined) {
                this.vulnerabilityAnnalId = data.vulnerabilityAnnalId;
            }
            if ("vulnerabilityAnnalCreatedAt" in data && data.vulnerabilityAnnalCreatedAt != undefined) {
                this.vulnerabilityAnnalCreatedAt = data.vulnerabilityAnnalCreatedAt;
            }
            if ("userImpactVulnerabilityAnnalId" in data && data.userImpactVulnerabilityAnnalId != undefined) {
                this.userImpactVulnerabilityAnnalId = data.userImpactVulnerabilityAnnalId;
            }
            if ("userImpactVulnerabilityAnnalCreatedAt" in data && data.userImpactVulnerabilityAnnalCreatedAt != undefined) {
                this.userImpactVulnerabilityAnnalCreatedAt = data.userImpactVulnerabilityAnnalCreatedAt;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("problems" in data && data.problems != undefined) {
                this.problems = data.problems;
            }
            if ("referenceLink" in data && data.referenceLink != undefined) {
                this.referenceLink = data.referenceLink;
            }
            if ("vulnerabilityNote" in data && data.vulnerabilityNote != undefined) {
                this.vulnerabilityNote = data.vulnerabilityNote;
            }
            if ("isModify" in data && data.isModify != undefined) {
                this.isModify = data.isModify;
            }
            if ("cvssV2VectorString" in data && data.cvssV2VectorString != undefined) {
                this.cvssV2VectorString = data.cvssV2VectorString;
            }
            if ("cvssV3VectorString" in data && data.cvssV3VectorString != undefined) {
                this.cvssV3VectorString = data.cvssV3VectorString;
            }
            if ("vulnerabilityAssociationDate" in data && data.vulnerabilityAssociationDate != undefined) {
                this.vulnerabilityAssociationDate = data.vulnerabilityAssociationDate;
            }
            if ("vulnerabilityPublishedTimestamp" in data && data.vulnerabilityPublishedTimestamp != undefined) {
                this.vulnerabilityPublishedTimestamp = data.vulnerabilityPublishedTimestamp;
            }
            if ("vulnerabilityModifiedTimestamp" in data && data.vulnerabilityModifiedTimestamp != undefined) {
                this.vulnerabilityModifiedTimestamp = data.vulnerabilityModifiedTimestamp;
            }
            if ("patchState" in data && data.patchState != undefined) {
                this.patchState = data.patchState;
            }
            if ("cisaKev" in data && data.cisaKev != undefined) {
                this.cisaKev = data.cisaKev;
            }
            if ("topCwe" in data && data.topCwe != undefined) {
                this.topCwe = data.topCwe;
            }
            if ("exploitDb" in data && data.exploitDb != undefined) {
                this.exploitDb = data.exploitDb;
            }
            if ("metasploit" in data && data.metasploit != undefined) {
                this.metasploit = data.metasploit;
            }
            if ("epssScore" in data && data.epssScore != undefined) {
                this.epssScore = data.epssScore;
            }
            if ("ai" in data && data.ai != undefined) {
                this.ai = data.ai;
            }
            if ("cdxRemediationEvidence" in data && data.cdxRemediationEvidence != undefined) {
                this.cdxRemediationEvidence = data.cdxRemediationEvidence;
            }
            if ("vexRemediationEvidence" in data && data.vexRemediationEvidence != undefined) {
                this.vexRemediationEvidence = data.vexRemediationEvidence;
            }
            if ("cdxVexStatus" in data && data.cdxVexStatus != undefined) {
                this.cdxVexStatus = data.cdxVexStatus;
            }
            if ("cdxRemediationState" in data && data.cdxRemediationState != undefined) {
                this.cdxRemediationState = data.cdxRemediationState;
            }
        }
    }
    get organizationProductId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 1) as dependency_1.UUID;
    }
    set organizationProductId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasOrganizationProductId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get organizationProductName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set organizationProductName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get organizationProductVersionId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 3) as dependency_1.UUID;
    }
    set organizationProductVersionId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasOrganizationProductVersionId() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get organizationProductVersionString() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set organizationProductVersionString(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get vendorId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 5) as dependency_1.UUID;
    }
    set vendorId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasVendorId() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get vendorDisplayName() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set vendorDisplayName(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get productId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 7) as dependency_1.UUID;
    }
    set productId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get hasProductId() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get productDisplayName() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set productDisplayName(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get productVersionString() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set productVersionString(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get vulnerabilityId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 10) as dependency_1.UUID;
    }
    set vulnerabilityId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get hasVulnerabilityId() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get vulnerabilityKey() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set vulnerabilityKey(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    /** @deprecated*/
    get vulnerabilityPublishedDate() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    /** @deprecated*/
    set vulnerabilityPublishedDate(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    /** @deprecated*/
    get vulnerabilityModifiedDate() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    /** @deprecated*/
    set vulnerabilityModifiedDate(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get vulnerabilitySummary() {
        return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
    }
    set vulnerabilitySummary(value: string) {
        pb_1.Message.setField(this, 14, value);
    }
    get vulnerabilitySeverity() {
        return pb_1.Message.getRepeatedWrapperField(this, Severity, 15) as Severity[];
    }
    set vulnerabilitySeverity(value: Severity[]) {
        pb_1.Message.setRepeatedWrapperField(this, 15, value);
    }
    get vulnerabilityImpact() {
        return pb_1.Message.getWrapperField(this, VulnerabilityImpact, 16) as VulnerabilityImpact;
    }
    set vulnerabilityImpact(value: VulnerabilityImpact) {
        pb_1.Message.setWrapperField(this, 16, value);
    }
    get hasVulnerabilityImpact() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get dependencyId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 17) as dependency_1.UUID;
    }
    set dependencyId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    get hasDependencyId() {
        return pb_1.Message.getField(this, 17) != null;
    }
    get vulnerabilityAnnalId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 18) as dependency_1.UUID;
    }
    set vulnerabilityAnnalId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 18, value);
    }
    get hasVulnerabilityAnnalId() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get vulnerabilityAnnalCreatedAt() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
    }
    set vulnerabilityAnnalCreatedAt(value: number) {
        pb_1.Message.setField(this, 19, value);
    }
    get userImpactVulnerabilityAnnalId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 20) as dependency_1.UUID;
    }
    set userImpactVulnerabilityAnnalId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 20, value);
    }
    get hasUserImpactVulnerabilityAnnalId() {
        return pb_1.Message.getField(this, 20) != null;
    }
    get userImpactVulnerabilityAnnalCreatedAt() {
        return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
    }
    set userImpactVulnerabilityAnnalCreatedAt(value: number) {
        pb_1.Message.setField(this, 21, value);
    }
    get description() {
        return pb_1.Message.getRepeatedWrapperField(this, TextData, 22) as TextData[];
    }
    set description(value: TextData[]) {
        pb_1.Message.setRepeatedWrapperField(this, 22, value);
    }
    get problems() {
        return pb_1.Message.getRepeatedWrapperField(this, TextData, 23) as TextData[];
    }
    set problems(value: TextData[]) {
        pb_1.Message.setRepeatedWrapperField(this, 23, value);
    }
    get referenceLink() {
        return pb_1.Message.getRepeatedWrapperField(this, ReferenceLink, 24) as ReferenceLink[];
    }
    set referenceLink(value: ReferenceLink[]) {
        pb_1.Message.setRepeatedWrapperField(this, 24, value);
    }
    /** @deprecated*/
    get vulnerabilityNote() {
        return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
    }
    /** @deprecated*/
    set vulnerabilityNote(value: string) {
        pb_1.Message.setField(this, 25, value);
    }
    get isModify() {
        return pb_1.Message.getFieldWithDefault(this, 26, false) as boolean;
    }
    set isModify(value: boolean) {
        pb_1.Message.setField(this, 26, value);
    }
    get cvssV2VectorString() {
        return pb_1.Message.getFieldWithDefault(this, 27, "") as string;
    }
    set cvssV2VectorString(value: string) {
        pb_1.Message.setField(this, 27, value);
    }
    get cvssV3VectorString() {
        return pb_1.Message.getFieldWithDefault(this, 28, "") as string;
    }
    set cvssV3VectorString(value: string) {
        pb_1.Message.setField(this, 28, value);
    }
    get vulnerabilityAssociationDate() {
        return pb_1.Message.getFieldWithDefault(this, 29, 0) as number;
    }
    set vulnerabilityAssociationDate(value: number) {
        pb_1.Message.setField(this, 29, value);
    }
    get vulnerabilityPublishedTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 30, 0) as number;
    }
    set vulnerabilityPublishedTimestamp(value: number) {
        pb_1.Message.setField(this, 30, value);
    }
    get vulnerabilityModifiedTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 31, 0) as number;
    }
    set vulnerabilityModifiedTimestamp(value: number) {
        pb_1.Message.setField(this, 31, value);
    }
    get patchState() {
        return pb_1.Message.getFieldWithDefault(this, 32, PatchState.UNKNOWN) as PatchState;
    }
    set patchState(value: PatchState) {
        pb_1.Message.setField(this, 32, value);
    }
    get cisaKev() {
        return pb_1.Message.getFieldWithDefault(this, 33, false) as boolean;
    }
    set cisaKev(value: boolean) {
        pb_1.Message.setField(this, 33, value);
    }
    get topCwe() {
        return pb_1.Message.getFieldWithDefault(this, 34, false) as boolean;
    }
    set topCwe(value: boolean) {
        pb_1.Message.setField(this, 34, value);
    }
    get exploitDb() {
        return pb_1.Message.getFieldWithDefault(this, 35, false) as boolean;
    }
    set exploitDb(value: boolean) {
        pb_1.Message.setField(this, 35, value);
    }
    get metasploit() {
        return pb_1.Message.getFieldWithDefault(this, 36, false) as boolean;
    }
    set metasploit(value: boolean) {
        pb_1.Message.setField(this, 36, value);
    }
    get epssScore() {
        return pb_1.Message.getFieldWithDefault(this, 37, "") as string;
    }
    set epssScore(value: string) {
        pb_1.Message.setField(this, 37, value);
    }
    get ai() {
        return pb_1.Message.getFieldWithDefault(this, 40, false) as boolean;
    }
    set ai(value: boolean) {
        pb_1.Message.setField(this, 40, value);
    }
    get cdxRemediationEvidence() {
        return pb_1.Message.getFieldWithDefault(this, 41, "") as string;
    }
    set cdxRemediationEvidence(value: string) {
        pb_1.Message.setField(this, 41, value);
    }
    get vexRemediationEvidence() {
        return pb_1.Message.getFieldWithDefault(this, 42, "") as string;
    }
    set vexRemediationEvidence(value: string) {
        pb_1.Message.setField(this, 42, value);
    }
    get cdxVexStatus() {
        return pb_1.Message.getFieldWithDefault(this, 43, CycloneDxVexStatus.CDXVS_UNKNOWN) as CycloneDxVexStatus;
    }
    set cdxVexStatus(value: CycloneDxVexStatus) {
        pb_1.Message.setField(this, 43, value);
    }
    get cdxRemediationState() {
        return pb_1.Message.getFieldWithDefault(this, 44, CycloneDxRemediationState.CDXRS_NOT_DEFINED) as CycloneDxRemediationState;
    }
    set cdxRemediationState(value: CycloneDxRemediationState) {
        pb_1.Message.setField(this, 44, value);
    }
    static fromObject(data: {
        organizationProductId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        organizationProductName?: string;
        organizationProductVersionId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        organizationProductVersionString?: string;
        vendorId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        vendorDisplayName?: string;
        productId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        productDisplayName?: string;
        productVersionString?: string;
        vulnerabilityId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        vulnerabilityKey?: string;
        vulnerabilityPublishedDate?: string;
        vulnerabilityModifiedDate?: string;
        vulnerabilitySummary?: string;
        vulnerabilitySeverity?: ReturnType<typeof Severity.prototype.toObject>[];
        vulnerabilityImpact?: ReturnType<typeof VulnerabilityImpact.prototype.toObject>;
        dependencyId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        vulnerabilityAnnalId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        vulnerabilityAnnalCreatedAt?: number;
        userImpactVulnerabilityAnnalId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        userImpactVulnerabilityAnnalCreatedAt?: number;
        description?: ReturnType<typeof TextData.prototype.toObject>[];
        problems?: ReturnType<typeof TextData.prototype.toObject>[];
        referenceLink?: ReturnType<typeof ReferenceLink.prototype.toObject>[];
        vulnerabilityNote?: string;
        isModify?: boolean;
        cvssV2VectorString?: string;
        cvssV3VectorString?: string;
        vulnerabilityAssociationDate?: number;
        vulnerabilityPublishedTimestamp?: number;
        vulnerabilityModifiedTimestamp?: number;
        patchState?: PatchState;
        cisaKev?: boolean;
        topCwe?: boolean;
        exploitDb?: boolean;
        metasploit?: boolean;
        epssScore?: string;
        ai?: boolean;
        cdxRemediationEvidence?: string;
        vexRemediationEvidence?: string;
        cdxVexStatus?: CycloneDxVexStatus;
        cdxRemediationState?: CycloneDxRemediationState;
    }): Vulnerability {
        const message = new Vulnerability({});
        if (data.organizationProductId != null) {
            message.organizationProductId = dependency_1.UUID.fromObject(data.organizationProductId);
        }
        if (data.organizationProductName != null) {
            message.organizationProductName = data.organizationProductName;
        }
        if (data.organizationProductVersionId != null) {
            message.organizationProductVersionId = dependency_1.UUID.fromObject(data.organizationProductVersionId);
        }
        if (data.organizationProductVersionString != null) {
            message.organizationProductVersionString = data.organizationProductVersionString;
        }
        if (data.vendorId != null) {
            message.vendorId = dependency_1.UUID.fromObject(data.vendorId);
        }
        if (data.vendorDisplayName != null) {
            message.vendorDisplayName = data.vendorDisplayName;
        }
        if (data.productId != null) {
            message.productId = dependency_1.UUID.fromObject(data.productId);
        }
        if (data.productDisplayName != null) {
            message.productDisplayName = data.productDisplayName;
        }
        if (data.productVersionString != null) {
            message.productVersionString = data.productVersionString;
        }
        if (data.vulnerabilityId != null) {
            message.vulnerabilityId = dependency_1.UUID.fromObject(data.vulnerabilityId);
        }
        if (data.vulnerabilityKey != null) {
            message.vulnerabilityKey = data.vulnerabilityKey;
        }
        if (data.vulnerabilityPublishedDate != null) {
            message.vulnerabilityPublishedDate = data.vulnerabilityPublishedDate;
        }
        if (data.vulnerabilityModifiedDate != null) {
            message.vulnerabilityModifiedDate = data.vulnerabilityModifiedDate;
        }
        if (data.vulnerabilitySummary != null) {
            message.vulnerabilitySummary = data.vulnerabilitySummary;
        }
        if (data.vulnerabilitySeverity != null) {
            message.vulnerabilitySeverity = data.vulnerabilitySeverity.map(item => Severity.fromObject(item));
        }
        if (data.vulnerabilityImpact != null) {
            message.vulnerabilityImpact = VulnerabilityImpact.fromObject(data.vulnerabilityImpact);
        }
        if (data.dependencyId != null) {
            message.dependencyId = dependency_1.UUID.fromObject(data.dependencyId);
        }
        if (data.vulnerabilityAnnalId != null) {
            message.vulnerabilityAnnalId = dependency_1.UUID.fromObject(data.vulnerabilityAnnalId);
        }
        if (data.vulnerabilityAnnalCreatedAt != null) {
            message.vulnerabilityAnnalCreatedAt = data.vulnerabilityAnnalCreatedAt;
        }
        if (data.userImpactVulnerabilityAnnalId != null) {
            message.userImpactVulnerabilityAnnalId = dependency_1.UUID.fromObject(data.userImpactVulnerabilityAnnalId);
        }
        if (data.userImpactVulnerabilityAnnalCreatedAt != null) {
            message.userImpactVulnerabilityAnnalCreatedAt = data.userImpactVulnerabilityAnnalCreatedAt;
        }
        if (data.description != null) {
            message.description = data.description.map(item => TextData.fromObject(item));
        }
        if (data.problems != null) {
            message.problems = data.problems.map(item => TextData.fromObject(item));
        }
        if (data.referenceLink != null) {
            message.referenceLink = data.referenceLink.map(item => ReferenceLink.fromObject(item));
        }
        if (data.vulnerabilityNote != null) {
            message.vulnerabilityNote = data.vulnerabilityNote;
        }
        if (data.isModify != null) {
            message.isModify = data.isModify;
        }
        if (data.cvssV2VectorString != null) {
            message.cvssV2VectorString = data.cvssV2VectorString;
        }
        if (data.cvssV3VectorString != null) {
            message.cvssV3VectorString = data.cvssV3VectorString;
        }
        if (data.vulnerabilityAssociationDate != null) {
            message.vulnerabilityAssociationDate = data.vulnerabilityAssociationDate;
        }
        if (data.vulnerabilityPublishedTimestamp != null) {
            message.vulnerabilityPublishedTimestamp = data.vulnerabilityPublishedTimestamp;
        }
        if (data.vulnerabilityModifiedTimestamp != null) {
            message.vulnerabilityModifiedTimestamp = data.vulnerabilityModifiedTimestamp;
        }
        if (data.patchState != null) {
            message.patchState = data.patchState;
        }
        if (data.cisaKev != null) {
            message.cisaKev = data.cisaKev;
        }
        if (data.topCwe != null) {
            message.topCwe = data.topCwe;
        }
        if (data.exploitDb != null) {
            message.exploitDb = data.exploitDb;
        }
        if (data.metasploit != null) {
            message.metasploit = data.metasploit;
        }
        if (data.epssScore != null) {
            message.epssScore = data.epssScore;
        }
        if (data.ai != null) {
            message.ai = data.ai;
        }
        if (data.cdxRemediationEvidence != null) {
            message.cdxRemediationEvidence = data.cdxRemediationEvidence;
        }
        if (data.vexRemediationEvidence != null) {
            message.vexRemediationEvidence = data.vexRemediationEvidence;
        }
        if (data.cdxVexStatus != null) {
            message.cdxVexStatus = data.cdxVexStatus;
        }
        if (data.cdxRemediationState != null) {
            message.cdxRemediationState = data.cdxRemediationState;
        }
        return message;
    }
    toObject() {
        const data: {
            organizationProductId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            organizationProductName?: string;
            organizationProductVersionId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            organizationProductVersionString?: string;
            vendorId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            vendorDisplayName?: string;
            productId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            productDisplayName?: string;
            productVersionString?: string;
            vulnerabilityId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            vulnerabilityKey?: string;
            vulnerabilityPublishedDate?: string;
            vulnerabilityModifiedDate?: string;
            vulnerabilitySummary?: string;
            vulnerabilitySeverity?: ReturnType<typeof Severity.prototype.toObject>[];
            vulnerabilityImpact?: ReturnType<typeof VulnerabilityImpact.prototype.toObject>;
            dependencyId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            vulnerabilityAnnalId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            vulnerabilityAnnalCreatedAt?: number;
            userImpactVulnerabilityAnnalId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            userImpactVulnerabilityAnnalCreatedAt?: number;
            description?: ReturnType<typeof TextData.prototype.toObject>[];
            problems?: ReturnType<typeof TextData.prototype.toObject>[];
            referenceLink?: ReturnType<typeof ReferenceLink.prototype.toObject>[];
            vulnerabilityNote?: string;
            isModify?: boolean;
            cvssV2VectorString?: string;
            cvssV3VectorString?: string;
            vulnerabilityAssociationDate?: number;
            vulnerabilityPublishedTimestamp?: number;
            vulnerabilityModifiedTimestamp?: number;
            patchState?: PatchState;
            cisaKev?: boolean;
            topCwe?: boolean;
            exploitDb?: boolean;
            metasploit?: boolean;
            epssScore?: string;
            ai?: boolean;
            cdxRemediationEvidence?: string;
            vexRemediationEvidence?: string;
            cdxVexStatus?: CycloneDxVexStatus;
            cdxRemediationState?: CycloneDxRemediationState;
        } = {};
        if (this.organizationProductId != null) {
            data.organizationProductId = this.organizationProductId.toObject();
        }
        if (this.organizationProductName != null) {
            data.organizationProductName = this.organizationProductName;
        }
        if (this.organizationProductVersionId != null) {
            data.organizationProductVersionId = this.organizationProductVersionId.toObject();
        }
        if (this.organizationProductVersionString != null) {
            data.organizationProductVersionString = this.organizationProductVersionString;
        }
        if (this.vendorId != null) {
            data.vendorId = this.vendorId.toObject();
        }
        if (this.vendorDisplayName != null) {
            data.vendorDisplayName = this.vendorDisplayName;
        }
        if (this.productId != null) {
            data.productId = this.productId.toObject();
        }
        if (this.productDisplayName != null) {
            data.productDisplayName = this.productDisplayName;
        }
        if (this.productVersionString != null) {
            data.productVersionString = this.productVersionString;
        }
        if (this.vulnerabilityId != null) {
            data.vulnerabilityId = this.vulnerabilityId.toObject();
        }
        if (this.vulnerabilityKey != null) {
            data.vulnerabilityKey = this.vulnerabilityKey;
        }
        if (this.vulnerabilityPublishedDate != null) {
            data.vulnerabilityPublishedDate = this.vulnerabilityPublishedDate;
        }
        if (this.vulnerabilityModifiedDate != null) {
            data.vulnerabilityModifiedDate = this.vulnerabilityModifiedDate;
        }
        if (this.vulnerabilitySummary != null) {
            data.vulnerabilitySummary = this.vulnerabilitySummary;
        }
        if (this.vulnerabilitySeverity != null) {
            data.vulnerabilitySeverity = this.vulnerabilitySeverity.map((item: Severity) => item.toObject());
        }
        if (this.vulnerabilityImpact != null) {
            data.vulnerabilityImpact = this.vulnerabilityImpact.toObject();
        }
        if (this.dependencyId != null) {
            data.dependencyId = this.dependencyId.toObject();
        }
        if (this.vulnerabilityAnnalId != null) {
            data.vulnerabilityAnnalId = this.vulnerabilityAnnalId.toObject();
        }
        if (this.vulnerabilityAnnalCreatedAt != null) {
            data.vulnerabilityAnnalCreatedAt = this.vulnerabilityAnnalCreatedAt;
        }
        if (this.userImpactVulnerabilityAnnalId != null) {
            data.userImpactVulnerabilityAnnalId = this.userImpactVulnerabilityAnnalId.toObject();
        }
        if (this.userImpactVulnerabilityAnnalCreatedAt != null) {
            data.userImpactVulnerabilityAnnalCreatedAt = this.userImpactVulnerabilityAnnalCreatedAt;
        }
        if (this.description != null) {
            data.description = this.description.map((item: TextData) => item.toObject());
        }
        if (this.problems != null) {
            data.problems = this.problems.map((item: TextData) => item.toObject());
        }
        if (this.referenceLink != null) {
            data.referenceLink = this.referenceLink.map((item: ReferenceLink) => item.toObject());
        }
        if (this.vulnerabilityNote != null) {
            data.vulnerabilityNote = this.vulnerabilityNote;
        }
        if (this.isModify != null) {
            data.isModify = this.isModify;
        }
        if (this.cvssV2VectorString != null) {
            data.cvssV2VectorString = this.cvssV2VectorString;
        }
        if (this.cvssV3VectorString != null) {
            data.cvssV3VectorString = this.cvssV3VectorString;
        }
        if (this.vulnerabilityAssociationDate != null) {
            data.vulnerabilityAssociationDate = this.vulnerabilityAssociationDate;
        }
        if (this.vulnerabilityPublishedTimestamp != null) {
            data.vulnerabilityPublishedTimestamp = this.vulnerabilityPublishedTimestamp;
        }
        if (this.vulnerabilityModifiedTimestamp != null) {
            data.vulnerabilityModifiedTimestamp = this.vulnerabilityModifiedTimestamp;
        }
        if (this.patchState != null) {
            data.patchState = this.patchState;
        }
        if (this.cisaKev != null) {
            data.cisaKev = this.cisaKev;
        }
        if (this.topCwe != null) {
            data.topCwe = this.topCwe;
        }
        if (this.exploitDb != null) {
            data.exploitDb = this.exploitDb;
        }
        if (this.metasploit != null) {
            data.metasploit = this.metasploit;
        }
        if (this.epssScore != null) {
            data.epssScore = this.epssScore;
        }
        if (this.ai != null) {
            data.ai = this.ai;
        }
        if (this.cdxRemediationEvidence != null) {
            data.cdxRemediationEvidence = this.cdxRemediationEvidence;
        }
        if (this.vexRemediationEvidence != null) {
            data.vexRemediationEvidence = this.vexRemediationEvidence;
        }
        if (this.cdxVexStatus != null) {
            data.cdxVexStatus = this.cdxVexStatus;
        }
        if (this.cdxRemediationState != null) {
            data.cdxRemediationState = this.cdxRemediationState;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasOrganizationProductId)
            writer.writeMessage(1, this.organizationProductId, () => this.organizationProductId.serialize(writer));
        if (this.organizationProductName.length)
            writer.writeString(2, this.organizationProductName);
        if (this.hasOrganizationProductVersionId)
            writer.writeMessage(3, this.organizationProductVersionId, () => this.organizationProductVersionId.serialize(writer));
        if (this.organizationProductVersionString.length)
            writer.writeString(4, this.organizationProductVersionString);
        if (this.hasVendorId)
            writer.writeMessage(5, this.vendorId, () => this.vendorId.serialize(writer));
        if (this.vendorDisplayName.length)
            writer.writeString(6, this.vendorDisplayName);
        if (this.hasProductId)
            writer.writeMessage(7, this.productId, () => this.productId.serialize(writer));
        if (this.productDisplayName.length)
            writer.writeString(8, this.productDisplayName);
        if (this.productVersionString.length)
            writer.writeString(9, this.productVersionString);
        if (this.hasVulnerabilityId)
            writer.writeMessage(10, this.vulnerabilityId, () => this.vulnerabilityId.serialize(writer));
        if (this.vulnerabilityKey.length)
            writer.writeString(11, this.vulnerabilityKey);
        if (this.vulnerabilityPublishedDate.length)
            writer.writeString(12, this.vulnerabilityPublishedDate);
        if (this.vulnerabilityModifiedDate.length)
            writer.writeString(13, this.vulnerabilityModifiedDate);
        if (this.vulnerabilitySummary.length)
            writer.writeString(14, this.vulnerabilitySummary);
        if (this.vulnerabilitySeverity.length)
            writer.writeRepeatedMessage(15, this.vulnerabilitySeverity, (item: Severity) => item.serialize(writer));
        if (this.hasVulnerabilityImpact)
            writer.writeMessage(16, this.vulnerabilityImpact, () => this.vulnerabilityImpact.serialize(writer));
        if (this.hasDependencyId)
            writer.writeMessage(17, this.dependencyId, () => this.dependencyId.serialize(writer));
        if (this.hasVulnerabilityAnnalId)
            writer.writeMessage(18, this.vulnerabilityAnnalId, () => this.vulnerabilityAnnalId.serialize(writer));
        if (this.vulnerabilityAnnalCreatedAt != 0)
            writer.writeInt64(19, this.vulnerabilityAnnalCreatedAt);
        if (this.hasUserImpactVulnerabilityAnnalId)
            writer.writeMessage(20, this.userImpactVulnerabilityAnnalId, () => this.userImpactVulnerabilityAnnalId.serialize(writer));
        if (this.userImpactVulnerabilityAnnalCreatedAt != 0)
            writer.writeInt64(21, this.userImpactVulnerabilityAnnalCreatedAt);
        if (this.description.length)
            writer.writeRepeatedMessage(22, this.description, (item: TextData) => item.serialize(writer));
        if (this.problems.length)
            writer.writeRepeatedMessage(23, this.problems, (item: TextData) => item.serialize(writer));
        if (this.referenceLink.length)
            writer.writeRepeatedMessage(24, this.referenceLink, (item: ReferenceLink) => item.serialize(writer));
        if (this.vulnerabilityNote.length)
            writer.writeString(25, this.vulnerabilityNote);
        if (this.isModify != false)
            writer.writeBool(26, this.isModify);
        if (this.cvssV2VectorString.length)
            writer.writeString(27, this.cvssV2VectorString);
        if (this.cvssV3VectorString.length)
            writer.writeString(28, this.cvssV3VectorString);
        if (this.vulnerabilityAssociationDate != 0)
            writer.writeInt64(29, this.vulnerabilityAssociationDate);
        if (this.vulnerabilityPublishedTimestamp != 0)
            writer.writeInt64(30, this.vulnerabilityPublishedTimestamp);
        if (this.vulnerabilityModifiedTimestamp != 0)
            writer.writeInt64(31, this.vulnerabilityModifiedTimestamp);
        if (this.patchState != PatchState.UNKNOWN)
            writer.writeEnum(32, this.patchState);
        if (this.cisaKev != false)
            writer.writeBool(33, this.cisaKev);
        if (this.topCwe != false)
            writer.writeBool(34, this.topCwe);
        if (this.exploitDb != false)
            writer.writeBool(35, this.exploitDb);
        if (this.metasploit != false)
            writer.writeBool(36, this.metasploit);
        if (this.epssScore.length)
            writer.writeString(37, this.epssScore);
        if (this.ai != false)
            writer.writeBool(40, this.ai);
        if (this.cdxRemediationEvidence.length)
            writer.writeString(41, this.cdxRemediationEvidence);
        if (this.vexRemediationEvidence.length)
            writer.writeString(42, this.vexRemediationEvidence);
        if (this.cdxVexStatus != CycloneDxVexStatus.CDXVS_UNKNOWN)
            writer.writeEnum(43, this.cdxVexStatus);
        if (this.cdxRemediationState != CycloneDxRemediationState.CDXRS_NOT_DEFINED)
            writer.writeEnum(44, this.cdxRemediationState);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vulnerability {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vulnerability();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.organizationProductId, () => message.organizationProductId = dependency_1.UUID.deserialize(reader));
                    break;
                case 2:
                    message.organizationProductName = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.organizationProductVersionId, () => message.organizationProductVersionId = dependency_1.UUID.deserialize(reader));
                    break;
                case 4:
                    message.organizationProductVersionString = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.vendorId, () => message.vendorId = dependency_1.UUID.deserialize(reader));
                    break;
                case 6:
                    message.vendorDisplayName = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.productId, () => message.productId = dependency_1.UUID.deserialize(reader));
                    break;
                case 8:
                    message.productDisplayName = reader.readString();
                    break;
                case 9:
                    message.productVersionString = reader.readString();
                    break;
                case 10:
                    reader.readMessage(message.vulnerabilityId, () => message.vulnerabilityId = dependency_1.UUID.deserialize(reader));
                    break;
                case 11:
                    message.vulnerabilityKey = reader.readString();
                    break;
                case 12:
                    message.vulnerabilityPublishedDate = reader.readString();
                    break;
                case 13:
                    message.vulnerabilityModifiedDate = reader.readString();
                    break;
                case 14:
                    message.vulnerabilitySummary = reader.readString();
                    break;
                case 15:
                    reader.readMessage(message.vulnerabilitySeverity, () => pb_1.Message.addToRepeatedWrapperField(message, 15, Severity.deserialize(reader), Severity));
                    break;
                case 16:
                    reader.readMessage(message.vulnerabilityImpact, () => message.vulnerabilityImpact = VulnerabilityImpact.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.dependencyId, () => message.dependencyId = dependency_1.UUID.deserialize(reader));
                    break;
                case 18:
                    reader.readMessage(message.vulnerabilityAnnalId, () => message.vulnerabilityAnnalId = dependency_1.UUID.deserialize(reader));
                    break;
                case 19:
                    message.vulnerabilityAnnalCreatedAt = reader.readInt64();
                    break;
                case 20:
                    reader.readMessage(message.userImpactVulnerabilityAnnalId, () => message.userImpactVulnerabilityAnnalId = dependency_1.UUID.deserialize(reader));
                    break;
                case 21:
                    message.userImpactVulnerabilityAnnalCreatedAt = reader.readInt64();
                    break;
                case 22:
                    reader.readMessage(message.description, () => pb_1.Message.addToRepeatedWrapperField(message, 22, TextData.deserialize(reader), TextData));
                    break;
                case 23:
                    reader.readMessage(message.problems, () => pb_1.Message.addToRepeatedWrapperField(message, 23, TextData.deserialize(reader), TextData));
                    break;
                case 24:
                    reader.readMessage(message.referenceLink, () => pb_1.Message.addToRepeatedWrapperField(message, 24, ReferenceLink.deserialize(reader), ReferenceLink));
                    break;
                case 25:
                    message.vulnerabilityNote = reader.readString();
                    break;
                case 26:
                    message.isModify = reader.readBool();
                    break;
                case 27:
                    message.cvssV2VectorString = reader.readString();
                    break;
                case 28:
                    message.cvssV3VectorString = reader.readString();
                    break;
                case 29:
                    message.vulnerabilityAssociationDate = reader.readInt64();
                    break;
                case 30:
                    message.vulnerabilityPublishedTimestamp = reader.readInt64();
                    break;
                case 31:
                    message.vulnerabilityModifiedTimestamp = reader.readInt64();
                    break;
                case 32:
                    message.patchState = reader.readEnum();
                    break;
                case 33:
                    message.cisaKev = reader.readBool();
                    break;
                case 34:
                    message.topCwe = reader.readBool();
                    break;
                case 35:
                    message.exploitDb = reader.readBool();
                    break;
                case 36:
                    message.metasploit = reader.readBool();
                    break;
                case 37:
                    message.epssScore = reader.readString();
                    break;
                case 40:
                    message.ai = reader.readBool();
                    break;
                case 41:
                    message.cdxRemediationEvidence = reader.readString();
                    break;
                case 42:
                    message.vexRemediationEvidence = reader.readString();
                    break;
                case 43:
                    message.cdxVexStatus = reader.readEnum();
                    break;
                case 44:
                    message.cdxRemediationState = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Vulnerability {
        return Vulnerability.deserialize(bytes);
    }
}
export class VulnerabilityFilter extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        vulnerabilitySourceId?: dependency_1.UUID;
        vulnerabilityKey?: string;
        /** @deprecated*/
        cvssBaseScore?: number;
        /** @deprecated*/
        vulnerabilityModified?: dependency_1.DateRange;
        organizationProductId?: dependency_1.UUID;
        organizationProductVersionId?: dependency_1.UUID;
        startDate?: number;
        endDate?: number;
        patchState?: PatchState;
        minimumCvssBaseScore?: number;
        vulnSource?: VulnSource;
        cisaKevOnly?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("vulnerabilitySourceId" in data && data.vulnerabilitySourceId != undefined) {
                this.vulnerabilitySourceId = data.vulnerabilitySourceId;
            }
            if ("vulnerabilityKey" in data && data.vulnerabilityKey != undefined) {
                this.vulnerabilityKey = data.vulnerabilityKey;
            }
            if ("cvssBaseScore" in data && data.cvssBaseScore != undefined) {
                this.cvssBaseScore = data.cvssBaseScore;
            }
            if ("vulnerabilityModified" in data && data.vulnerabilityModified != undefined) {
                this.vulnerabilityModified = data.vulnerabilityModified;
            }
            if ("organizationProductId" in data && data.organizationProductId != undefined) {
                this.organizationProductId = data.organizationProductId;
            }
            if ("organizationProductVersionId" in data && data.organizationProductVersionId != undefined) {
                this.organizationProductVersionId = data.organizationProductVersionId;
            }
            if ("startDate" in data && data.startDate != undefined) {
                this.startDate = data.startDate;
            }
            if ("endDate" in data && data.endDate != undefined) {
                this.endDate = data.endDate;
            }
            if ("patchState" in data && data.patchState != undefined) {
                this.patchState = data.patchState;
            }
            if ("minimumCvssBaseScore" in data && data.minimumCvssBaseScore != undefined) {
                this.minimumCvssBaseScore = data.minimumCvssBaseScore;
            }
            if ("vulnSource" in data && data.vulnSource != undefined) {
                this.vulnSource = data.vulnSource;
            }
            if ("cisaKevOnly" in data && data.cisaKevOnly != undefined) {
                this.cisaKevOnly = data.cisaKevOnly;
            }
        }
    }
    get vulnerabilitySourceId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 1) as dependency_1.UUID;
    }
    set vulnerabilitySourceId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasVulnerabilitySourceId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get vulnerabilityKey() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set vulnerabilityKey(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    /** @deprecated*/
    get cvssBaseScore() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    /** @deprecated*/
    set cvssBaseScore(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    /** @deprecated*/
    get vulnerabilityModified() {
        return pb_1.Message.getWrapperField(this, dependency_1.DateRange, 4) as dependency_1.DateRange;
    }
    /** @deprecated*/
    set vulnerabilityModified(value: dependency_1.DateRange) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    /** @deprecated*/
    get hasVulnerabilityModified() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get organizationProductId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 5) as dependency_1.UUID;
    }
    set organizationProductId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasOrganizationProductId() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get organizationProductVersionId() {
        return pb_1.Message.getWrapperField(this, dependency_1.UUID, 6) as dependency_1.UUID;
    }
    set organizationProductVersionId(value: dependency_1.UUID) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasOrganizationProductVersionId() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get startDate() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set startDate(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get endDate() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set endDate(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get patchState() {
        return pb_1.Message.getFieldWithDefault(this, 10, PatchState.UNKNOWN) as PatchState;
    }
    set patchState(value: PatchState) {
        pb_1.Message.setField(this, 10, value);
    }
    get minimumCvssBaseScore() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set minimumCvssBaseScore(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get vulnSource() {
        return pb_1.Message.getFieldWithDefault(this, 12, VulnSource.UNSET) as VulnSource;
    }
    set vulnSource(value: VulnSource) {
        pb_1.Message.setField(this, 12, value);
    }
    get cisaKevOnly() {
        return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
    }
    set cisaKevOnly(value: boolean) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data: {
        vulnerabilitySourceId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        vulnerabilityKey?: string;
        cvssBaseScore?: number;
        vulnerabilityModified?: ReturnType<typeof dependency_1.DateRange.prototype.toObject>;
        organizationProductId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        organizationProductVersionId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
        startDate?: number;
        endDate?: number;
        patchState?: PatchState;
        minimumCvssBaseScore?: number;
        vulnSource?: VulnSource;
        cisaKevOnly?: boolean;
    }): VulnerabilityFilter {
        const message = new VulnerabilityFilter({});
        if (data.vulnerabilitySourceId != null) {
            message.vulnerabilitySourceId = dependency_1.UUID.fromObject(data.vulnerabilitySourceId);
        }
        if (data.vulnerabilityKey != null) {
            message.vulnerabilityKey = data.vulnerabilityKey;
        }
        if (data.cvssBaseScore != null) {
            message.cvssBaseScore = data.cvssBaseScore;
        }
        if (data.vulnerabilityModified != null) {
            message.vulnerabilityModified = dependency_1.DateRange.fromObject(data.vulnerabilityModified);
        }
        if (data.organizationProductId != null) {
            message.organizationProductId = dependency_1.UUID.fromObject(data.organizationProductId);
        }
        if (data.organizationProductVersionId != null) {
            message.organizationProductVersionId = dependency_1.UUID.fromObject(data.organizationProductVersionId);
        }
        if (data.startDate != null) {
            message.startDate = data.startDate;
        }
        if (data.endDate != null) {
            message.endDate = data.endDate;
        }
        if (data.patchState != null) {
            message.patchState = data.patchState;
        }
        if (data.minimumCvssBaseScore != null) {
            message.minimumCvssBaseScore = data.minimumCvssBaseScore;
        }
        if (data.vulnSource != null) {
            message.vulnSource = data.vulnSource;
        }
        if (data.cisaKevOnly != null) {
            message.cisaKevOnly = data.cisaKevOnly;
        }
        return message;
    }
    toObject() {
        const data: {
            vulnerabilitySourceId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            vulnerabilityKey?: string;
            cvssBaseScore?: number;
            vulnerabilityModified?: ReturnType<typeof dependency_1.DateRange.prototype.toObject>;
            organizationProductId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            organizationProductVersionId?: ReturnType<typeof dependency_1.UUID.prototype.toObject>;
            startDate?: number;
            endDate?: number;
            patchState?: PatchState;
            minimumCvssBaseScore?: number;
            vulnSource?: VulnSource;
            cisaKevOnly?: boolean;
        } = {};
        if (this.vulnerabilitySourceId != null) {
            data.vulnerabilitySourceId = this.vulnerabilitySourceId.toObject();
        }
        if (this.vulnerabilityKey != null) {
            data.vulnerabilityKey = this.vulnerabilityKey;
        }
        if (this.cvssBaseScore != null) {
            data.cvssBaseScore = this.cvssBaseScore;
        }
        if (this.vulnerabilityModified != null) {
            data.vulnerabilityModified = this.vulnerabilityModified.toObject();
        }
        if (this.organizationProductId != null) {
            data.organizationProductId = this.organizationProductId.toObject();
        }
        if (this.organizationProductVersionId != null) {
            data.organizationProductVersionId = this.organizationProductVersionId.toObject();
        }
        if (this.startDate != null) {
            data.startDate = this.startDate;
        }
        if (this.endDate != null) {
            data.endDate = this.endDate;
        }
        if (this.patchState != null) {
            data.patchState = this.patchState;
        }
        if (this.minimumCvssBaseScore != null) {
            data.minimumCvssBaseScore = this.minimumCvssBaseScore;
        }
        if (this.vulnSource != null) {
            data.vulnSource = this.vulnSource;
        }
        if (this.cisaKevOnly != null) {
            data.cisaKevOnly = this.cisaKevOnly;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasVulnerabilitySourceId)
            writer.writeMessage(1, this.vulnerabilitySourceId, () => this.vulnerabilitySourceId.serialize(writer));
        if (this.vulnerabilityKey.length)
            writer.writeString(2, this.vulnerabilityKey);
        if (this.cvssBaseScore != 0)
            writer.writeInt32(3, this.cvssBaseScore);
        if (this.hasVulnerabilityModified)
            writer.writeMessage(4, this.vulnerabilityModified, () => this.vulnerabilityModified.serialize(writer));
        if (this.hasOrganizationProductId)
            writer.writeMessage(5, this.organizationProductId, () => this.organizationProductId.serialize(writer));
        if (this.hasOrganizationProductVersionId)
            writer.writeMessage(6, this.organizationProductVersionId, () => this.organizationProductVersionId.serialize(writer));
        if (this.startDate != 0)
            writer.writeInt64(7, this.startDate);
        if (this.endDate != 0)
            writer.writeInt64(8, this.endDate);
        if (this.patchState != PatchState.UNKNOWN)
            writer.writeEnum(10, this.patchState);
        if (this.minimumCvssBaseScore != 0)
            writer.writeDouble(11, this.minimumCvssBaseScore);
        if (this.vulnSource != VulnSource.UNSET)
            writer.writeEnum(12, this.vulnSource);
        if (this.cisaKevOnly != false)
            writer.writeBool(13, this.cisaKevOnly);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VulnerabilityFilter {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VulnerabilityFilter();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.vulnerabilitySourceId, () => message.vulnerabilitySourceId = dependency_1.UUID.deserialize(reader));
                    break;
                case 2:
                    message.vulnerabilityKey = reader.readString();
                    break;
                case 3:
                    message.cvssBaseScore = reader.readInt32();
                    break;
                case 4:
                    reader.readMessage(message.vulnerabilityModified, () => message.vulnerabilityModified = dependency_1.DateRange.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.organizationProductId, () => message.organizationProductId = dependency_1.UUID.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.organizationProductVersionId, () => message.organizationProductVersionId = dependency_1.UUID.deserialize(reader));
                    break;
                case 7:
                    message.startDate = reader.readInt64();
                    break;
                case 8:
                    message.endDate = reader.readInt64();
                    break;
                case 10:
                    message.patchState = reader.readEnum();
                    break;
                case 11:
                    message.minimumCvssBaseScore = reader.readDouble();
                    break;
                case 12:
                    message.vulnSource = reader.readEnum();
                    break;
                case 13:
                    message.cisaKevOnly = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): VulnerabilityFilter {
        return VulnerabilityFilter.deserialize(bytes);
    }
}
export class VulnerabilityOrder extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        column?: VulnerabilityOrderColumn;
        isDescending?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("column" in data && data.column != undefined) {
                this.column = data.column;
            }
            if ("isDescending" in data && data.isDescending != undefined) {
                this.isDescending = data.isDescending;
            }
        }
    }
    get column() {
        return pb_1.Message.getFieldWithDefault(this, 1, VulnerabilityOrderColumn.ORGANIZATION_PRODUCT_NAME) as VulnerabilityOrderColumn;
    }
    set column(value: VulnerabilityOrderColumn) {
        pb_1.Message.setField(this, 1, value);
    }
    get isDescending() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set isDescending(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        column?: VulnerabilityOrderColumn;
        isDescending?: boolean;
    }): VulnerabilityOrder {
        const message = new VulnerabilityOrder({});
        if (data.column != null) {
            message.column = data.column;
        }
        if (data.isDescending != null) {
            message.isDescending = data.isDescending;
        }
        return message;
    }
    toObject() {
        const data: {
            column?: VulnerabilityOrderColumn;
            isDescending?: boolean;
        } = {};
        if (this.column != null) {
            data.column = this.column;
        }
        if (this.isDescending != null) {
            data.isDescending = this.isDescending;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.column != VulnerabilityOrderColumn.ORGANIZATION_PRODUCT_NAME)
            writer.writeEnum(1, this.column);
        if (this.isDescending != false)
            writer.writeBool(2, this.isDescending);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VulnerabilityOrder {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VulnerabilityOrder();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.column = reader.readEnum();
                    break;
                case 2:
                    message.isDescending = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): VulnerabilityOrder {
        return VulnerabilityOrder.deserialize(bytes);
    }
}
export enum VulnerabilityOrderColumn {
    ORGANIZATION_PRODUCT_NAME = 0,
    ORGANIZATION_PRODUCT_VERSION_STRING = 1,
    PRODUCT_NAME = 2,
    VENDOR_NAME = 3,
    PRODUCT_VERSION_STRING = 4,
    VULNERABILITY_ID = 5,
    SEVERITY = 6,
    VULN_MODIFIED = 7,
    VULN_PUBLISHED = 8,
    SUMMARY = 9,
    DEPENDENCY_VULNERABILITY_UPDATED = 11,
    EPSS = 12
}
export class ListVulnerabilities extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        request?: ListVulnerabilitiesRequest;
        response?: never;
    } | {
        request?: never;
        response?: ListVulnerabilitiesResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
    }
    get request() {
        return pb_1.Message.getWrapperField(this, ListVulnerabilitiesRequest, 1) as ListVulnerabilitiesRequest;
    }
    set request(value: ListVulnerabilitiesRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRequest() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, ListVulnerabilitiesResponse, 2) as ListVulnerabilitiesResponse;
    }
    set response(value: ListVulnerabilitiesResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasResponse() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "request" | "response";
        } = {
            0: "none",
            1: "request",
            2: "response"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        request?: ReturnType<typeof ListVulnerabilitiesRequest.prototype.toObject>;
        response?: ReturnType<typeof ListVulnerabilitiesResponse.prototype.toObject>;
    }): ListVulnerabilities {
        const message = new ListVulnerabilities({});
        if (data.request != null) {
            message.request = ListVulnerabilitiesRequest.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = ListVulnerabilitiesResponse.fromObject(data.response);
        }
        return message;
    }
    toObject() {
        const data: {
            request?: ReturnType<typeof ListVulnerabilitiesRequest.prototype.toObject>;
            response?: ReturnType<typeof ListVulnerabilitiesResponse.prototype.toObject>;
        } = {};
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRequest)
            writer.writeMessage(1, this.request, () => this.request.serialize(writer));
        if (this.hasResponse)
            writer.writeMessage(2, this.response, () => this.response.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListVulnerabilities {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListVulnerabilities();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request, () => message.request = ListVulnerabilitiesRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response, () => message.response = ListVulnerabilitiesResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListVulnerabilities {
        return ListVulnerabilities.deserialize(bytes);
    }
}
export class ListVulnerabilitiesRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        page?: dependency_1.Page;
        filter?: VulnerabilityFilter;
        order?: VulnerabilityOrder[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("page" in data && data.page != undefined) {
                this.page = data.page;
            }
            if ("filter" in data && data.filter != undefined) {
                this.filter = data.filter;
            }
            if ("order" in data && data.order != undefined) {
                this.order = data.order;
            }
        }
    }
    get page() {
        return pb_1.Message.getWrapperField(this, dependency_1.Page, 1) as dependency_1.Page;
    }
    set page(value: dependency_1.Page) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasPage() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get filter() {
        return pb_1.Message.getWrapperField(this, VulnerabilityFilter, 2) as VulnerabilityFilter;
    }
    set filter(value: VulnerabilityFilter) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasFilter() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get order() {
        return pb_1.Message.getRepeatedWrapperField(this, VulnerabilityOrder, 3) as VulnerabilityOrder[];
    }
    set order(value: VulnerabilityOrder[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        page?: ReturnType<typeof dependency_1.Page.prototype.toObject>;
        filter?: ReturnType<typeof VulnerabilityFilter.prototype.toObject>;
        order?: ReturnType<typeof VulnerabilityOrder.prototype.toObject>[];
    }): ListVulnerabilitiesRequest {
        const message = new ListVulnerabilitiesRequest({});
        if (data.page != null) {
            message.page = dependency_1.Page.fromObject(data.page);
        }
        if (data.filter != null) {
            message.filter = VulnerabilityFilter.fromObject(data.filter);
        }
        if (data.order != null) {
            message.order = data.order.map(item => VulnerabilityOrder.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            page?: ReturnType<typeof dependency_1.Page.prototype.toObject>;
            filter?: ReturnType<typeof VulnerabilityFilter.prototype.toObject>;
            order?: ReturnType<typeof VulnerabilityOrder.prototype.toObject>[];
        } = {};
        if (this.page != null) {
            data.page = this.page.toObject();
        }
        if (this.filter != null) {
            data.filter = this.filter.toObject();
        }
        if (this.order != null) {
            data.order = this.order.map((item: VulnerabilityOrder) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasPage)
            writer.writeMessage(1, this.page, () => this.page.serialize(writer));
        if (this.hasFilter)
            writer.writeMessage(2, this.filter, () => this.filter.serialize(writer));
        if (this.order.length)
            writer.writeRepeatedMessage(3, this.order, (item: VulnerabilityOrder) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListVulnerabilitiesRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListVulnerabilitiesRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.page, () => message.page = dependency_1.Page.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.filter, () => message.filter = VulnerabilityFilter.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.order, () => pb_1.Message.addToRepeatedWrapperField(message, 3, VulnerabilityOrder.deserialize(reader), VulnerabilityOrder));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListVulnerabilitiesRequest {
        return ListVulnerabilitiesRequest.deserialize(bytes);
    }
}
export class ListVulnerabilitiesResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: dependency_1.ResponseMetadata;
        vulnerability?: Vulnerability[];
        totalCount?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("vulnerability" in data && data.vulnerability != undefined) {
                this.vulnerability = data.vulnerability;
            }
            if ("totalCount" in data && data.totalCount != undefined) {
                this.totalCount = data.totalCount;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_1.ResponseMetadata, 1) as dependency_1.ResponseMetadata;
    }
    set metadata(value: dependency_1.ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get vulnerability() {
        return pb_1.Message.getRepeatedWrapperField(this, Vulnerability, 2) as Vulnerability[];
    }
    set vulnerability(value: Vulnerability[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get totalCount() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set totalCount(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
        vulnerability?: ReturnType<typeof Vulnerability.prototype.toObject>[];
        totalCount?: number;
    }): ListVulnerabilitiesResponse {
        const message = new ListVulnerabilitiesResponse({});
        if (data.metadata != null) {
            message.metadata = dependency_1.ResponseMetadata.fromObject(data.metadata);
        }
        if (data.vulnerability != null) {
            message.vulnerability = data.vulnerability.map(item => Vulnerability.fromObject(item));
        }
        if (data.totalCount != null) {
            message.totalCount = data.totalCount;
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof dependency_1.ResponseMetadata.prototype.toObject>;
            vulnerability?: ReturnType<typeof Vulnerability.prototype.toObject>[];
            totalCount?: number;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.vulnerability != null) {
            data.vulnerability = this.vulnerability.map((item: Vulnerability) => item.toObject());
        }
        if (this.totalCount != null) {
            data.totalCount = this.totalCount;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.vulnerability.length)
            writer.writeRepeatedMessage(2, this.vulnerability, (item: Vulnerability) => item.serialize(writer));
        if (this.totalCount != 0)
            writer.writeInt64(3, this.totalCount);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListVulnerabilitiesResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListVulnerabilitiesResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_1.ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.vulnerability, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Vulnerability.deserialize(reader), Vulnerability));
                    break;
                case 3:
                    message.totalCount = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListVulnerabilitiesResponse {
        return ListVulnerabilitiesResponse.deserialize(bytes);
    }
}
